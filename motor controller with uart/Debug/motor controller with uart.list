
motor controller with uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060f0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08006290  08006290  00007290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064a0  080064a0  00008064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080064a0  080064a0  000074a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064a8  080064a8  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064a8  080064a8  000074a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064ac  080064ac  000074ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080064b0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001618  20000064  08006514  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000167c  08006514  0000867c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001371c  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036d0  00000000  00000000  0001b7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  0001ee80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce1  00000000  00000000  0001ff68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d86  00000000  00000000  00020c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015119  00000000  00000000  000399cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009475a  00000000  00000000  0004eae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3242  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046e0  00000000  00000000  000e3288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e7968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006278 	.word	0x08006278

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08006278 	.word	0x08006278

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <Command_Process>:
 * @brief  Process received UART command
 * @param  cmd: Command character received via UART
 * @retval None
 */
void Command_Process(uint8_t cmd)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
    switch(cmd)
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	3b31      	subs	r3, #49	@ 0x31
 800051a:	2b29      	cmp	r3, #41	@ 0x29
 800051c:	f200 81d6 	bhi.w	80008cc <Command_Process+0x3c0>
 8000520:	a201      	add	r2, pc, #4	@ (adr r2, 8000528 <Command_Process+0x1c>)
 8000522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000526:	bf00      	nop
 8000528:	08000649 	.word	0x08000649
 800052c:	080006f3 	.word	0x080006f3
 8000530:	0800079b 	.word	0x0800079b
 8000534:	080008cd 	.word	0x080008cd
 8000538:	080008cd 	.word	0x080008cd
 800053c:	080008cd 	.word	0x080008cd
 8000540:	080008cd 	.word	0x080008cd
 8000544:	080008cd 	.word	0x080008cd
 8000548:	080008cd 	.word	0x080008cd
 800054c:	080008cd 	.word	0x080008cd
 8000550:	080008cd 	.word	0x080008cd
 8000554:	080008cd 	.word	0x080008cd
 8000558:	080008cd 	.word	0x080008cd
 800055c:	080008cd 	.word	0x080008cd
 8000560:	080008cd 	.word	0x080008cd
 8000564:	080008cd 	.word	0x080008cd
 8000568:	080008cd 	.word	0x080008cd
 800056c:	080008cd 	.word	0x080008cd
 8000570:	080008cd 	.word	0x080008cd
 8000574:	0800084b 	.word	0x0800084b
 8000578:	0800063d 	.word	0x0800063d
 800057c:	080005d1 	.word	0x080005d1
 8000580:	080008cd 	.word	0x080008cd
 8000584:	080008cd 	.word	0x080008cd
 8000588:	080008cd 	.word	0x080008cd
 800058c:	080008cd 	.word	0x080008cd
 8000590:	080008cd 	.word	0x080008cd
 8000594:	080005f9 	.word	0x080005f9
 8000598:	08000843 	.word	0x08000843
 800059c:	080008cd 	.word	0x080008cd
 80005a0:	080008cd 	.word	0x080008cd
 80005a4:	080008cd 	.word	0x080008cd
 80005a8:	080008cd 	.word	0x080008cd
 80005ac:	080005e5 	.word	0x080005e5
 80005b0:	08000621 	.word	0x08000621
 80005b4:	0800060d 	.word	0x0800060d
 80005b8:	08000895 	.word	0x08000895
 80005bc:	080008cd 	.word	0x080008cd
 80005c0:	080008cd 	.word	0x080008cd
 80005c4:	08000853 	.word	0x08000853
 80005c8:	080008cd 	.word	0x080008cd
 80005cc:	0800084b 	.word	0x0800084b
    {
        case CMD_FORWARD:
            Motor_Forward(current_speed);
 80005d0:	4bc3      	ldr	r3, [pc, #780]	@ (80008e0 <Command_Process+0x3d4>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 ff20 	bl	800141c <Motor_Forward>
            last_movement_cmd = CMD_FORWARD;
 80005dc:	4bc1      	ldr	r3, [pc, #772]	@ (80008e4 <Command_Process+0x3d8>)
 80005de:	2246      	movs	r2, #70	@ 0x46
 80005e0:	701a      	strb	r2, [r3, #0]
            break;
 80005e2:	e18a      	b.n	80008fa <Command_Process+0x3ee>
            
        case CMD_REVERSE:
            Motor_Reverse(current_speed);
 80005e4:	4bbe      	ldr	r3, [pc, #760]	@ (80008e0 <Command_Process+0x3d4>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 ff25 	bl	800143a <Motor_Reverse>
            last_movement_cmd = CMD_REVERSE;
 80005f0:	4bbc      	ldr	r3, [pc, #752]	@ (80008e4 <Command_Process+0x3d8>)
 80005f2:	2252      	movs	r2, #82	@ 0x52
 80005f4:	701a      	strb	r2, [r3, #0]
            break;
 80005f6:	e180      	b.n	80008fa <Command_Process+0x3ee>
            
        case CMD_LEFT:
            Motor_Left(current_speed);
 80005f8:	4bb9      	ldr	r3, [pc, #740]	@ (80008e0 <Command_Process+0x3d4>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 ff2a 	bl	8001458 <Motor_Left>
            last_movement_cmd = CMD_LEFT;
 8000604:	4bb7      	ldr	r3, [pc, #732]	@ (80008e4 <Command_Process+0x3d8>)
 8000606:	224c      	movs	r2, #76	@ 0x4c
 8000608:	701a      	strb	r2, [r3, #0]
            break;
 800060a:	e176      	b.n	80008fa <Command_Process+0x3ee>
            
        case CMD_RIGHT:
            Motor_Right(current_speed);
 800060c:	4bb4      	ldr	r3, [pc, #720]	@ (80008e0 <Command_Process+0x3d4>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f000 ff2f 	bl	8001476 <Motor_Right>
            last_movement_cmd = CMD_RIGHT;
 8000618:	4bb2      	ldr	r3, [pc, #712]	@ (80008e4 <Command_Process+0x3d8>)
 800061a:	2254      	movs	r2, #84	@ 0x54
 800061c:	701a      	strb	r2, [r3, #0]
            break;
 800061e:	e16c      	b.n	80008fa <Command_Process+0x3ee>
            
        case CMD_STOP:
            if (accel_enabled)
 8000620:	4bb1      	ldr	r3, [pc, #708]	@ (80008e8 <Command_Process+0x3dc>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d002      	beq.n	8000630 <Command_Process+0x124>
                Motor_Stop_Smooth();
 800062a:	f000 ff4f 	bl	80014cc <Motor_Stop_Smooth>
 800062e:	e001      	b.n	8000634 <Command_Process+0x128>
            else
                Motor_Stop();
 8000630:	f000 ff42 	bl	80014b8 <Motor_Stop>
            last_movement_cmd = CMD_STOP;
 8000634:	4bab      	ldr	r3, [pc, #684]	@ (80008e4 <Command_Process+0x3d8>)
 8000636:	2253      	movs	r2, #83	@ 0x53
 8000638:	701a      	strb	r2, [r3, #0]
            break;
 800063a:	e15e      	b.n	80008fa <Command_Process+0x3ee>
        
        case 'E': // Emergency stop alias from UI
            Motor_Stop();
 800063c:	f000 ff3c 	bl	80014b8 <Motor_Stop>
            last_movement_cmd = CMD_STOP;
 8000640:	4ba8      	ldr	r3, [pc, #672]	@ (80008e4 <Command_Process+0x3d8>)
 8000642:	2253      	movs	r2, #83	@ 0x53
 8000644:	701a      	strb	r2, [r3, #0]
            break;
 8000646:	e158      	b.n	80008fa <Command_Process+0x3ee>
            
        case CMD_SPEED_SLOW:
            current_speed = SPEED_SLOW;
 8000648:	4ba5      	ldr	r3, [pc, #660]	@ (80008e0 <Command_Process+0x3d4>)
 800064a:	2228      	movs	r2, #40	@ 0x28
 800064c:	701a      	strb	r2, [r3, #0]
            if (motors_moving && last_movement_cmd != CMD_STOP)
 800064e:	4ba7      	ldr	r3, [pc, #668]	@ (80008ec <Command_Process+0x3e0>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	f000 813f 	beq.w	80008d8 <Command_Process+0x3cc>
 800065a:	4ba2      	ldr	r3, [pc, #648]	@ (80008e4 <Command_Process+0x3d8>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b53      	cmp	r3, #83	@ 0x53
 8000662:	f000 8139 	beq.w	80008d8 <Command_Process+0x3cc>
            {
                switch(last_movement_cmd)
 8000666:	4b9f      	ldr	r3, [pc, #636]	@ (80008e4 <Command_Process+0x3d8>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	3b46      	subs	r3, #70	@ 0x46
 800066e:	2b0e      	cmp	r3, #14
 8000670:	f200 8132 	bhi.w	80008d8 <Command_Process+0x3cc>
 8000674:	a201      	add	r2, pc, #4	@ (adr r2, 800067c <Command_Process+0x170>)
 8000676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067a:	bf00      	nop
 800067c:	080006b9 	.word	0x080006b9
 8000680:	080008d9 	.word	0x080008d9
 8000684:	080008d9 	.word	0x080008d9
 8000688:	080008d9 	.word	0x080008d9
 800068c:	080008d9 	.word	0x080008d9
 8000690:	080008d9 	.word	0x080008d9
 8000694:	080006d5 	.word	0x080006d5
 8000698:	080008d9 	.word	0x080008d9
 800069c:	080008d9 	.word	0x080008d9
 80006a0:	080008d9 	.word	0x080008d9
 80006a4:	080008d9 	.word	0x080008d9
 80006a8:	080008d9 	.word	0x080008d9
 80006ac:	080006c7 	.word	0x080006c7
 80006b0:	080008d9 	.word	0x080008d9
 80006b4:	080006e3 	.word	0x080006e3
                {
                    case CMD_FORWARD:
                        Motor_Forward(current_speed);
 80006b8:	4b89      	ldr	r3, [pc, #548]	@ (80008e0 <Command_Process+0x3d4>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 feac 	bl	800141c <Motor_Forward>
                        break;
 80006c4:	e014      	b.n	80006f0 <Command_Process+0x1e4>
                    case CMD_REVERSE:
                        Motor_Reverse(current_speed);
 80006c6:	4b86      	ldr	r3, [pc, #536]	@ (80008e0 <Command_Process+0x3d4>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 feb4 	bl	800143a <Motor_Reverse>
                        break;
 80006d2:	e00d      	b.n	80006f0 <Command_Process+0x1e4>
                    case CMD_LEFT:
                        Motor_Left(current_speed);
 80006d4:	4b82      	ldr	r3, [pc, #520]	@ (80008e0 <Command_Process+0x3d4>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 febc 	bl	8001458 <Motor_Left>
                        break;
 80006e0:	e006      	b.n	80006f0 <Command_Process+0x1e4>
                    case CMD_RIGHT:
                        Motor_Right(current_speed);
 80006e2:	4b7f      	ldr	r3, [pc, #508]	@ (80008e0 <Command_Process+0x3d4>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fec4 	bl	8001476 <Motor_Right>
                        break;
 80006ee:	bf00      	nop
                }
            }
            break;
 80006f0:	e0f2      	b.n	80008d8 <Command_Process+0x3cc>
            
        case CMD_SPEED_MEDIUM:
            current_speed = SPEED_MEDIUM;
 80006f2:	4b7b      	ldr	r3, [pc, #492]	@ (80008e0 <Command_Process+0x3d4>)
 80006f4:	2246      	movs	r2, #70	@ 0x46
 80006f6:	701a      	strb	r2, [r3, #0]
            if (motors_moving && last_movement_cmd != CMD_STOP)
 80006f8:	4b7c      	ldr	r3, [pc, #496]	@ (80008ec <Command_Process+0x3e0>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b00      	cmp	r3, #0
 8000700:	f000 80ec 	beq.w	80008dc <Command_Process+0x3d0>
 8000704:	4b77      	ldr	r3, [pc, #476]	@ (80008e4 <Command_Process+0x3d8>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b53      	cmp	r3, #83	@ 0x53
 800070c:	f000 80e6 	beq.w	80008dc <Command_Process+0x3d0>
            {
                switch(last_movement_cmd)
 8000710:	4b74      	ldr	r3, [pc, #464]	@ (80008e4 <Command_Process+0x3d8>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	3b46      	subs	r3, #70	@ 0x46
 8000718:	2b0e      	cmp	r3, #14
 800071a:	f200 80df 	bhi.w	80008dc <Command_Process+0x3d0>
 800071e:	a201      	add	r2, pc, #4	@ (adr r2, 8000724 <Command_Process+0x218>)
 8000720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000724:	08000761 	.word	0x08000761
 8000728:	080008dd 	.word	0x080008dd
 800072c:	080008dd 	.word	0x080008dd
 8000730:	080008dd 	.word	0x080008dd
 8000734:	080008dd 	.word	0x080008dd
 8000738:	080008dd 	.word	0x080008dd
 800073c:	0800077d 	.word	0x0800077d
 8000740:	080008dd 	.word	0x080008dd
 8000744:	080008dd 	.word	0x080008dd
 8000748:	080008dd 	.word	0x080008dd
 800074c:	080008dd 	.word	0x080008dd
 8000750:	080008dd 	.word	0x080008dd
 8000754:	0800076f 	.word	0x0800076f
 8000758:	080008dd 	.word	0x080008dd
 800075c:	0800078b 	.word	0x0800078b
                {
                    case CMD_FORWARD:
                        Motor_Forward(current_speed);
 8000760:	4b5f      	ldr	r3, [pc, #380]	@ (80008e0 <Command_Process+0x3d4>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fe58 	bl	800141c <Motor_Forward>
                        break;
 800076c:	e014      	b.n	8000798 <Command_Process+0x28c>
                    case CMD_REVERSE:
                        Motor_Reverse(current_speed);
 800076e:	4b5c      	ldr	r3, [pc, #368]	@ (80008e0 <Command_Process+0x3d4>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	4618      	mov	r0, r3
 8000776:	f000 fe60 	bl	800143a <Motor_Reverse>
                        break;
 800077a:	e00d      	b.n	8000798 <Command_Process+0x28c>
                    case CMD_LEFT:
                        Motor_Left(current_speed);
 800077c:	4b58      	ldr	r3, [pc, #352]	@ (80008e0 <Command_Process+0x3d4>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f000 fe68 	bl	8001458 <Motor_Left>
                        break;
 8000788:	e006      	b.n	8000798 <Command_Process+0x28c>
                    case CMD_RIGHT:
                        Motor_Right(current_speed);
 800078a:	4b55      	ldr	r3, [pc, #340]	@ (80008e0 <Command_Process+0x3d4>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	4618      	mov	r0, r3
 8000792:	f000 fe70 	bl	8001476 <Motor_Right>
                        break;
 8000796:	bf00      	nop
                }
            }
            break;
 8000798:	e0a0      	b.n	80008dc <Command_Process+0x3d0>
            
        case CMD_SPEED_FAST:
            current_speed = SPEED_FAST;
 800079a:	4b51      	ldr	r3, [pc, #324]	@ (80008e0 <Command_Process+0x3d4>)
 800079c:	2264      	movs	r2, #100	@ 0x64
 800079e:	701a      	strb	r2, [r3, #0]
            if (motors_moving && last_movement_cmd != CMD_STOP)
 80007a0:	4b52      	ldr	r3, [pc, #328]	@ (80008ec <Command_Process+0x3e0>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	f000 80a6 	beq.w	80008f8 <Command_Process+0x3ec>
 80007ac:	4b4d      	ldr	r3, [pc, #308]	@ (80008e4 <Command_Process+0x3d8>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b53      	cmp	r3, #83	@ 0x53
 80007b4:	f000 80a0 	beq.w	80008f8 <Command_Process+0x3ec>
            {
                switch(last_movement_cmd)
 80007b8:	4b4a      	ldr	r3, [pc, #296]	@ (80008e4 <Command_Process+0x3d8>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	3b46      	subs	r3, #70	@ 0x46
 80007c0:	2b0e      	cmp	r3, #14
 80007c2:	f200 8099 	bhi.w	80008f8 <Command_Process+0x3ec>
 80007c6:	a201      	add	r2, pc, #4	@ (adr r2, 80007cc <Command_Process+0x2c0>)
 80007c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007cc:	08000809 	.word	0x08000809
 80007d0:	080008f9 	.word	0x080008f9
 80007d4:	080008f9 	.word	0x080008f9
 80007d8:	080008f9 	.word	0x080008f9
 80007dc:	080008f9 	.word	0x080008f9
 80007e0:	080008f9 	.word	0x080008f9
 80007e4:	08000825 	.word	0x08000825
 80007e8:	080008f9 	.word	0x080008f9
 80007ec:	080008f9 	.word	0x080008f9
 80007f0:	080008f9 	.word	0x080008f9
 80007f4:	080008f9 	.word	0x080008f9
 80007f8:	080008f9 	.word	0x080008f9
 80007fc:	08000817 	.word	0x08000817
 8000800:	080008f9 	.word	0x080008f9
 8000804:	08000833 	.word	0x08000833
                {
                    case CMD_FORWARD:
                        Motor_Forward(current_speed);
 8000808:	4b35      	ldr	r3, [pc, #212]	@ (80008e0 <Command_Process+0x3d4>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fe04 	bl	800141c <Motor_Forward>
                        break;
 8000814:	e014      	b.n	8000840 <Command_Process+0x334>
                    case CMD_REVERSE:
                        Motor_Reverse(current_speed);
 8000816:	4b32      	ldr	r3, [pc, #200]	@ (80008e0 <Command_Process+0x3d4>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fe0c 	bl	800143a <Motor_Reverse>
                        break;
 8000822:	e00d      	b.n	8000840 <Command_Process+0x334>
                    case CMD_LEFT:
                        Motor_Left(current_speed);
 8000824:	4b2e      	ldr	r3, [pc, #184]	@ (80008e0 <Command_Process+0x3d4>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	4618      	mov	r0, r3
 800082c:	f000 fe14 	bl	8001458 <Motor_Left>
                        break;
 8000830:	e006      	b.n	8000840 <Command_Process+0x334>
                    case CMD_RIGHT:
                        Motor_Right(current_speed);
 8000832:	4b2b      	ldr	r3, [pc, #172]	@ (80008e0 <Command_Process+0x3d4>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4618      	mov	r0, r3
 800083a:	f000 fe1c 	bl	8001476 <Motor_Right>
                        break;
 800083e:	bf00      	nop
                }
            }
            break;
 8000840:	e05a      	b.n	80008f8 <Command_Process+0x3ec>
            
        case CMD_ACCEL_ENABLE:
            accel_enabled = true;
 8000842:	4b29      	ldr	r3, [pc, #164]	@ (80008e8 <Command_Process+0x3dc>)
 8000844:	2201      	movs	r2, #1
 8000846:	701a      	strb	r2, [r3, #0]
            break;
 8000848:	e057      	b.n	80008fa <Command_Process+0x3ee>
            
        case CMD_ACCEL_DISABLE:
        case CMD_ACCEL_DISABLE_ALT:
            accel_enabled = false;
 800084a:	4b27      	ldr	r3, [pc, #156]	@ (80008e8 <Command_Process+0x3dc>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
            break;
 8000850:	e053      	b.n	80008fa <Command_Process+0x3ee>
        
        case CMD_SELF_TEST:
        {
            bool prev_accel = accel_enabled;
 8000852:	4b25      	ldr	r3, [pc, #148]	@ (80008e8 <Command_Process+0x3dc>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	73fb      	strb	r3, [r7, #15]
            accel_enabled = false;
 8000858:	4b23      	ldr	r3, [pc, #140]	@ (80008e8 <Command_Process+0x3dc>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
            Motor_Forward(40); osDelay(1000);
 800085e:	2028      	movs	r0, #40	@ 0x28
 8000860:	f000 fddc 	bl	800141c <Motor_Forward>
 8000864:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000868:	f003 f9c6 	bl	8003bf8 <osDelay>
            Motor_Forward(70); osDelay(1000);
 800086c:	2046      	movs	r0, #70	@ 0x46
 800086e:	f000 fdd5 	bl	800141c <Motor_Forward>
 8000872:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000876:	f003 f9bf 	bl	8003bf8 <osDelay>
            Motor_Forward(100); osDelay(1000);
 800087a:	2064      	movs	r0, #100	@ 0x64
 800087c:	f000 fdce 	bl	800141c <Motor_Forward>
 8000880:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000884:	f003 f9b8 	bl	8003bf8 <osDelay>
            Motor_Stop();
 8000888:	f000 fe16 	bl	80014b8 <Motor_Stop>
            accel_enabled = prev_accel;
 800088c:	4a16      	ldr	r2, [pc, #88]	@ (80008e8 <Command_Process+0x3dc>)
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	7013      	strb	r3, [r2, #0]
            break;
 8000892:	e032      	b.n	80008fa <Command_Process+0x3ee>
        }

        case CMD_ULTRASONIC_PING:
        {
#if ULTRASONIC_ENABLED
            uint16_t a = Ultrasonic_MeasureA();
 8000894:	f001 f996 	bl	8001bc4 <Ultrasonic_MeasureA>
 8000898:	4603      	mov	r3, r0
 800089a:	81bb      	strh	r3, [r7, #12]
            osDelay(5);
 800089c:	2005      	movs	r0, #5
 800089e:	f003 f9ab 	bl	8003bf8 <osDelay>
            uint16_t b = Ultrasonic_MeasureB();
 80008a2:	f001 f99d 	bl	8001be0 <Ultrasonic_MeasureB>
 80008a6:	4603      	mov	r3, r0
 80008a8:	817b      	strh	r3, [r7, #10]
            UART_SendString("US A="); 
 80008aa:	4811      	ldr	r0, [pc, #68]	@ (80008f0 <Command_Process+0x3e4>)
 80008ac:	f000 ffe6 	bl	800187c <UART_SendString>
            UART_SendUInt(a); 
 80008b0:	89bb      	ldrh	r3, [r7, #12]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 f802 	bl	80018bc <UART_SendUInt>
            UART_SendString("cm B="); 
 80008b8:	480e      	ldr	r0, [pc, #56]	@ (80008f4 <Command_Process+0x3e8>)
 80008ba:	f000 ffdf 	bl	800187c <UART_SendString>
            UART_SendUInt(b); 
 80008be:	897b      	ldrh	r3, [r7, #10]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 fffb 	bl	80018bc <UART_SendUInt>
            UART_SendCRLF();
 80008c6:	f001 f84b 	bl	8001960 <UART_SendCRLF>
#else
            UART_SendString("US disabled\r\n");
#endif
            break;
 80008ca:	e016      	b.n	80008fa <Command_Process+0x3ee>
        }
            
        default:
            Motor_Stop();
 80008cc:	f000 fdf4 	bl	80014b8 <Motor_Stop>
            last_movement_cmd = CMD_STOP;
 80008d0:	4b04      	ldr	r3, [pc, #16]	@ (80008e4 <Command_Process+0x3d8>)
 80008d2:	2253      	movs	r2, #83	@ 0x53
 80008d4:	701a      	strb	r2, [r3, #0]
            break;
 80008d6:	e010      	b.n	80008fa <Command_Process+0x3ee>
            break;
 80008d8:	bf00      	nop
 80008da:	e00e      	b.n	80008fa <Command_Process+0x3ee>
            break;
 80008dc:	bf00      	nop
 80008de:	e00c      	b.n	80008fa <Command_Process+0x3ee>
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000002 	.word	0x20000002
 80008e8:	20000001 	.word	0x20000001
 80008ec:	20000380 	.word	0x20000380
 80008f0:	08006290 	.word	0x08006290
 80008f4:	08006298 	.word	0x08006298
            break;
 80008f8:	bf00      	nop
    }
    
    last_command_time = HAL_GetTick();
 80008fa:	f001 fbbd 	bl	8002078 <HAL_GetTick>
 80008fe:	4603      	mov	r3, r0
 8000900:	4a02      	ldr	r2, [pc, #8]	@ (800090c <Command_Process+0x400>)
 8000902:	6013      	str	r3, [r2, #0]
}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000080 	.word	0x20000080

08000910 <Command_SafetyCheck>:
/**
 * @brief  Safety check - emergency stop if no command received
 * @retval None
 */
void Command_SafetyCheck(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
    if ((HAL_GetTick() - last_command_time) > SAFETY_TIMEOUT_MS)
 8000914:	f001 fbb0 	bl	8002078 <HAL_GetTick>
 8000918:	4602      	mov	r2, r0
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <Command_SafetyCheck+0x2c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000924:	4293      	cmp	r3, r2
 8000926:	d907      	bls.n	8000938 <Command_SafetyCheck+0x28>
    {
        Motor_Stop();
 8000928:	f000 fdc6 	bl	80014b8 <Motor_Stop>
        motors_moving = false;
 800092c:	4b04      	ldr	r3, [pc, #16]	@ (8000940 <Command_SafetyCheck+0x30>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
        last_movement_cmd = CMD_STOP;
 8000932:	4b04      	ldr	r3, [pc, #16]	@ (8000944 <Command_SafetyCheck+0x34>)
 8000934:	2253      	movs	r2, #83	@ 0x53
 8000936:	701a      	strb	r2, [r3, #0]
    }
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000080 	.word	0x20000080
 8000940:	20000380 	.word	0x20000380
 8000944:	20000002 	.word	0x20000002

08000948 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	4a07      	ldr	r2, [pc, #28]	@ (8000974 <vApplicationGetIdleTaskMemory+0x2c>)
 8000958:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	4a06      	ldr	r2, [pc, #24]	@ (8000978 <vApplicationGetIdleTaskMemory+0x30>)
 800095e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	20000084 	.word	0x20000084
 8000978:	20000124 	.word	0x20000124

0800097c <LED_Init>:
/**
 * @brief  Initialize all LED GPIO pins
 * @retval None
 */
void LED_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
    
    /* Enable GPIO clocks */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	4b31      	ldr	r3, [pc, #196]	@ (8000a5c <LED_Init+0xe0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a30      	ldr	r2, [pc, #192]	@ (8000a5c <LED_Init+0xe0>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a5c <LED_Init+0xe0>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a5c <LED_Init+0xe0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a29      	ldr	r2, [pc, #164]	@ (8000a5c <LED_Init+0xe0>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b27      	ldr	r3, [pc, #156]	@ (8000a5c <LED_Init+0xe0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
    
    /* Configure LED Indicator Pins (PC13, PC14) as Output */
    GPIO_InitStruct.Pin = LED_RX_PIN | LED_TX_PIN;
 80009ca:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80009ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	4619      	mov	r1, r3
 80009e2:	481f      	ldr	r0, [pc, #124]	@ (8000a60 <LED_Init+0xe4>)
 80009e4:	f001 fc5a 	bl	800229c <HAL_GPIO_Init>
    
    /* Initialize LED pins to OFF */
    HAL_GPIO_WritePin(LED_PORT, LED_RX_PIN, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ee:	481c      	ldr	r0, [pc, #112]	@ (8000a60 <LED_Init+0xe4>)
 80009f0:	f001 fdf0 	bl	80025d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_PORT, LED_TX_PIN, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009fa:	4819      	ldr	r0, [pc, #100]	@ (8000a60 <LED_Init+0xe4>)
 80009fc:	f001 fdea 	bl	80025d4 <HAL_GPIO_WritePin>

    /* Configure Heartbeat LED (PB12) as Output */
    GPIO_InitStruct.Pin = HEARTBEAT_LED_PIN;
 8000a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(HEARTBEAT_LED_PORT, &GPIO_InitStruct);
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	4619      	mov	r1, r3
 8000a18:	4812      	ldr	r0, [pc, #72]	@ (8000a64 <LED_Init+0xe8>)
 8000a1a:	f001 fc3f 	bl	800229c <HAL_GPIO_Init>

    /* Initialize Heartbeat LED to OFF */
    HAL_GPIO_WritePin(HEARTBEAT_LED_PORT, HEARTBEAT_LED_PIN, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a24:	480f      	ldr	r0, [pc, #60]	@ (8000a64 <LED_Init+0xe8>)
 8000a26:	f001 fdd5 	bl	80025d4 <HAL_GPIO_WritePin>
    
    /* Configure Wall Debug LEDs (PB14, PB15) as Output */
    GPIO_InitStruct.Pin = WALL_LEFT_LED_PIN | WALL_RIGHT_LED_PIN;
 8000a2a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000a2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(WALL_LED_PORT, &GPIO_InitStruct);
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	4619      	mov	r1, r3
 8000a42:	4808      	ldr	r0, [pc, #32]	@ (8000a64 <LED_Init+0xe8>)
 8000a44:	f001 fc2a 	bl	800229c <HAL_GPIO_Init>

    /* Initialize Wall Debug LEDs to OFF */
    HAL_GPIO_WritePin(WALL_LED_PORT, WALL_LEFT_LED_PIN | WALL_RIGHT_LED_PIN, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000a4e:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <LED_Init+0xe8>)
 8000a50:	f001 fdc0 	bl	80025d4 <HAL_GPIO_WritePin>
}
 8000a54:	bf00      	nop
 8000a56:	3720      	adds	r7, #32
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020800 	.word	0x40020800
 8000a64:	40020400 	.word	0x40020400

08000a68 <LED_Toggle_RX>:
/**
 * @brief  Toggle RX activity LED
 * @retval None
 */
void LED_Toggle_RX(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_PORT, LED_RX_PIN);
 8000a6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a70:	4802      	ldr	r0, [pc, #8]	@ (8000a7c <LED_Toggle_RX+0x14>)
 8000a72:	f001 fdc8 	bl	8002606 <HAL_GPIO_TogglePin>
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40020800 	.word	0x40020800

08000a80 <LED_Toggle_TX>:
/**
 * @brief  Toggle TX activity LED
 * @retval None
 */
void LED_Toggle_TX(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_PORT, LED_TX_PIN);
 8000a84:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a88:	4802      	ldr	r0, [pc, #8]	@ (8000a94 <LED_Toggle_TX+0x14>)
 8000a8a:	f001 fdbc 	bl	8002606 <HAL_GPIO_TogglePin>
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40020800 	.word	0x40020800

08000a98 <LED_Toggle_Heartbeat>:
/**
 * @brief  Toggle heartbeat LED
 * @retval None
 */
void LED_Toggle_Heartbeat(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(HEARTBEAT_LED_PORT, HEARTBEAT_LED_PIN);
 8000a9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aa0:	4802      	ldr	r0, [pc, #8]	@ (8000aac <LED_Toggle_Heartbeat+0x14>)
 8000aa2:	f001 fdb0 	bl	8002606 <HAL_GPIO_TogglePin>
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40020400 	.word	0x40020400

08000ab0 <LED_SetWallIndicators>:
 * @param  left_state: GPIO_PIN_SET or GPIO_PIN_RESET
 * @param  right_state: GPIO_PIN_SET or GPIO_PIN_RESET
 * @retval None
 */
void LED_SetWallIndicators(GPIO_PinState left_state, GPIO_PinState right_state)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	460a      	mov	r2, r1
 8000aba:	71fb      	strb	r3, [r7, #7]
 8000abc:	4613      	mov	r3, r2
 8000abe:	71bb      	strb	r3, [r7, #6]
#if WALL_LED_ACTIVE_LOW
    left_state = (left_state == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET;
    right_state = (right_state == GPIO_PIN_SET) ? GPIO_PIN_RESET : GPIO_PIN_SET;
#endif
    HAL_GPIO_WritePin(WALL_LED_PORT, WALL_LEFT_LED_PIN, left_state);
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ac8:	4806      	ldr	r0, [pc, #24]	@ (8000ae4 <LED_SetWallIndicators+0x34>)
 8000aca:	f001 fd83 	bl	80025d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(WALL_LED_PORT, WALL_RIGHT_LED_PIN, right_state);
 8000ace:	79bb      	ldrb	r3, [r7, #6]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ad6:	4803      	ldr	r0, [pc, #12]	@ (8000ae4 <LED_SetWallIndicators+0x34>)
 8000ad8:	f001 fd7c 	bl	80025d4 <HAL_GPIO_WritePin>
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <LED_SelfTest>:
/**
 * @brief  Run LED self-test (brief blink sequence)
 * @retval None
 */
void LED_SelfTest(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
    GPIO_PinState on_state = GPIO_PIN_SET;
 8000aee:	2301      	movs	r3, #1
 8000af0:	71fb      	strb	r3, [r7, #7]
    GPIO_PinState off_state = GPIO_PIN_RESET;
 8000af2:	2300      	movs	r3, #0
 8000af4:	71bb      	strb	r3, [r7, #6]
#if WALL_LED_ACTIVE_LOW
    on_state = GPIO_PIN_RESET;
    off_state = GPIO_PIN_SET;
#endif
    HAL_GPIO_WritePin(WALL_LED_PORT, WALL_LEFT_LED_PIN | WALL_RIGHT_LED_PIN, on_state);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	461a      	mov	r2, r3
 8000afa:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000afe:	4808      	ldr	r0, [pc, #32]	@ (8000b20 <LED_SelfTest+0x38>)
 8000b00:	f001 fd68 	bl	80025d4 <HAL_GPIO_WritePin>
    HAL_Delay(150);
 8000b04:	2096      	movs	r0, #150	@ 0x96
 8000b06:	f001 fac3 	bl	8002090 <HAL_Delay>
    HAL_GPIO_WritePin(WALL_LED_PORT, WALL_LEFT_LED_PIN | WALL_RIGHT_LED_PIN, off_state);
 8000b0a:	79bb      	ldrb	r3, [r7, #6]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000b12:	4803      	ldr	r0, [pc, #12]	@ (8000b20 <LED_SelfTest+0x38>)
 8000b14:	f001 fd5e 	bl	80025d4 <HAL_GPIO_WritePin>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40020400 	.word	0x40020400

08000b24 <USART1_IRQHandler>:
/**
 * @brief  USART1 Interrupt Handler (redirects to module)
 * @retval None
 */
void USART1_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
    UART_IRQHandler();
 8000b28:	f000 fe3c 	bl	80017a4 <UART_IRQHandler>
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b30:	b5b0      	push	{r4, r5, r7, lr}
 8000b32:	b09a      	sub	sp, #104	@ 0x68
 8000b34:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000b36:	f001 fa69 	bl	800200c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000b3a:	f000 f8a1 	bl	8000c80 <SystemClock_Config>

    /* Initialize all configured peripherals */
    /* USER CODE BEGIN 2 */
    
    /* Initialize GPIO for motors, UART, LEDs, and sensors */
    Motor_GPIO_Init();
 8000b3e:	f000 f96b 	bl	8000e18 <Motor_GPIO_Init>
    UART_GPIO_Init();
 8000b42:	f000 fdad 	bl	80016a0 <UART_GPIO_Init>
    LED_Init();
 8000b46:	f7ff ff19 	bl	800097c <LED_Init>
    
#if ULTRASONIC_ENABLED
    Ultrasonic_GPIO_Init();
 8000b4a:	f000 ffed 	bl	8001b28 <Ultrasonic_GPIO_Init>
#endif
    
    /* Initialize TIM5 for PWM motor control */
    Motor_TIM5_PWM_Init();
 8000b4e:	f000 f993 	bl	8000e78 <Motor_TIM5_PWM_Init>
    
    /* Initialize USART1 for command reception */
    UART_Init();
 8000b52:	f000 fdd5 	bl	8001700 <UART_Init>

#if DEBUG_BOOT_BANNER
    /* Print boot banner */
    UART_SendCRLF();
 8000b56:	f000 ff03 	bl	8001960 <UART_SendCRLF>
    UART_SendString("BOOT: MX1508 Motor Controller v2.2 (STM32F401RC)\r\n");
 8000b5a:	4838      	ldr	r0, [pc, #224]	@ (8000c3c <main+0x10c>)
 8000b5c:	f000 fe8e 	bl	800187c <UART_SendString>
    UART_SendString("Architecture: Modular Design\r\n");
 8000b60:	4837      	ldr	r0, [pc, #220]	@ (8000c40 <main+0x110>)
 8000b62:	f000 fe8b 	bl	800187c <UART_SendString>
    UART_SendString("Clock=HSI 16MHz, UART1=9600 8N1\r\n");
 8000b66:	4837      	ldr	r0, [pc, #220]	@ (8000c44 <main+0x114>)
 8000b68:	f000 fe88 	bl	800187c <UART_SendString>
#if ULTRASONIC_ENABLED
    UART_SendString("Ultrasonic: ENABLED");
 8000b6c:	4836      	ldr	r0, [pc, #216]	@ (8000c48 <main+0x118>)
 8000b6e:	f000 fe85 	bl	800187c <UART_SendString>
#else
    UART_SendString("Ultrasonic: DISABLED");
#endif
    UART_SendString(", Debug=");
 8000b72:	4836      	ldr	r0, [pc, #216]	@ (8000c4c <main+0x11c>)
 8000b74:	f000 fe82 	bl	800187c <UART_SendString>
#if ULTRASONIC_DEBUG
    UART_SendString("ON\r\n");
 8000b78:	4835      	ldr	r0, [pc, #212]	@ (8000c50 <main+0x120>)
 8000b7a:	f000 fe7f 	bl	800187c <UART_SendString>
#else
    UART_SendString("OFF\r\n");
#endif
    UART_SendString("Modules: motor_control, uart_comm, led_indicators, ");
 8000b7e:	4835      	ldr	r0, [pc, #212]	@ (8000c54 <main+0x124>)
 8000b80:	f000 fe7c 	bl	800187c <UART_SendString>
    UART_SendString("ultrasonic, command_processor, wall_avoidance\r\n");
 8000b84:	4834      	ldr	r0, [pc, #208]	@ (8000c58 <main+0x128>)
 8000b86:	f000 fe79 	bl	800187c <UART_SendString>
#endif

#if ULTRASONIC_ENABLED
    /* Initialize Ultrasonic sensors */
    Ultrasonic_Init();
 8000b8a:	f001 f80d 	bl	8001ba8 <Ultrasonic_Init>
#endif
    
    /* Run LED self-test */
    LED_SelfTest();
 8000b8e:	f7ff ffab 	bl	8000ae8 <LED_SelfTest>
    
    /* Initialize safety timer */
    last_command_time = HAL_GetTick();
 8000b92:	f001 fa71 	bl	8002078 <HAL_GetTick>
 8000b96:	4603      	mov	r3, r0
 8000b98:	4a30      	ldr	r2, [pc, #192]	@ (8000c5c <main+0x12c>)
 8000b9a:	6013      	str	r3, [r2, #0]
    
    /* Start with motors stopped */
    Motor_Stop();
 8000b9c:	f000 fc8c 	bl	80014b8 <Motor_Stop>
    /* start timers, add new ones, ... */
    /* USER CODE END RTOS_TIMERS */

    /* USER CODE BEGIN RTOS_QUEUES */
    /* Create UART command queue */
    osMessageQDef(uartCmdQueue, 32, uint16_t);
 8000ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8000c60 <main+0x130>)
 8000ba2:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000ba6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uartCmdQueueHandle = osMessageCreate(osMessageQ(uartCmdQueue), NULL);
 8000bac:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f003 f834 	bl	8003c20 <osMessageCreate>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	4a2a      	ldr	r2, [pc, #168]	@ (8000c64 <main+0x134>)
 8000bbc:	6013      	str	r3, [r2, #0]
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* definition and creation of defaultTask */
    osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8000c68 <main+0x138>)
 8000bc0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000bc4:	461d      	mov	r5, r3
 8000bc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000bd2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 ffc1 	bl	8003b60 <osThreadCreate>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a22      	ldr	r2, [pc, #136]	@ (8000c6c <main+0x13c>)
 8000be2:	6013      	str	r3, [r2, #0]

    /* definition and creation of motorTask */
    osThreadDef(motorTask, StartMotorTask, osPriorityAboveNormal, 0, 256);
 8000be4:	4b22      	ldr	r3, [pc, #136]	@ (8000c70 <main+0x140>)
 8000be6:	f107 0420 	add.w	r4, r7, #32
 8000bea:	461d      	mov	r5, r3
 8000bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bf4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 8000bf8:	f107 0320 	add.w	r3, r7, #32
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f002 ffae 	bl	8003b60 <osThreadCreate>
 8000c04:	4603      	mov	r3, r0
 8000c06:	4a1b      	ldr	r2, [pc, #108]	@ (8000c74 <main+0x144>)
 8000c08:	6013      	str	r3, [r2, #0]

#if ULTRASONIC_ENABLED
    /* definition and creation of ultrasonicTask */
    osThreadDef(ultrasonicTask, WallAvoidance_Task, osPriorityNormal, 0, 256);
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <main+0x148>)
 8000c0c:	1d3c      	adds	r4, r7, #4
 8000c0e:	461d      	mov	r5, r3
 8000c10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ultrasonicTaskHandle = osThreadCreate(osThread(ultrasonicTask), NULL);
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f002 ff9d 	bl	8003b60 <osThreadCreate>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a14      	ldr	r2, [pc, #80]	@ (8000c7c <main+0x14c>)
 8000c2a:	6013      	str	r3, [r2, #0]
    /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    /* USER CODE END RTOS_THREADS */

    /* Start scheduler */
    osKernelStart();
 8000c2c:	f002 ff91 	bl	8003b52 <osKernelStart>
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        /* USER CODE END WHILE */
        /* USER CODE BEGIN 3 */
        osDelay(1000);
 8000c30:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c34:	f002 ffe0 	bl	8003bf8 <osDelay>
 8000c38:	e7fa      	b.n	8000c30 <main+0x100>
 8000c3a:	bf00      	nop
 8000c3c:	080062a0 	.word	0x080062a0
 8000c40:	080062d4 	.word	0x080062d4
 8000c44:	080062f4 	.word	0x080062f4
 8000c48:	08006318 	.word	0x08006318
 8000c4c:	0800632c 	.word	0x0800632c
 8000c50:	08006338 	.word	0x08006338
 8000c54:	08006340 	.word	0x08006340
 8000c58:	08006374 	.word	0x08006374
 8000c5c:	20000080 	.word	0x20000080
 8000c60:	080063a4 	.word	0x080063a4
 8000c64:	200003d0 	.word	0x200003d0
 8000c68:	080063c0 	.word	0x080063c0
 8000c6c:	20000324 	.word	0x20000324
 8000c70:	080063e8 	.word	0x080063e8
 8000c74:	20000328 	.word	0x20000328
 8000c78:	08006414 	.word	0x08006414
 8000c7c:	2000032c 	.word	0x2000032c

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b094      	sub	sp, #80	@ 0x50
 8000c84:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 0320 	add.w	r3, r7, #32
 8000c8a:	2230      	movs	r2, #48	@ 0x30
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f005 fa02 	bl	8006098 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	4b23      	ldr	r3, [pc, #140]	@ (8000d38 <SystemClock_Config+0xb8>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cac:	4a22      	ldr	r2, [pc, #136]	@ (8000d38 <SystemClock_Config+0xb8>)
 8000cae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb4:	4b20      	ldr	r3, [pc, #128]	@ (8000d38 <SystemClock_Config+0xb8>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <SystemClock_Config+0xbc>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d3c <SystemClock_Config+0xbc>)
 8000cce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <SystemClock_Config+0xbc>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure. */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce8:	2310      	movs	r3, #16
 8000cea:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf0:	f107 0320 	add.w	r3, r7, #32
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 fca1 	bl	800263c <HAL_RCC_OscConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0x84>
    {
        Error_Handler();
 8000d00:	f000 f883 	bl	8000e0a <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d04:	230f      	movs	r3, #15
 8000d06:	60fb      	str	r3, [r7, #12]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 ff04 	bl	8002b2c <HAL_RCC_ClockConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0xae>
    {
        Error_Handler();
 8000d2a:	f000 f86e 	bl	8000e0a <Error_Handler>
    }
}
 8000d2e:	bf00      	nop
 8000d30:	3750      	adds	r7, #80	@ 0x50
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40007000 	.word	0x40007000

08000d40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN 5 */
    /* Housekeeping/idle task */
    for(;;)
    {
        /* Blink heartbeat LED */
        LED_Toggle_Heartbeat();
 8000d48:	f7ff fea6 	bl	8000a98 <LED_Toggle_Heartbeat>
        
#if DEBUG_UART_HEARTBEAT
        static uint32_t hb_counter = 0;
        if (!uart_rx_seen) 
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <StartDefaultTask+0x4c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	f083 0301 	eor.w	r3, r3, #1
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d013      	beq.n	8000d84 <StartDefaultTask+0x44>
        {
            if ((hb_counter++ % 4U) == 0U)
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <StartDefaultTask+0x50>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	1c5a      	adds	r2, r3, #1
 8000d62:	490b      	ldr	r1, [pc, #44]	@ (8000d90 <StartDefaultTask+0x50>)
 8000d64:	600a      	str	r2, [r1, #0]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10a      	bne.n	8000d84 <StartDefaultTask+0x44>
            {
                UART_SendString("HB t="); 
 8000d6e:	4809      	ldr	r0, [pc, #36]	@ (8000d94 <StartDefaultTask+0x54>)
 8000d70:	f000 fd84 	bl	800187c <UART_SendString>
                UART_SendUInt(HAL_GetTick()); 
 8000d74:	f001 f980 	bl	8002078 <HAL_GetTick>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fd9e 	bl	80018bc <UART_SendUInt>
                UART_SendCRLF();
 8000d80:	f000 fdee 	bl	8001960 <UART_SendCRLF>
            }
        }
#endif
        osDelay(250);
 8000d84:	20fa      	movs	r0, #250	@ 0xfa
 8000d86:	f002 ff37 	bl	8003bf8 <osDelay>
    {
 8000d8a:	e7dd      	b.n	8000d48 <StartDefaultTask+0x8>
 8000d8c:	200003ce 	.word	0x200003ce
 8000d90:	20000330 	.word	0x20000330
 8000d94:	08006430 	.word	0x08006430

08000d98 <StartMotorTask>:
  * @brief  Function implementing the motorTask thread.
  * @param  argument: Not used
  * @retval None
  */
void StartMotorTask(void const * argument)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
            accel_enabled = prev_accel;
            self_test_done = true;
        }
        
        /* Wait for UART command from queue */
        osEvent evt = osMessageGet(uartCmdQueueHandle, 10);
 8000da0:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <StartMotorTask+0x4c>)
 8000da2:	6819      	ldr	r1, [r3, #0]
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	220a      	movs	r2, #10
 8000daa:	4618      	mov	r0, r3
 8000dac:	f002 ffa0 	bl	8003cf0 <osMessageGet>
        if (evt.status == osEventMessage)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	2b10      	cmp	r3, #16
 8000db4:	d108      	bne.n	8000dc8 <StartMotorTask+0x30>
        {
            uint8_t cmd = (uint8_t)(evt.value.v & 0xFF);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	75fb      	strb	r3, [r7, #23]
            Command_Process(cmd);
 8000dba:	7dfb      	ldrb	r3, [r7, #23]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fba5 	bl	800050c <Command_Process>
            uart_error = false;
 8000dc2:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <StartMotorTask+0x50>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
        }

        /* Periodic safety check */
        Command_SafetyCheck();
 8000dc8:	f7ff fda2 	bl	8000910 <Command_SafetyCheck>

        /* React to UART errors */
        if (uart_error)
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <StartMotorTask+0x50>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0e4      	beq.n	8000da0 <StartMotorTask+0x8>
        {
            Motor_Stop();
 8000dd6:	f000 fb6f 	bl	80014b8 <Motor_Stop>
            uart_error = false;
 8000dda:	4b03      	ldr	r3, [pc, #12]	@ (8000de8 <StartMotorTask+0x50>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
    {
 8000de0:	e7de      	b.n	8000da0 <StartMotorTask+0x8>
 8000de2:	bf00      	nop
 8000de4:	200003d0 	.word	0x200003d0
 8000de8:	200003cd 	.word	0x200003cd

08000dec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM2)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dfc:	d101      	bne.n	8000e02 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 8000dfe:	f001 f927 	bl	8002050 <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0e:	b672      	cpsid	i
}
 8000e10:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    __disable_irq();
    while (1)
 8000e12:	bf00      	nop
 8000e14:	e7fd      	b.n	8000e12 <Error_Handler+0x8>
	...

08000e18 <Motor_GPIO_Init>:
/**
 * @brief  Initialize GPIO pins for motor control
 * @retval None
 */
void Motor_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
    
    /* Enable GPIOA clock */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <Motor_GPIO_Init+0x58>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e34:	4a0e      	ldr	r2, [pc, #56]	@ (8000e70 <Motor_GPIO_Init+0x58>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <Motor_GPIO_Init+0x58>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	683b      	ldr	r3, [r7, #0]
    
    /* Configure Motor Control Pins (PA0-PA3) as TIM5 PWM Output (AF2) */
    GPIO_InitStruct.Pin = MOTOR1_IN1_PIN | MOTOR1_IN2_PIN | MOTOR2_IN3_PIN | MOTOR2_IN4_PIN;
 8000e48:	230f      	movs	r3, #15
 8000e4a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e54:	2302      	movs	r3, #2
 8000e56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(MOTOR_PORT, &GPIO_InitStruct);
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4804      	ldr	r0, [pc, #16]	@ (8000e74 <Motor_GPIO_Init+0x5c>)
 8000e62:	f001 fa1b 	bl	800229c <HAL_GPIO_Init>
}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020000 	.word	0x40020000

08000e78 <Motor_TIM5_PWM_Init>:
/**
 * @brief  Initialize TIM5 for PWM generation on motor control pins
 * @retval None
 */
void Motor_TIM5_PWM_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
 8000e8c:	615a      	str	r2, [r3, #20]
 8000e8e:	619a      	str	r2, [r3, #24]
    
    /* Enable TIM5 clock */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	4b37      	ldr	r3, [pc, #220]	@ (8000f74 <Motor_TIM5_PWM_Init+0xfc>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e98:	4a36      	ldr	r2, [pc, #216]	@ (8000f74 <Motor_TIM5_PWM_Init+0xfc>)
 8000e9a:	f043 0308 	orr.w	r3, r3, #8
 8000e9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea0:	4b34      	ldr	r3, [pc, #208]	@ (8000f74 <Motor_TIM5_PWM_Init+0xfc>)
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea4:	f003 0308 	and.w	r3, r3, #8
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	683b      	ldr	r3, [r7, #0]
    
    /* Configure TIM5 Base */
    htim5.Instance = TIM5;
 8000eac:	4b32      	ldr	r3, [pc, #200]	@ (8000f78 <Motor_TIM5_PWM_Init+0x100>)
 8000eae:	4a33      	ldr	r2, [pc, #204]	@ (8000f7c <Motor_TIM5_PWM_Init+0x104>)
 8000eb0:	601a      	str	r2, [r3, #0]
    htim5.Init.Prescaler = PWM_PRESCALER;
 8000eb2:	4b31      	ldr	r3, [pc, #196]	@ (8000f78 <Motor_TIM5_PWM_Init+0x100>)
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	605a      	str	r2, [r3, #4]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb8:	4b2f      	ldr	r3, [pc, #188]	@ (8000f78 <Motor_TIM5_PWM_Init+0x100>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
    htim5.Init.Period = PWM_PERIOD;
 8000ebe:	4b2e      	ldr	r3, [pc, #184]	@ (8000f78 <Motor_TIM5_PWM_Init+0x100>)
 8000ec0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ec4:	60da      	str	r2, [r3, #12]
    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f78 <Motor_TIM5_PWM_Init+0x100>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
    htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8000f78 <Motor_TIM5_PWM_Init+0x100>)
 8000ece:	2280      	movs	r2, #128	@ 0x80
 8000ed0:	619a      	str	r2, [r3, #24]
    
    if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000ed2:	4829      	ldr	r0, [pc, #164]	@ (8000f78 <Motor_TIM5_PWM_Init+0x100>)
 8000ed4:	f002 f8e4 	bl	80030a0 <HAL_TIM_PWM_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <Motor_TIM5_PWM_Init+0x6a>
    {
        Error_Handler();
 8000ede:	f7ff ff94 	bl	8000e0a <Error_Handler>
    }
    
    /* Configure PWM channels */
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee2:	2360      	movs	r3, #96	@ 0x60
 8000ee4:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
    
    /* Channel 1 - PA0 (Motor1_IN1) */
    if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	481f      	ldr	r0, [pc, #124]	@ (8000f78 <Motor_TIM5_PWM_Init+0x100>)
 8000efa:	f002 facb 	bl	8003494 <HAL_TIM_PWM_ConfigChannel>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <Motor_TIM5_PWM_Init+0x90>
    {
        Error_Handler();
 8000f04:	f7ff ff81 	bl	8000e0a <Error_Handler>
    }
    
    /* Channel 2 - PA1 (Motor1_IN2) */
    if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	481a      	ldr	r0, [pc, #104]	@ (8000f78 <Motor_TIM5_PWM_Init+0x100>)
 8000f10:	f002 fac0 	bl	8003494 <HAL_TIM_PWM_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <Motor_TIM5_PWM_Init+0xa6>
    {
        Error_Handler();
 8000f1a:	f7ff ff76 	bl	8000e0a <Error_Handler>
    }
    
    /* Channel 3 - PA2 (Motor2_IN3) */
    if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2208      	movs	r2, #8
 8000f22:	4619      	mov	r1, r3
 8000f24:	4814      	ldr	r0, [pc, #80]	@ (8000f78 <Motor_TIM5_PWM_Init+0x100>)
 8000f26:	f002 fab5 	bl	8003494 <HAL_TIM_PWM_ConfigChannel>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <Motor_TIM5_PWM_Init+0xbc>
    {
        Error_Handler();
 8000f30:	f7ff ff6b 	bl	8000e0a <Error_Handler>
    }
    
    /* Channel 4 - PA3 (Motor2_IN4) */
    if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	220c      	movs	r2, #12
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480f      	ldr	r0, [pc, #60]	@ (8000f78 <Motor_TIM5_PWM_Init+0x100>)
 8000f3c:	f002 faaa 	bl	8003494 <HAL_TIM_PWM_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <Motor_TIM5_PWM_Init+0xd2>
    {
        Error_Handler();
 8000f46:	f7ff ff60 	bl	8000e0a <Error_Handler>
    }
    
    /* Start PWM on all channels */
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	480a      	ldr	r0, [pc, #40]	@ (8000f78 <Motor_TIM5_PWM_Init+0x100>)
 8000f4e:	f002 f901 	bl	8003154 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000f52:	2104      	movs	r1, #4
 8000f54:	4808      	ldr	r0, [pc, #32]	@ (8000f78 <Motor_TIM5_PWM_Init+0x100>)
 8000f56:	f002 f8fd 	bl	8003154 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8000f5a:	2108      	movs	r1, #8
 8000f5c:	4806      	ldr	r0, [pc, #24]	@ (8000f78 <Motor_TIM5_PWM_Init+0x100>)
 8000f5e:	f002 f8f9 	bl	8003154 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8000f62:	210c      	movs	r1, #12
 8000f64:	4804      	ldr	r0, [pc, #16]	@ (8000f78 <Motor_TIM5_PWM_Init+0x100>)
 8000f66:	f002 f8f5 	bl	8003154 <HAL_TIM_PWM_Start>
}
 8000f6a:	bf00      	nop
 8000f6c:	3720      	adds	r7, #32
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800
 8000f78:	20000334 	.word	0x20000334
 8000f7c:	40000c00 	.word	0x40000c00

08000f80 <Motor_SetSpeed>:
 * @param  motor2_in3: PWM duty cycle for Motor 2 Forward (0-100%)
 * @param  motor2_in4: PWM duty cycle for Motor 2 Reverse (0-100%)
 * @retval None
 */
void Motor_SetSpeed(uint8_t motor1_in1, uint8_t motor1_in2, uint8_t motor2_in3, uint8_t motor2_in4)
{
 8000f80:	b490      	push	{r4, r7}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4604      	mov	r4, r0
 8000f88:	4608      	mov	r0, r1
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4623      	mov	r3, r4
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	4603      	mov	r3, r0
 8000f94:	71bb      	strb	r3, [r7, #6]
 8000f96:	460b      	mov	r3, r1
 8000f98:	717b      	strb	r3, [r7, #5]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	713b      	strb	r3, [r7, #4]
    // Convert percentage (0-100) to PWM value (0-PWM_PERIOD)
    uint32_t pwm1_in1 = (motor1_in1 * PWM_PERIOD) / 100;
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	4a25      	ldr	r2, [pc, #148]	@ (8001040 <Motor_SetSpeed+0xc0>)
 8000faa:	fb82 1203 	smull	r1, r2, r2, r3
 8000fae:	1152      	asrs	r2, r2, #5
 8000fb0:	17db      	asrs	r3, r3, #31
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	617b      	str	r3, [r7, #20]
    uint32_t pwm1_in2 = (motor1_in2 * PWM_PERIOD) / 100;
 8000fb6:	79bb      	ldrb	r3, [r7, #6]
 8000fb8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fbc:	fb02 f303 	mul.w	r3, r2, r3
 8000fc0:	4a1f      	ldr	r2, [pc, #124]	@ (8001040 <Motor_SetSpeed+0xc0>)
 8000fc2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc6:	1152      	asrs	r2, r2, #5
 8000fc8:	17db      	asrs	r3, r3, #31
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	613b      	str	r3, [r7, #16]
    uint32_t pwm2_in3 = (motor2_in3 * PWM_PERIOD) / 100;
 8000fce:	797b      	ldrb	r3, [r7, #5]
 8000fd0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fd4:	fb02 f303 	mul.w	r3, r2, r3
 8000fd8:	4a19      	ldr	r2, [pc, #100]	@ (8001040 <Motor_SetSpeed+0xc0>)
 8000fda:	fb82 1203 	smull	r1, r2, r2, r3
 8000fde:	1152      	asrs	r2, r2, #5
 8000fe0:	17db      	asrs	r3, r3, #31
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	60fb      	str	r3, [r7, #12]
    uint32_t pwm2_in4 = (motor2_in4 * PWM_PERIOD) / 100;
 8000fe6:	793b      	ldrb	r3, [r7, #4]
 8000fe8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fec:	fb02 f303 	mul.w	r3, r2, r3
 8000ff0:	4a13      	ldr	r2, [pc, #76]	@ (8001040 <Motor_SetSpeed+0xc0>)
 8000ff2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff6:	1152      	asrs	r2, r2, #5
 8000ff8:	17db      	asrs	r3, r3, #31
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	60bb      	str	r3, [r7, #8]
    
    // Set PWM duty cycles
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, pwm1_in1);
 8000ffe:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <Motor_SetSpeed+0xc4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, pwm1_in2);
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <Motor_SetSpeed+0xc4>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, pwm2_in3);
 800100e:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <Motor_SetSpeed+0xc4>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, pwm2_in4);
 8001016:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <Motor_SetSpeed+0xc4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    // Update current values
    current_m1_in1 = motor1_in1;
 800101e:	4a0a      	ldr	r2, [pc, #40]	@ (8001048 <Motor_SetSpeed+0xc8>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	7013      	strb	r3, [r2, #0]
    current_m1_in2 = motor1_in2;
 8001024:	4a09      	ldr	r2, [pc, #36]	@ (800104c <Motor_SetSpeed+0xcc>)
 8001026:	79bb      	ldrb	r3, [r7, #6]
 8001028:	7013      	strb	r3, [r2, #0]
    current_m2_in3 = motor2_in3;
 800102a:	4a09      	ldr	r2, [pc, #36]	@ (8001050 <Motor_SetSpeed+0xd0>)
 800102c:	797b      	ldrb	r3, [r7, #5]
 800102e:	7013      	strb	r3, [r2, #0]
    current_m2_in4 = motor2_in4;
 8001030:	4a08      	ldr	r2, [pc, #32]	@ (8001054 <Motor_SetSpeed+0xd4>)
 8001032:	793b      	ldrb	r3, [r7, #4]
 8001034:	7013      	strb	r3, [r2, #0]
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bc90      	pop	{r4, r7}
 800103e:	4770      	bx	lr
 8001040:	51eb851f 	.word	0x51eb851f
 8001044:	20000334 	.word	0x20000334
 8001048:	2000037c 	.word	0x2000037c
 800104c:	2000037d 	.word	0x2000037d
 8001050:	2000037e 	.word	0x2000037e
 8001054:	2000037f 	.word	0x2000037f

08001058 <Motor_SetSpeed_Smooth>:
 * @param  target_m2_in3: Target PWM duty cycle for Motor 2 Forward (0-100%)
 * @param  target_m2_in4: Target PWM duty cycle for Motor 2 Reverse (0-100%)
 * @retval None
 */
void Motor_SetSpeed_Smooth(uint8_t target_m1_in1, uint8_t target_m1_in2, uint8_t target_m2_in3, uint8_t target_m2_in4)
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	4604      	mov	r4, r0
 8001060:	4608      	mov	r0, r1
 8001062:	4611      	mov	r1, r2
 8001064:	461a      	mov	r2, r3
 8001066:	4623      	mov	r3, r4
 8001068:	71fb      	strb	r3, [r7, #7]
 800106a:	4603      	mov	r3, r0
 800106c:	71bb      	strb	r3, [r7, #6]
 800106e:	460b      	mov	r3, r1
 8001070:	717b      	strb	r3, [r7, #5]
 8001072:	4613      	mov	r3, r2
 8001074:	713b      	strb	r3, [r7, #4]
    // Check if motors are currently stopped and target is low speed
    bool currently_stopped = (current_m1_in1 == 0 && current_m1_in2 == 0 && 
 8001076:	4b95      	ldr	r3, [pc, #596]	@ (80012cc <Motor_SetSpeed_Smooth+0x274>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
                             current_m2_in3 == 0 && current_m2_in4 == 0);
 800107c:	2b00      	cmp	r3, #0
 800107e:	d110      	bne.n	80010a2 <Motor_SetSpeed_Smooth+0x4a>
    bool currently_stopped = (current_m1_in1 == 0 && current_m1_in2 == 0 && 
 8001080:	4b93      	ldr	r3, [pc, #588]	@ (80012d0 <Motor_SetSpeed_Smooth+0x278>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10b      	bne.n	80010a2 <Motor_SetSpeed_Smooth+0x4a>
                             current_m2_in3 == 0 && current_m2_in4 == 0);
 800108a:	4b92      	ldr	r3, [pc, #584]	@ (80012d4 <Motor_SetSpeed_Smooth+0x27c>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	b2db      	uxtb	r3, r3
    bool currently_stopped = (current_m1_in1 == 0 && current_m1_in2 == 0 && 
 8001090:	2b00      	cmp	r3, #0
 8001092:	d106      	bne.n	80010a2 <Motor_SetSpeed_Smooth+0x4a>
                             current_m2_in3 == 0 && current_m2_in4 == 0);
 8001094:	4b90      	ldr	r3, [pc, #576]	@ (80012d8 <Motor_SetSpeed_Smooth+0x280>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <Motor_SetSpeed_Smooth+0x4a>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <Motor_SetSpeed_Smooth+0x4c>
 80010a2:	2300      	movs	r3, #0
    bool currently_stopped = (current_m1_in1 == 0 && current_m1_in2 == 0 && 
 80010a4:	75fb      	strb	r3, [r7, #23]
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	75fb      	strb	r3, [r7, #23]
    uint8_t target_total = target_m1_in1 + target_m1_in2 + target_m2_in3 + target_m2_in4;
 80010ae:	79fa      	ldrb	r2, [r7, #7]
 80010b0:	79bb      	ldrb	r3, [r7, #6]
 80010b2:	4413      	add	r3, r2
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	797b      	ldrb	r3, [r7, #5]
 80010b8:	4413      	add	r3, r2
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	793b      	ldrb	r3, [r7, #4]
 80010be:	4413      	add	r3, r2
 80010c0:	75bb      	strb	r3, [r7, #22]
    bool needs_kickstart = (currently_stopped && target_total > 0 && target_total <= (SPEED_SLOW * 2) && KICKSTART_ENABLED);
 80010c2:	7dfb      	ldrb	r3, [r7, #23]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d007      	beq.n	80010d8 <Motor_SetSpeed_Smooth+0x80>
 80010c8:	7dbb      	ldrb	r3, [r7, #22]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d004      	beq.n	80010d8 <Motor_SetSpeed_Smooth+0x80>
 80010ce:	7dbb      	ldrb	r3, [r7, #22]
 80010d0:	2b50      	cmp	r3, #80	@ 0x50
 80010d2:	d801      	bhi.n	80010d8 <Motor_SetSpeed_Smooth+0x80>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <Motor_SetSpeed_Smooth+0x82>
 80010d8:	2300      	movs	r3, #0
 80010da:	757b      	strb	r3, [r7, #21]
 80010dc:	7d7b      	ldrb	r3, [r7, #21]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	757b      	strb	r3, [r7, #21]
    
    // Apply kick-start pulse
    if (needs_kickstart)
 80010e4:	7d7b      	ldrb	r3, [r7, #21]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d024      	beq.n	8001134 <Motor_SetSpeed_Smooth+0xdc>
    {
        uint8_t kick_m1_in1 = (target_m1_in1 > 0) ? KICKSTART_DUTY : 0;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <Motor_SetSpeed_Smooth+0x9c>
 80010f0:	2350      	movs	r3, #80	@ 0x50
 80010f2:	e000      	b.n	80010f6 <Motor_SetSpeed_Smooth+0x9e>
 80010f4:	2300      	movs	r3, #0
 80010f6:	753b      	strb	r3, [r7, #20]
        uint8_t kick_m1_in2 = (target_m1_in2 > 0) ? KICKSTART_DUTY : 0;
 80010f8:	79bb      	ldrb	r3, [r7, #6]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <Motor_SetSpeed_Smooth+0xaa>
 80010fe:	2350      	movs	r3, #80	@ 0x50
 8001100:	e000      	b.n	8001104 <Motor_SetSpeed_Smooth+0xac>
 8001102:	2300      	movs	r3, #0
 8001104:	74fb      	strb	r3, [r7, #19]
        uint8_t kick_m2_in3 = (target_m2_in3 > 0) ? KICKSTART_DUTY : 0;
 8001106:	797b      	ldrb	r3, [r7, #5]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <Motor_SetSpeed_Smooth+0xb8>
 800110c:	2350      	movs	r3, #80	@ 0x50
 800110e:	e000      	b.n	8001112 <Motor_SetSpeed_Smooth+0xba>
 8001110:	2300      	movs	r3, #0
 8001112:	74bb      	strb	r3, [r7, #18]
        uint8_t kick_m2_in4 = (target_m2_in4 > 0) ? KICKSTART_DUTY : 0;
 8001114:	793b      	ldrb	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <Motor_SetSpeed_Smooth+0xc6>
 800111a:	2350      	movs	r3, #80	@ 0x50
 800111c:	e000      	b.n	8001120 <Motor_SetSpeed_Smooth+0xc8>
 800111e:	2300      	movs	r3, #0
 8001120:	747b      	strb	r3, [r7, #17]
        
        Motor_SetSpeed(kick_m1_in1, kick_m1_in2, kick_m2_in3, kick_m2_in4);
 8001122:	7c7b      	ldrb	r3, [r7, #17]
 8001124:	7cba      	ldrb	r2, [r7, #18]
 8001126:	7cf9      	ldrb	r1, [r7, #19]
 8001128:	7d38      	ldrb	r0, [r7, #20]
 800112a:	f7ff ff29 	bl	8000f80 <Motor_SetSpeed>
        osDelay(KICKSTART_DURATION);
 800112e:	2096      	movs	r0, #150	@ 0x96
 8001130:	f002 fd62 	bl	8003bf8 <osDelay>
    }
    
    // If acceleration is disabled, set speed instantly
    if (!accel_enabled)
 8001134:	4b69      	ldr	r3, [pc, #420]	@ (80012dc <Motor_SetSpeed_Smooth+0x284>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	f083 0301 	eor.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00e      	beq.n	8001162 <Motor_SetSpeed_Smooth+0x10a>
    {
        Motor_SetSpeed(target_m1_in1, target_m1_in2, target_m2_in3, target_m2_in4);
 8001144:	793b      	ldrb	r3, [r7, #4]
 8001146:	797a      	ldrb	r2, [r7, #5]
 8001148:	79b9      	ldrb	r1, [r7, #6]
 800114a:	79f8      	ldrb	r0, [r7, #7]
 800114c:	f7ff ff18 	bl	8000f80 <Motor_SetSpeed>
        motors_moving = (target_total > 0);
 8001150:	7dbb      	ldrb	r3, [r7, #22]
 8001152:	2b00      	cmp	r3, #0
 8001154:	bf14      	ite	ne
 8001156:	2301      	movne	r3, #1
 8001158:	2300      	moveq	r3, #0
 800115a:	b2da      	uxtb	r2, r3
 800115c:	4b60      	ldr	r3, [pc, #384]	@ (80012e0 <Motor_SetSpeed_Smooth+0x288>)
 800115e:	701a      	strb	r2, [r3, #0]
        return;
 8001160:	e14e      	b.n	8001400 <Motor_SetSpeed_Smooth+0x3a8>
    }
    
    // Determine if accelerating or decelerating
    uint8_t current_total = current_m1_in1 + current_m1_in2 + current_m2_in3 + current_m2_in4;
 8001162:	4b5a      	ldr	r3, [pc, #360]	@ (80012cc <Motor_SetSpeed_Smooth+0x274>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b59      	ldr	r3, [pc, #356]	@ (80012d0 <Motor_SetSpeed_Smooth+0x278>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	4413      	add	r3, r2
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b58      	ldr	r3, [pc, #352]	@ (80012d4 <Motor_SetSpeed_Smooth+0x27c>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4413      	add	r3, r2
 800117a:	b2da      	uxtb	r2, r3
 800117c:	4b56      	ldr	r3, [pc, #344]	@ (80012d8 <Motor_SetSpeed_Smooth+0x280>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	4413      	add	r3, r2
 8001184:	743b      	strb	r3, [r7, #16]
    bool is_accelerating = (target_total > current_total);
 8001186:	7dba      	ldrb	r2, [r7, #22]
 8001188:	7c3b      	ldrb	r3, [r7, #16]
 800118a:	429a      	cmp	r2, r3
 800118c:	bf8c      	ite	hi
 800118e:	2301      	movhi	r3, #1
 8001190:	2300      	movls	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]
    uint8_t step = is_accelerating ? ACCEL_STEP : DECEL_STEP;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <Motor_SetSpeed_Smooth+0x146>
 800119a:	2305      	movs	r3, #5
 800119c:	e000      	b.n	80011a0 <Motor_SetSpeed_Smooth+0x148>
 800119e:	230a      	movs	r3, #10
 80011a0:	73bb      	strb	r3, [r7, #14]
    uint16_t delay_ms = is_accelerating ? ACCEL_DELAY_MS : DECEL_DELAY_MS;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <Motor_SetSpeed_Smooth+0x154>
 80011a8:	2314      	movs	r3, #20
 80011aa:	e000      	b.n	80011ae <Motor_SetSpeed_Smooth+0x156>
 80011ac:	230f      	movs	r3, #15
 80011ae:	81bb      	strh	r3, [r7, #12]
    
    // Ramp up/down gradually
    while (current_m1_in1 != target_m1_in1 || current_m1_in2 != target_m1_in2 ||
 80011b0:	e102      	b.n	80013b8 <Motor_SetSpeed_Smooth+0x360>
           current_m2_in3 != target_m2_in3 || current_m2_in4 != target_m2_in4)
    {
        // Ramp motor 1 IN1
        if (current_m1_in1 < target_m1_in1)
 80011b2:	4b46      	ldr	r3, [pc, #280]	@ (80012cc <Motor_SetSpeed_Smooth+0x274>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	79fa      	ldrb	r2, [r7, #7]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d913      	bls.n	80011e6 <Motor_SetSpeed_Smooth+0x18e>
            current_m1_in1 = (current_m1_in1 + step > target_m1_in1) ? target_m1_in1 : current_m1_in1 + step;
 80011be:	4b43      	ldr	r3, [pc, #268]	@ (80012cc <Motor_SetSpeed_Smooth+0x274>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	461a      	mov	r2, r3
 80011c6:	7bbb      	ldrb	r3, [r7, #14]
 80011c8:	441a      	add	r2, r3
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dc06      	bgt.n	80011de <Motor_SetSpeed_Smooth+0x186>
 80011d0:	4b3e      	ldr	r3, [pc, #248]	@ (80012cc <Motor_SetSpeed_Smooth+0x274>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	7bbb      	ldrb	r3, [r7, #14]
 80011d8:	4413      	add	r3, r2
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	e000      	b.n	80011e0 <Motor_SetSpeed_Smooth+0x188>
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4a3a      	ldr	r2, [pc, #232]	@ (80012cc <Motor_SetSpeed_Smooth+0x274>)
 80011e2:	7013      	strb	r3, [r2, #0]
 80011e4:	e01e      	b.n	8001224 <Motor_SetSpeed_Smooth+0x1cc>
        else if (current_m1_in1 > target_m1_in1)
 80011e6:	4b39      	ldr	r3, [pc, #228]	@ (80012cc <Motor_SetSpeed_Smooth+0x274>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	79fa      	ldrb	r2, [r7, #7]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d218      	bcs.n	8001224 <Motor_SetSpeed_Smooth+0x1cc>
            current_m1_in1 = (current_m1_in1 < step || current_m1_in1 - step < target_m1_in1) ? target_m1_in1 : current_m1_in1 - step;
 80011f2:	4b36      	ldr	r3, [pc, #216]	@ (80012cc <Motor_SetSpeed_Smooth+0x274>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	7bba      	ldrb	r2, [r7, #14]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d80f      	bhi.n	800121e <Motor_SetSpeed_Smooth+0x1c6>
 80011fe:	4b33      	ldr	r3, [pc, #204]	@ (80012cc <Motor_SetSpeed_Smooth+0x274>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	461a      	mov	r2, r3
 8001206:	7bbb      	ldrb	r3, [r7, #14]
 8001208:	1ad2      	subs	r2, r2, r3
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	429a      	cmp	r2, r3
 800120e:	db06      	blt.n	800121e <Motor_SetSpeed_Smooth+0x1c6>
 8001210:	4b2e      	ldr	r3, [pc, #184]	@ (80012cc <Motor_SetSpeed_Smooth+0x274>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	7bbb      	ldrb	r3, [r7, #14]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	b2db      	uxtb	r3, r3
 800121c:	e000      	b.n	8001220 <Motor_SetSpeed_Smooth+0x1c8>
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	4a2a      	ldr	r2, [pc, #168]	@ (80012cc <Motor_SetSpeed_Smooth+0x274>)
 8001222:	7013      	strb	r3, [r2, #0]
        
        // Ramp motor 1 IN2
        if (current_m1_in2 < target_m1_in2)
 8001224:	4b2a      	ldr	r3, [pc, #168]	@ (80012d0 <Motor_SetSpeed_Smooth+0x278>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	79ba      	ldrb	r2, [r7, #6]
 800122c:	429a      	cmp	r2, r3
 800122e:	d913      	bls.n	8001258 <Motor_SetSpeed_Smooth+0x200>
            current_m1_in2 = (current_m1_in2 + step > target_m1_in2) ? target_m1_in2 : current_m1_in2 + step;
 8001230:	4b27      	ldr	r3, [pc, #156]	@ (80012d0 <Motor_SetSpeed_Smooth+0x278>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	461a      	mov	r2, r3
 8001238:	7bbb      	ldrb	r3, [r7, #14]
 800123a:	441a      	add	r2, r3
 800123c:	79bb      	ldrb	r3, [r7, #6]
 800123e:	429a      	cmp	r2, r3
 8001240:	dc06      	bgt.n	8001250 <Motor_SetSpeed_Smooth+0x1f8>
 8001242:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <Motor_SetSpeed_Smooth+0x278>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	7bbb      	ldrb	r3, [r7, #14]
 800124a:	4413      	add	r3, r2
 800124c:	b2db      	uxtb	r3, r3
 800124e:	e000      	b.n	8001252 <Motor_SetSpeed_Smooth+0x1fa>
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	4a1f      	ldr	r2, [pc, #124]	@ (80012d0 <Motor_SetSpeed_Smooth+0x278>)
 8001254:	7013      	strb	r3, [r2, #0]
 8001256:	e01e      	b.n	8001296 <Motor_SetSpeed_Smooth+0x23e>
        else if (current_m1_in2 > target_m1_in2)
 8001258:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <Motor_SetSpeed_Smooth+0x278>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	79ba      	ldrb	r2, [r7, #6]
 8001260:	429a      	cmp	r2, r3
 8001262:	d218      	bcs.n	8001296 <Motor_SetSpeed_Smooth+0x23e>
            current_m1_in2 = (current_m1_in2 < step || current_m1_in2 - step < target_m1_in2) ? target_m1_in2 : current_m1_in2 - step;
 8001264:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <Motor_SetSpeed_Smooth+0x278>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	7bba      	ldrb	r2, [r7, #14]
 800126c:	429a      	cmp	r2, r3
 800126e:	d80f      	bhi.n	8001290 <Motor_SetSpeed_Smooth+0x238>
 8001270:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <Motor_SetSpeed_Smooth+0x278>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	7bbb      	ldrb	r3, [r7, #14]
 800127a:	1ad2      	subs	r2, r2, r3
 800127c:	79bb      	ldrb	r3, [r7, #6]
 800127e:	429a      	cmp	r2, r3
 8001280:	db06      	blt.n	8001290 <Motor_SetSpeed_Smooth+0x238>
 8001282:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <Motor_SetSpeed_Smooth+0x278>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b2da      	uxtb	r2, r3
 8001288:	7bbb      	ldrb	r3, [r7, #14]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	e000      	b.n	8001292 <Motor_SetSpeed_Smooth+0x23a>
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	4a0f      	ldr	r2, [pc, #60]	@ (80012d0 <Motor_SetSpeed_Smooth+0x278>)
 8001294:	7013      	strb	r3, [r2, #0]
        
        // Ramp motor 2 IN3
        if (current_m2_in3 < target_m2_in3)
 8001296:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <Motor_SetSpeed_Smooth+0x27c>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	797a      	ldrb	r2, [r7, #5]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d920      	bls.n	80012e4 <Motor_SetSpeed_Smooth+0x28c>
            current_m2_in3 = (current_m2_in3 + step > target_m2_in3) ? target_m2_in3 : current_m2_in3 + step;
 80012a2:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <Motor_SetSpeed_Smooth+0x27c>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	461a      	mov	r2, r3
 80012aa:	7bbb      	ldrb	r3, [r7, #14]
 80012ac:	441a      	add	r2, r3
 80012ae:	797b      	ldrb	r3, [r7, #5]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	dc06      	bgt.n	80012c2 <Motor_SetSpeed_Smooth+0x26a>
 80012b4:	4b07      	ldr	r3, [pc, #28]	@ (80012d4 <Motor_SetSpeed_Smooth+0x27c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	7bbb      	ldrb	r3, [r7, #14]
 80012bc:	4413      	add	r3, r2
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	e000      	b.n	80012c4 <Motor_SetSpeed_Smooth+0x26c>
 80012c2:	797b      	ldrb	r3, [r7, #5]
 80012c4:	4a03      	ldr	r2, [pc, #12]	@ (80012d4 <Motor_SetSpeed_Smooth+0x27c>)
 80012c6:	7013      	strb	r3, [r2, #0]
 80012c8:	e02b      	b.n	8001322 <Motor_SetSpeed_Smooth+0x2ca>
 80012ca:	bf00      	nop
 80012cc:	2000037c 	.word	0x2000037c
 80012d0:	2000037d 	.word	0x2000037d
 80012d4:	2000037e 	.word	0x2000037e
 80012d8:	2000037f 	.word	0x2000037f
 80012dc:	20000001 	.word	0x20000001
 80012e0:	20000380 	.word	0x20000380
        else if (current_m2_in3 > target_m2_in3)
 80012e4:	4b48      	ldr	r3, [pc, #288]	@ (8001408 <Motor_SetSpeed_Smooth+0x3b0>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	797a      	ldrb	r2, [r7, #5]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d218      	bcs.n	8001322 <Motor_SetSpeed_Smooth+0x2ca>
            current_m2_in3 = (current_m2_in3 < step || current_m2_in3 - step < target_m2_in3) ? target_m2_in3 : current_m2_in3 - step;
 80012f0:	4b45      	ldr	r3, [pc, #276]	@ (8001408 <Motor_SetSpeed_Smooth+0x3b0>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	7bba      	ldrb	r2, [r7, #14]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d80f      	bhi.n	800131c <Motor_SetSpeed_Smooth+0x2c4>
 80012fc:	4b42      	ldr	r3, [pc, #264]	@ (8001408 <Motor_SetSpeed_Smooth+0x3b0>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	461a      	mov	r2, r3
 8001304:	7bbb      	ldrb	r3, [r7, #14]
 8001306:	1ad2      	subs	r2, r2, r3
 8001308:	797b      	ldrb	r3, [r7, #5]
 800130a:	429a      	cmp	r2, r3
 800130c:	db06      	blt.n	800131c <Motor_SetSpeed_Smooth+0x2c4>
 800130e:	4b3e      	ldr	r3, [pc, #248]	@ (8001408 <Motor_SetSpeed_Smooth+0x3b0>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	7bbb      	ldrb	r3, [r7, #14]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	e000      	b.n	800131e <Motor_SetSpeed_Smooth+0x2c6>
 800131c:	797b      	ldrb	r3, [r7, #5]
 800131e:	4a3a      	ldr	r2, [pc, #232]	@ (8001408 <Motor_SetSpeed_Smooth+0x3b0>)
 8001320:	7013      	strb	r3, [r2, #0]
        
        // Ramp motor 2 IN4
        if (current_m2_in4 < target_m2_in4)
 8001322:	4b3a      	ldr	r3, [pc, #232]	@ (800140c <Motor_SetSpeed_Smooth+0x3b4>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	793a      	ldrb	r2, [r7, #4]
 800132a:	429a      	cmp	r2, r3
 800132c:	d913      	bls.n	8001356 <Motor_SetSpeed_Smooth+0x2fe>
            current_m2_in4 = (current_m2_in4 + step > target_m2_in4) ? target_m2_in4 : current_m2_in4 + step;
 800132e:	4b37      	ldr	r3, [pc, #220]	@ (800140c <Motor_SetSpeed_Smooth+0x3b4>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	461a      	mov	r2, r3
 8001336:	7bbb      	ldrb	r3, [r7, #14]
 8001338:	441a      	add	r2, r3
 800133a:	793b      	ldrb	r3, [r7, #4]
 800133c:	429a      	cmp	r2, r3
 800133e:	dc06      	bgt.n	800134e <Motor_SetSpeed_Smooth+0x2f6>
 8001340:	4b32      	ldr	r3, [pc, #200]	@ (800140c <Motor_SetSpeed_Smooth+0x3b4>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	7bbb      	ldrb	r3, [r7, #14]
 8001348:	4413      	add	r3, r2
 800134a:	b2db      	uxtb	r3, r3
 800134c:	e000      	b.n	8001350 <Motor_SetSpeed_Smooth+0x2f8>
 800134e:	793b      	ldrb	r3, [r7, #4]
 8001350:	4a2e      	ldr	r2, [pc, #184]	@ (800140c <Motor_SetSpeed_Smooth+0x3b4>)
 8001352:	7013      	strb	r3, [r2, #0]
 8001354:	e01e      	b.n	8001394 <Motor_SetSpeed_Smooth+0x33c>
        else if (current_m2_in4 > target_m2_in4)
 8001356:	4b2d      	ldr	r3, [pc, #180]	@ (800140c <Motor_SetSpeed_Smooth+0x3b4>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	793a      	ldrb	r2, [r7, #4]
 800135e:	429a      	cmp	r2, r3
 8001360:	d218      	bcs.n	8001394 <Motor_SetSpeed_Smooth+0x33c>
            current_m2_in4 = (current_m2_in4 < step || current_m2_in4 - step < target_m2_in4) ? target_m2_in4 : current_m2_in4 - step;
 8001362:	4b2a      	ldr	r3, [pc, #168]	@ (800140c <Motor_SetSpeed_Smooth+0x3b4>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	b2db      	uxtb	r3, r3
 8001368:	7bba      	ldrb	r2, [r7, #14]
 800136a:	429a      	cmp	r2, r3
 800136c:	d80f      	bhi.n	800138e <Motor_SetSpeed_Smooth+0x336>
 800136e:	4b27      	ldr	r3, [pc, #156]	@ (800140c <Motor_SetSpeed_Smooth+0x3b4>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	461a      	mov	r2, r3
 8001376:	7bbb      	ldrb	r3, [r7, #14]
 8001378:	1ad2      	subs	r2, r2, r3
 800137a:	793b      	ldrb	r3, [r7, #4]
 800137c:	429a      	cmp	r2, r3
 800137e:	db06      	blt.n	800138e <Motor_SetSpeed_Smooth+0x336>
 8001380:	4b22      	ldr	r3, [pc, #136]	@ (800140c <Motor_SetSpeed_Smooth+0x3b4>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	7bbb      	ldrb	r3, [r7, #14]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	e000      	b.n	8001390 <Motor_SetSpeed_Smooth+0x338>
 800138e:	793b      	ldrb	r3, [r7, #4]
 8001390:	4a1e      	ldr	r2, [pc, #120]	@ (800140c <Motor_SetSpeed_Smooth+0x3b4>)
 8001392:	7013      	strb	r3, [r2, #0]
        
        // Apply current values
        Motor_SetSpeed(current_m1_in1, current_m1_in2, current_m2_in3, current_m2_in4);
 8001394:	4b1e      	ldr	r3, [pc, #120]	@ (8001410 <Motor_SetSpeed_Smooth+0x3b8>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	b2d8      	uxtb	r0, r3
 800139a:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <Motor_SetSpeed_Smooth+0x3bc>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	b2d9      	uxtb	r1, r3
 80013a0:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <Motor_SetSpeed_Smooth+0x3b0>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b19      	ldr	r3, [pc, #100]	@ (800140c <Motor_SetSpeed_Smooth+0x3b4>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	f7ff fde8 	bl	8000f80 <Motor_SetSpeed>
        
        // Delay for smooth ramping
        osDelay(delay_ms);
 80013b0:	89bb      	ldrh	r3, [r7, #12]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f002 fc20 	bl	8003bf8 <osDelay>
    while (current_m1_in1 != target_m1_in1 || current_m1_in2 != target_m1_in2 ||
 80013b8:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <Motor_SetSpeed_Smooth+0x3b8>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b2db      	uxtb	r3, r3
           current_m2_in3 != target_m2_in3 || current_m2_in4 != target_m2_in4)
 80013be:	79fa      	ldrb	r2, [r7, #7]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	f47f aef6 	bne.w	80011b2 <Motor_SetSpeed_Smooth+0x15a>
    while (current_m1_in1 != target_m1_in1 || current_m1_in2 != target_m1_in2 ||
 80013c6:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <Motor_SetSpeed_Smooth+0x3bc>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	79ba      	ldrb	r2, [r7, #6]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	f47f aeef 	bne.w	80011b2 <Motor_SetSpeed_Smooth+0x15a>
           current_m2_in3 != target_m2_in3 || current_m2_in4 != target_m2_in4)
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <Motor_SetSpeed_Smooth+0x3b0>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b2db      	uxtb	r3, r3
    while (current_m1_in1 != target_m1_in1 || current_m1_in2 != target_m1_in2 ||
 80013da:	797a      	ldrb	r2, [r7, #5]
 80013dc:	429a      	cmp	r2, r3
 80013de:	f47f aee8 	bne.w	80011b2 <Motor_SetSpeed_Smooth+0x15a>
           current_m2_in3 != target_m2_in3 || current_m2_in4 != target_m2_in4)
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <Motor_SetSpeed_Smooth+0x3b4>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	793a      	ldrb	r2, [r7, #4]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	f47f aee1 	bne.w	80011b2 <Motor_SetSpeed_Smooth+0x15a>
    }
    
    // Update moving state
    motors_moving = (target_total > 0);
 80013f0:	7dbb      	ldrb	r3, [r7, #22]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	bf14      	ite	ne
 80013f6:	2301      	movne	r3, #1
 80013f8:	2300      	moveq	r3, #0
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <Motor_SetSpeed_Smooth+0x3c0>)
 80013fe:	701a      	strb	r2, [r3, #0]
}
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd90      	pop	{r4, r7, pc}
 8001406:	bf00      	nop
 8001408:	2000037e 	.word	0x2000037e
 800140c:	2000037f 	.word	0x2000037f
 8001410:	2000037c 	.word	0x2000037c
 8001414:	2000037d 	.word	0x2000037d
 8001418:	20000380 	.word	0x20000380

0800141c <Motor_Forward>:
 * @brief  Motor Forward - Both motors forward at specified speed
 * @param  speed: Motor speed (0-100%)
 * @retval None
 */
void Motor_Forward(uint8_t speed)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
    Motor_SetSpeed_Smooth(speed, 0, speed, 0);
 8001426:	79fa      	ldrb	r2, [r7, #7]
 8001428:	79f8      	ldrb	r0, [r7, #7]
 800142a:	2300      	movs	r3, #0
 800142c:	2100      	movs	r1, #0
 800142e:	f7ff fe13 	bl	8001058 <Motor_SetSpeed_Smooth>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <Motor_Reverse>:
 * @brief  Motor Reverse - Both motors backward at specified speed
 * @param  speed: Motor speed (0-100%)
 * @retval None
 */
void Motor_Reverse(uint8_t speed)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	71fb      	strb	r3, [r7, #7]
    Motor_SetSpeed_Smooth(0, speed, 0, speed);
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	79f9      	ldrb	r1, [r7, #7]
 8001448:	2200      	movs	r2, #0
 800144a:	2000      	movs	r0, #0
 800144c:	f7ff fe04 	bl	8001058 <Motor_SetSpeed_Smooth>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <Motor_Left>:
 * @brief  Motor Left - Left motor reverse, right motor forward (spot turn)
 * @param  speed: Motor speed (0-100%)
 * @retval None
 */
void Motor_Left(uint8_t speed)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
    Motor_SetSpeed_Smooth(0, speed, speed, 0);
 8001462:	79fa      	ldrb	r2, [r7, #7]
 8001464:	79f9      	ldrb	r1, [r7, #7]
 8001466:	2300      	movs	r3, #0
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff fdf5 	bl	8001058 <Motor_SetSpeed_Smooth>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <Motor_Right>:
 * @brief  Motor Right - Left motor forward, right motor reverse (spot turn)
 * @param  speed: Motor speed (0-100%)
 * @retval None
 */
void Motor_Right(uint8_t speed)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	71fb      	strb	r3, [r7, #7]
    Motor_SetSpeed_Smooth(speed, 0, 0, speed);
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	79f8      	ldrb	r0, [r7, #7]
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	f7ff fde6 	bl	8001058 <Motor_SetSpeed_Smooth>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <Motor_ForwardDifferential>:
 * @param  left_speed: Left wheel forward PWM (0-100)
 * @param  right_speed: Right wheel forward PWM (0-100)
 * @retval None
 */
void Motor_ForwardDifferential(uint8_t left_speed, uint8_t right_speed)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	460a      	mov	r2, r1
 800149e:	71fb      	strb	r3, [r7, #7]
 80014a0:	4613      	mov	r3, r2
 80014a2:	71bb      	strb	r3, [r7, #6]
    Motor_SetSpeed(left_speed, 0, right_speed, 0);
 80014a4:	79ba      	ldrb	r2, [r7, #6]
 80014a6:	79f8      	ldrb	r0, [r7, #7]
 80014a8:	2300      	movs	r3, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	f7ff fd68 	bl	8000f80 <Motor_SetSpeed>
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <Motor_Stop>:
/**
 * @brief  Motor Stop - All motors off (instant stop)
 * @retval None
 */
void Motor_Stop(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
    Motor_SetSpeed(0, 0, 0, 0);
 80014bc:	2300      	movs	r3, #0
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	2000      	movs	r0, #0
 80014c4:	f7ff fd5c 	bl	8000f80 <Motor_SetSpeed>
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}

080014cc <Motor_Stop_Smooth>:
/**
 * @brief  Motor Stop - All motors off with smooth deceleration
 * @retval None
 */
void Motor_Stop_Smooth(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
    Motor_SetSpeed_Smooth(0, 0, 0, 0);
 80014d0:	2300      	movs	r3, #0
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff fdbe 	bl	8001058 <Motor_SetSpeed_Smooth>
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <HAL_MspInit+0x54>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ee:	4a11      	ldr	r2, [pc, #68]	@ (8001534 <HAL_MspInit+0x54>)
 80014f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <HAL_MspInit+0x54>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	603b      	str	r3, [r7, #0]
 8001506:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <HAL_MspInit+0x54>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	4a0a      	ldr	r2, [pc, #40]	@ (8001534 <HAL_MspInit+0x54>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	@ 0x40
 8001512:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <HAL_MspInit+0x54>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	210f      	movs	r1, #15
 8001522:	f06f 0001 	mvn.w	r0, #1
 8001526:	f000 fe8f 	bl	8002248 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800

08001538 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08e      	sub	sp, #56	@ 0x38
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	4b34      	ldr	r3, [pc, #208]	@ (8001620 <HAL_InitTick+0xe8>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001550:	4a33      	ldr	r2, [pc, #204]	@ (8001620 <HAL_InitTick+0xe8>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6413      	str	r3, [r2, #64]	@ 0x40
 8001558:	4b31      	ldr	r3, [pc, #196]	@ (8001620 <HAL_InitTick+0xe8>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001564:	f107 0210 	add.w	r2, r7, #16
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f001 fca8 	bl	8002ec4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800157a:	2b00      	cmp	r3, #0
 800157c:	d103      	bne.n	8001586 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800157e:	f001 fc8d 	bl	8002e9c <HAL_RCC_GetPCLK1Freq>
 8001582:	6378      	str	r0, [r7, #52]	@ 0x34
 8001584:	e004      	b.n	8001590 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001586:	f001 fc89 	bl	8002e9c <HAL_RCC_GetPCLK1Freq>
 800158a:	4603      	mov	r3, r0
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001592:	4a24      	ldr	r2, [pc, #144]	@ (8001624 <HAL_InitTick+0xec>)
 8001594:	fba2 2303 	umull	r2, r3, r2, r3
 8001598:	0c9b      	lsrs	r3, r3, #18
 800159a:	3b01      	subs	r3, #1
 800159c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800159e:	4b22      	ldr	r3, [pc, #136]	@ (8001628 <HAL_InitTick+0xf0>)
 80015a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015a4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80015a6:	4b20      	ldr	r3, [pc, #128]	@ (8001628 <HAL_InitTick+0xf0>)
 80015a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015ac:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80015ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001628 <HAL_InitTick+0xf0>)
 80015b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80015b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <HAL_InitTick+0xf0>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001628 <HAL_InitTick+0xf0>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c0:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <HAL_InitTick+0xf0>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80015c6:	4818      	ldr	r0, [pc, #96]	@ (8001628 <HAL_InitTick+0xf0>)
 80015c8:	f001 fcae 	bl	8002f28 <HAL_TIM_Base_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80015d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d11b      	bne.n	8001612 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80015da:	4813      	ldr	r0, [pc, #76]	@ (8001628 <HAL_InitTick+0xf0>)
 80015dc:	f001 fcfe 	bl	8002fdc <HAL_TIM_Base_Start_IT>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80015e6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d111      	bne.n	8001612 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015ee:	201c      	movs	r0, #28
 80015f0:	f000 fe46 	bl	8002280 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b0f      	cmp	r3, #15
 80015f8:	d808      	bhi.n	800160c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80015fa:	2200      	movs	r2, #0
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	201c      	movs	r0, #28
 8001600:	f000 fe22 	bl	8002248 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001604:	4a09      	ldr	r2, [pc, #36]	@ (800162c <HAL_InitTick+0xf4>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	e002      	b.n	8001612 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001612:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001616:	4618      	mov	r0, r3
 8001618:	3738      	adds	r7, #56	@ 0x38
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800
 8001624:	431bde83 	.word	0x431bde83
 8001628:	20000384 	.word	0x20000384
 800162c:	20000008 	.word	0x20000008

08001630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <NMI_Handler+0x4>

08001638 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <HardFault_Handler+0x4>

08001640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <MemManage_Handler+0x4>

08001648 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <BusFault_Handler+0x4>

08001650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <UsageFault_Handler+0x4>

08001658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800166c:	4802      	ldr	r0, [pc, #8]	@ (8001678 <TIM2_IRQHandler+0x10>)
 800166e:	f001 fe21 	bl	80032b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000384 	.word	0x20000384

0800167c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <SystemInit+0x20>)
 8001682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001686:	4a05      	ldr	r2, [pc, #20]	@ (800169c <SystemInit+0x20>)
 8001688:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800168c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <UART_GPIO_Init>:
/**
 * @brief  Initialize GPIO pins for UART
 * @retval None
 */
void UART_GPIO_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
    
    /* Enable GPIOA clock */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	2300      	movs	r3, #0
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <UART_GPIO_Init+0x58>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016bc:	4a0e      	ldr	r2, [pc, #56]	@ (80016f8 <UART_GPIO_Init+0x58>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c4:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <UART_GPIO_Init+0x58>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	683b      	ldr	r3, [r7, #0]
    
    /* Configure UART Pins (PA9-TX, PA10-RX) */
    GPIO_InitStruct.Pin = UART_TX_PIN | UART_RX_PIN;
 80016d0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016d4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016da:	2301      	movs	r3, #1
 80016dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016de:	2302      	movs	r3, #2
 80016e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = UART_AF;
 80016e2:	2307      	movs	r3, #7
 80016e4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(UART_PORT, &GPIO_InitStruct);
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	4804      	ldr	r0, [pc, #16]	@ (80016fc <UART_GPIO_Init+0x5c>)
 80016ec:	f000 fdd6 	bl	800229c <HAL_GPIO_Init>
}
 80016f0:	bf00      	nop
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020000 	.word	0x40020000

08001700 <UART_Init>:
/**
 * @brief  Initialize USART1 peripheral
 * @retval None
 */
void UART_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
    /* Enable USART1 clock (on APB2) */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b24      	ldr	r3, [pc, #144]	@ (800179c <UART_Init+0x9c>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170e:	4a23      	ldr	r2, [pc, #140]	@ (800179c <UART_Init+0x9c>)
 8001710:	f043 0310 	orr.w	r3, r3, #16
 8001714:	6453      	str	r3, [r2, #68]	@ 0x44
 8001716:	4b21      	ldr	r3, [pc, #132]	@ (800179c <UART_Init+0x9c>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171a:	f003 0310 	and.w	r3, r3, #16
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
    
    /* Disable USART1 before configuration */
    USART1->CR1 &= ~USART_CR1_UE;
 8001722:	4b1f      	ldr	r3, [pc, #124]	@ (80017a0 <UART_Init+0xa0>)
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	4a1e      	ldr	r2, [pc, #120]	@ (80017a0 <UART_Init+0xa0>)
 8001728:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800172c:	60d3      	str	r3, [r2, #12]
    
    /* Configure USART1 Control Register 1 (CR1) */
    USART1->CR1 = 0;
 800172e:	4b1c      	ldr	r3, [pc, #112]	@ (80017a0 <UART_Init+0xa0>)
 8001730:	2200      	movs	r2, #0
 8001732:	60da      	str	r2, [r3, #12]
    USART1->CR1 |= USART_CR1_RE;
 8001734:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <UART_Init+0xa0>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	4a19      	ldr	r2, [pc, #100]	@ (80017a0 <UART_Init+0xa0>)
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_TE;
 8001740:	4b17      	ldr	r3, [pc, #92]	@ (80017a0 <UART_Init+0xa0>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	4a16      	ldr	r2, [pc, #88]	@ (80017a0 <UART_Init+0xa0>)
 8001746:	f043 0308 	orr.w	r3, r3, #8
 800174a:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_RXNEIE;
 800174c:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <UART_Init+0xa0>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4a13      	ldr	r2, [pc, #76]	@ (80017a0 <UART_Init+0xa0>)
 8001752:	f043 0320 	orr.w	r3, r3, #32
 8001756:	60d3      	str	r3, [r2, #12]
    
    /* Configure USART1 Control Register 2 (CR2) */
    USART1->CR2 = 0;
 8001758:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <UART_Init+0xa0>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
    
    /* Configure USART1 Control Register 3 (CR3) */
    USART1->CR3 = 0;
 800175e:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <UART_Init+0xa0>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
    USART1->CR3 |= USART_CR3_EIE;
 8001764:	4b0e      	ldr	r3, [pc, #56]	@ (80017a0 <UART_Init+0xa0>)
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	4a0d      	ldr	r2, [pc, #52]	@ (80017a0 <UART_Init+0xa0>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6153      	str	r3, [r2, #20]
    
    /* Configure Baud Rate Register (BRR) for 9600 baud at 16MHz */
    USART1->BRR = 0x0682;
 8001770:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <UART_Init+0xa0>)
 8001772:	f240 6282 	movw	r2, #1666	@ 0x682
 8001776:	609a      	str	r2, [r3, #8]
    
    /* Enable USART1 */
    USART1->CR1 |= USART_CR1_UE;
 8001778:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <UART_Init+0xa0>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	4a08      	ldr	r2, [pc, #32]	@ (80017a0 <UART_Init+0xa0>)
 800177e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001782:	60d3      	str	r3, [r2, #12]
    
    /* Configure NVIC for USART1 interrupt */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001784:	2200      	movs	r2, #0
 8001786:	2105      	movs	r1, #5
 8001788:	2025      	movs	r0, #37	@ 0x25
 800178a:	f000 fd5d 	bl	8002248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800178e:	2025      	movs	r0, #37	@ 0x25
 8001790:	f000 fd76 	bl	8002280 <HAL_NVIC_EnableIRQ>
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	40011000 	.word	0x40011000

080017a4 <UART_IRQHandler>:
/**
 * @brief  USART1 Interrupt Handler
 * @retval None
 */
void UART_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
    /* Check for RXNE (Receive Data Register Not Empty) */
    if (USART1->SR & USART_SR_RXNE)
 80017aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001868 <UART_IRQHandler+0xc4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0320 	and.w	r3, r3, #32
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d017      	beq.n	80017e6 <UART_IRQHandler+0x42>
    {
        LED_Toggle_RX();
 80017b6:	f7ff f957 	bl	8000a68 <LED_Toggle_RX>
        
        rx_data = (uint8_t)(USART1->DR & 0xFF);
 80017ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001868 <UART_IRQHandler+0xc4>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	4b2a      	ldr	r3, [pc, #168]	@ (800186c <UART_IRQHandler+0xc8>)
 80017c2:	701a      	strb	r2, [r3, #0]
        uart_rx_seen = true;
 80017c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001870 <UART_IRQHandler+0xcc>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
        
        if (uartCmdQueueHandle != NULL)
 80017ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001874 <UART_IRQHandler+0xd0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d009      	beq.n	80017e6 <UART_IRQHandler+0x42>
        {
            osMessagePut(uartCmdQueueHandle, rx_data, 0);
 80017d2:	4b28      	ldr	r3, [pc, #160]	@ (8001874 <UART_IRQHandler+0xd0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a25      	ldr	r2, [pc, #148]	@ (800186c <UART_IRQHandler+0xc8>)
 80017d8:	7812      	ldrb	r2, [r2, #0]
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	4611      	mov	r1, r2
 80017de:	2200      	movs	r2, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 fa45 	bl	8003c70 <osMessagePut>
        }
    }
    
    /* Check for TXE (Transmit Data Register Empty) */
    if (USART1->SR & USART_SR_TXE)
 80017e6:	4b20      	ldr	r3, [pc, #128]	@ (8001868 <UART_IRQHandler+0xc4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <UART_IRQHandler+0x52>
    {
        LED_Toggle_TX();
 80017f2:	f7ff f945 	bl	8000a80 <LED_Toggle_TX>
    }
    
    /* Check for errors */
    if (USART1->SR & USART_SR_ORE)
 80017f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001868 <UART_IRQHandler+0xc4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d006      	beq.n	8001810 <UART_IRQHandler+0x6c>
    {
        uart_error = true;
 8001802:	4b1d      	ldr	r3, [pc, #116]	@ (8001878 <UART_IRQHandler+0xd4>)
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
        volatile uint32_t dummy = USART1->DR;
 8001808:	4b17      	ldr	r3, [pc, #92]	@ (8001868 <UART_IRQHandler+0xc4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	60fb      	str	r3, [r7, #12]
        (void)dummy;
 800180e:	68fb      	ldr	r3, [r7, #12]
    }
    
    if (USART1->SR & USART_SR_FE)
 8001810:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <UART_IRQHandler+0xc4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <UART_IRQHandler+0x86>
    {
        uart_error = true;
 800181c:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <UART_IRQHandler+0xd4>)
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
        volatile uint32_t dummy = USART1->DR;
 8001822:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <UART_IRQHandler+0xc4>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	60bb      	str	r3, [r7, #8]
        (void)dummy;
 8001828:	68bb      	ldr	r3, [r7, #8]
    }
    
    if (USART1->SR & USART_SR_NE)
 800182a:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <UART_IRQHandler+0xc4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	2b00      	cmp	r3, #0
 8001834:	d006      	beq.n	8001844 <UART_IRQHandler+0xa0>
    {
        uart_error = true;
 8001836:	4b10      	ldr	r3, [pc, #64]	@ (8001878 <UART_IRQHandler+0xd4>)
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
        volatile uint32_t dummy = USART1->DR;
 800183c:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <UART_IRQHandler+0xc4>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	607b      	str	r3, [r7, #4]
        (void)dummy;
 8001842:	687b      	ldr	r3, [r7, #4]
    }
    
    if (USART1->SR & USART_SR_PE)
 8001844:	4b08      	ldr	r3, [pc, #32]	@ (8001868 <UART_IRQHandler+0xc4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d006      	beq.n	800185e <UART_IRQHandler+0xba>
    {
        uart_error = true;
 8001850:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <UART_IRQHandler+0xd4>)
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
        volatile uint32_t dummy = USART1->DR;
 8001856:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <UART_IRQHandler+0xc4>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	603b      	str	r3, [r7, #0]
        (void)dummy;
 800185c:	683b      	ldr	r3, [r7, #0]
    }
}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40011000 	.word	0x40011000
 800186c:	200003cc 	.word	0x200003cc
 8001870:	200003ce 	.word	0x200003ce
 8001874:	200003d0 	.word	0x200003d0
 8001878:	200003cd 	.word	0x200003cd

0800187c <UART_SendString>:
 * @brief  Send string via UART (polling mode)
 * @param  s: Null-terminated string
 * @retval None
 */
void UART_SendString(const char* s)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
    while (*s)
 8001884:	e00c      	b.n	80018a0 <UART_SendString+0x24>
    {
        while (!(USART1->SR & USART_SR_TXE)) { }
 8001886:	bf00      	nop
 8001888:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <UART_SendString+0x3c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f9      	beq.n	8001888 <UART_SendString+0xc>
        USART1->DR = (uint8_t)(*s++);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	781a      	ldrb	r2, [r3, #0]
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <UART_SendString+0x3c>)
 800189e:	605a      	str	r2, [r3, #4]
    while (*s)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1ee      	bne.n	8001886 <UART_SendString+0xa>
    }
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40011000 	.word	0x40011000

080018bc <UART_SendUInt>:
 * @brief  Send unsigned integer via UART (polling mode)
 * @param  v: Value to send
 * @retval None
 */
void UART_SendUInt(uint32_t v)
{
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
    char buf[11];
    int i = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
    if (v == 0) 
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d124      	bne.n	8001918 <UART_SendUInt+0x5c>
    { 
        while (!(USART1->SR & USART_SR_TXE)) { } 
 80018ce:	bf00      	nop
 80018d0:	4b21      	ldr	r3, [pc, #132]	@ (8001958 <UART_SendUInt+0x9c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f9      	beq.n	80018d0 <UART_SendUInt+0x14>
        USART1->DR = '0'; 
 80018dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001958 <UART_SendUInt+0x9c>)
 80018de:	2230      	movs	r2, #48	@ 0x30
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	e033      	b.n	800194c <UART_SendUInt+0x90>
        return; 
    }
    while (v && i < (int)sizeof(buf)) 
    { 
        buf[i++] = '0' + (v % 10); 
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4b1d      	ldr	r3, [pc, #116]	@ (800195c <UART_SendUInt+0xa0>)
 80018e8:	fba3 2301 	umull	r2, r3, r3, r1
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	1aca      	subs	r2, r1, r3
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	1c59      	adds	r1, r3, #1
 80018fe:	6179      	str	r1, [r7, #20]
 8001900:	3230      	adds	r2, #48	@ 0x30
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	3318      	adds	r3, #24
 8001906:	443b      	add	r3, r7
 8001908:	f803 2c10 	strb.w	r2, [r3, #-16]
        v /= 10; 
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a13      	ldr	r2, [pc, #76]	@ (800195c <UART_SendUInt+0xa0>)
 8001910:	fba2 2303 	umull	r2, r3, r2, r3
 8001914:	08db      	lsrs	r3, r3, #3
 8001916:	607b      	str	r3, [r7, #4]
    while (v && i < (int)sizeof(buf)) 
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d011      	beq.n	8001942 <UART_SendUInt+0x86>
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2b0a      	cmp	r3, #10
 8001922:	dddf      	ble.n	80018e4 <UART_SendUInt+0x28>
    }
    while (i--) 
 8001924:	e00d      	b.n	8001942 <UART_SendUInt+0x86>
    { 
        while (!(USART1->SR & USART_SR_TXE)) { } 
 8001926:	bf00      	nop
 8001928:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <UART_SendUInt+0x9c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f9      	beq.n	8001928 <UART_SendUInt+0x6c>
        USART1->DR = (uint8_t)buf[i]; 
 8001934:	f107 0208 	add.w	r2, r7, #8
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	4413      	add	r3, r2
 800193c:	781a      	ldrb	r2, [r3, #0]
 800193e:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <UART_SendUInt+0x9c>)
 8001940:	605a      	str	r2, [r3, #4]
    while (i--) 
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	1e5a      	subs	r2, r3, #1
 8001946:	617a      	str	r2, [r7, #20]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1ec      	bne.n	8001926 <UART_SendUInt+0x6a>
    }
}
 800194c:	371c      	adds	r7, #28
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40011000 	.word	0x40011000
 800195c:	cccccccd 	.word	0xcccccccd

08001960 <UART_SendCRLF>:
/**
 * @brief  Send carriage return + line feed
 * @retval None
 */
void UART_SendCRLF(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
    while (!(USART1->SR & USART_SR_TXE)) { }
 8001964:	bf00      	nop
 8001966:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <UART_SendCRLF+0x38>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f9      	beq.n	8001966 <UART_SendCRLF+0x6>
    USART1->DR = '\r';
 8001972:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <UART_SendCRLF+0x38>)
 8001974:	220d      	movs	r2, #13
 8001976:	605a      	str	r2, [r3, #4]
    while (!(USART1->SR & USART_SR_TXE)) { }
 8001978:	bf00      	nop
 800197a:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <UART_SendCRLF+0x38>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f9      	beq.n	800197a <UART_SendCRLF+0x1a>
    USART1->DR = '\n';
 8001986:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <UART_SendCRLF+0x38>)
 8001988:	220a      	movs	r2, #10
 800198a:	605a      	str	r2, [r3, #4]
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40011000 	.word	0x40011000

0800199c <DWT_Delay_Init>:
/**
 * @brief  Initialize DWT cycle counter for microsecond timing
 * @retval None
 */
static inline void DWT_Delay_Init(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80019a0:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <DWT_Delay_Init+0x2c>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4a08      	ldr	r2, [pc, #32]	@ (80019c8 <DWT_Delay_Init+0x2c>)
 80019a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019aa:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 80019ac:	4b07      	ldr	r3, [pc, #28]	@ (80019cc <DWT_Delay_Init+0x30>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <DWT_Delay_Init+0x30>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a05      	ldr	r2, [pc, #20]	@ (80019cc <DWT_Delay_Init+0x30>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6013      	str	r3, [r2, #0]
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000edf0 	.word	0xe000edf0
 80019cc:	e0001000 	.word	0xe0001000

080019d0 <delay_us>:
 * @brief  Microsecond delay
 * @param  us: Microseconds to delay
 * @retval None
 */
static inline void delay_us(uint32_t us)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 80019d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <delay_us+0x44>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (SystemCoreClock / 1000000U);
 80019de:	4b0e      	ldr	r3, [pc, #56]	@ (8001a18 <delay_us+0x48>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a0e      	ldr	r2, [pc, #56]	@ (8001a1c <delay_us+0x4c>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	0c9a      	lsrs	r2, r3, #18
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	fb02 f303 	mul.w	r3, r2, r3
 80019f0:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks) { __NOP(); }
 80019f2:	e000      	b.n	80019f6 <delay_us+0x26>
 80019f4:	bf00      	nop
 80019f6:	4b07      	ldr	r3, [pc, #28]	@ (8001a14 <delay_us+0x44>)
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d8f7      	bhi.n	80019f4 <delay_us+0x24>
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e0001000 	.word	0xe0001000
 8001a18:	20000004 	.word	0x20000004
 8001a1c:	431bde83 	.word	0x431bde83

08001a20 <Ultrasonic_Measure_Pin>:
 * @param  echo_pin: Echo pin number
 * @retval Distance in centimeters (0-400), 0 on timeout
 */
static uint16_t Ultrasonic_Measure_Pin(GPIO_TypeDef* trig_port, uint16_t trig_pin,
                                       GPIO_TypeDef* echo_port, uint16_t echo_pin)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08c      	sub	sp, #48	@ 0x30
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	817b      	strh	r3, [r7, #10]
 8001a30:	4613      	mov	r3, r2
 8001a32:	813b      	strh	r3, [r7, #8]
    /* Ensure trigger low */
    HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_RESET);
 8001a34:	897b      	ldrh	r3, [r7, #10]
 8001a36:	2200      	movs	r2, #0
 8001a38:	4619      	mov	r1, r3
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 fdca 	bl	80025d4 <HAL_GPIO_WritePin>
    delay_us(2);
 8001a40:	2002      	movs	r0, #2
 8001a42:	f7ff ffc5 	bl	80019d0 <delay_us>

    /* 10us trigger pulse */
    HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_SET);
 8001a46:	897b      	ldrh	r3, [r7, #10]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 fdc1 	bl	80025d4 <HAL_GPIO_WritePin>
    delay_us(ULTRASONIC_TRIGGER_US);
 8001a52:	200a      	movs	r0, #10
 8001a54:	f7ff ffbc 	bl	80019d0 <delay_us>
    HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_RESET);
 8001a58:	897b      	ldrh	r3, [r7, #10]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 fdb8 	bl	80025d4 <HAL_GPIO_WritePin>

    uint32_t timeout_ticks = (ULTRASONIC_TIMEOUT_US * (SystemCoreClock / 1000000U));
 8001a64:	4b2c      	ldr	r3, [pc, #176]	@ (8001b18 <Ultrasonic_Measure_Pin+0xf8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a2c      	ldr	r2, [pc, #176]	@ (8001b1c <Ultrasonic_Measure_Pin+0xfc>)
 8001a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6e:	0c9b      	lsrs	r3, r3, #18
 8001a70:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001a74:	fb02 f303 	mul.w	r3, r2, r3
 8001a78:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t tstart, tend;

    /* Wait for echo rising edge */
    uint32_t start_wait = DWT->CYCCNT;
 8001a7a:	4b29      	ldr	r3, [pc, #164]	@ (8001b20 <Ultrasonic_Measure_Pin+0x100>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (HAL_GPIO_ReadPin(echo_port, echo_pin) == GPIO_PIN_RESET)
 8001a80:	e008      	b.n	8001a94 <Ultrasonic_Measure_Pin+0x74>
    {
        if ((DWT->CYCCNT - start_wait) > timeout_ticks) return 0;
 8001a82:	4b27      	ldr	r3, [pc, #156]	@ (8001b20 <Ultrasonic_Measure_Pin+0x100>)
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d201      	bcs.n	8001a94 <Ultrasonic_Measure_Pin+0x74>
 8001a90:	2300      	movs	r3, #0
 8001a92:	e03c      	b.n	8001b0e <Ultrasonic_Measure_Pin+0xee>
    while (HAL_GPIO_ReadPin(echo_port, echo_pin) == GPIO_PIN_RESET)
 8001a94:	893b      	ldrh	r3, [r7, #8]
 8001a96:	4619      	mov	r1, r3
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 fd83 	bl	80025a4 <HAL_GPIO_ReadPin>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0ee      	beq.n	8001a82 <Ultrasonic_Measure_Pin+0x62>
    }
    tstart = DWT->CYCCNT;
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b20 <Ultrasonic_Measure_Pin+0x100>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	623b      	str	r3, [r7, #32]

    /* Wait for echo falling edge */
    while (HAL_GPIO_ReadPin(echo_port, echo_pin) == GPIO_PIN_SET)
 8001aaa:	e008      	b.n	8001abe <Ultrasonic_Measure_Pin+0x9e>
    {
        if ((DWT->CYCCNT - tstart) > timeout_ticks) return 0;
 8001aac:	4b1c      	ldr	r3, [pc, #112]	@ (8001b20 <Ultrasonic_Measure_Pin+0x100>)
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d201      	bcs.n	8001abe <Ultrasonic_Measure_Pin+0x9e>
 8001aba:	2300      	movs	r3, #0
 8001abc:	e027      	b.n	8001b0e <Ultrasonic_Measure_Pin+0xee>
    while (HAL_GPIO_ReadPin(echo_port, echo_pin) == GPIO_PIN_SET)
 8001abe:	893b      	ldrh	r3, [r7, #8]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 fd6e 	bl	80025a4 <HAL_GPIO_ReadPin>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d0ee      	beq.n	8001aac <Ultrasonic_Measure_Pin+0x8c>
    }
    tend = DWT->CYCCNT;
 8001ace:	4b14      	ldr	r3, [pc, #80]	@ (8001b20 <Ultrasonic_Measure_Pin+0x100>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	61fb      	str	r3, [r7, #28]

    uint32_t pulse_ticks = (tend - tstart);
 8001ad4:	69fa      	ldr	r2, [r7, #28]
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	61bb      	str	r3, [r7, #24]
    uint32_t pulse_us = pulse_ticks / (SystemCoreClock / 1000000U);
 8001adc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <Ultrasonic_Measure_Pin+0xf8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0e      	ldr	r2, [pc, #56]	@ (8001b1c <Ultrasonic_Measure_Pin+0xfc>)
 8001ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae6:	0c9b      	lsrs	r3, r3, #18
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aee:	617b      	str	r3, [r7, #20]

    /* Convert to centimeters: distance (cm) = pulse_us / 58 */
    uint32_t dist_cm = pulse_us / 58U;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	4a0c      	ldr	r2, [pc, #48]	@ (8001b24 <Ultrasonic_Measure_Pin+0x104>)
 8001af4:	fba2 2303 	umull	r2, r3, r2, r3
 8001af8:	095b      	lsrs	r3, r3, #5
 8001afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dist_cm > 400) dist_cm = 400;
 8001afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001afe:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001b02:	d902      	bls.n	8001b0a <Ultrasonic_Measure_Pin+0xea>
 8001b04:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return (uint16_t)dist_cm;
 8001b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b0c:	b29b      	uxth	r3, r3
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3730      	adds	r7, #48	@ 0x30
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000004 	.word	0x20000004
 8001b1c:	431bde83 	.word	0x431bde83
 8001b20:	e0001000 	.word	0xe0001000
 8001b24:	8d3dcb09 	.word	0x8d3dcb09

08001b28 <Ultrasonic_GPIO_Init>:
/**
 * @brief  Initialize GPIO pins for ultrasonic sensors
 * @retval None
 */
void Ultrasonic_GPIO_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
#if ULTRASONIC_ENABLED
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
    
    /* Enable GPIOB clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	4b17      	ldr	r3, [pc, #92]	@ (8001ba0 <Ultrasonic_GPIO_Init+0x78>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b44:	4a16      	ldr	r2, [pc, #88]	@ (8001ba0 <Ultrasonic_GPIO_Init+0x78>)
 8001b46:	f043 0302 	orr.w	r3, r3, #2
 8001b4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ba0 <Ultrasonic_GPIO_Init+0x78>)
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	603b      	str	r3, [r7, #0]
 8001b56:	683b      	ldr	r3, [r7, #0]

    /* Configure Ultrasonic Trigger pins (PB0, PB1) as Output */
    GPIO_InitStruct.Pin = US_TRIG_A_PIN | US_TRIG_B_PIN;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b64:	2302      	movs	r3, #2
 8001b66:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(US_GPIO_PORT, &GPIO_InitStruct);
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480d      	ldr	r0, [pc, #52]	@ (8001ba4 <Ultrasonic_GPIO_Init+0x7c>)
 8001b6e:	f000 fb95 	bl	800229c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(US_GPIO_PORT, US_TRIG_A_PIN | US_TRIG_B_PIN, GPIO_PIN_RESET);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2103      	movs	r1, #3
 8001b76:	480b      	ldr	r0, [pc, #44]	@ (8001ba4 <Ultrasonic_GPIO_Init+0x7c>)
 8001b78:	f000 fd2c 	bl	80025d4 <HAL_GPIO_WritePin>

    /* Configure Ultrasonic Echo pins (PB6, PB7) as Input with pulldown */
    GPIO_InitStruct.Pin = US_ECHO_A_PIN | US_ECHO_B_PIN;
 8001b7c:	23c0      	movs	r3, #192	@ 0xc0
 8001b7e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b84:	2302      	movs	r3, #2
 8001b86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(US_GPIO_PORT, &GPIO_InitStruct);
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4804      	ldr	r0, [pc, #16]	@ (8001ba4 <Ultrasonic_GPIO_Init+0x7c>)
 8001b92:	f000 fb83 	bl	800229c <HAL_GPIO_Init>
#endif
}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020400 	.word	0x40020400

08001ba8 <Ultrasonic_Init>:
/**
 * @brief  Initialize DWT cycle counter for microsecond timing
 * @retval None
 */
void Ultrasonic_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
#if ULTRASONIC_ENABLED
    DWT_Delay_Init();
 8001bac:	f7ff fef6 	bl	800199c <DWT_Delay_Init>
    HAL_GPIO_WritePin(US_GPIO_PORT, US_TRIG_A_PIN | US_TRIG_B_PIN, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2103      	movs	r1, #3
 8001bb4:	4802      	ldr	r0, [pc, #8]	@ (8001bc0 <Ultrasonic_Init+0x18>)
 8001bb6:	f000 fd0d 	bl	80025d4 <HAL_GPIO_WritePin>
#endif
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40020400 	.word	0x40020400

08001bc4 <Ultrasonic_MeasureA>:
/**
 * @brief  Measure distance from left sensor (Sensor A)
 * @retval Distance in centimeters (0-400), 0 on timeout
 */
uint16_t Ultrasonic_MeasureA(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
#if ULTRASONIC_ENABLED
    return Ultrasonic_Measure_Pin(US_GPIO_PORT, US_TRIG_A_PIN, US_GPIO_PORT, US_ECHO_A_PIN);
 8001bc8:	2340      	movs	r3, #64	@ 0x40
 8001bca:	4a04      	ldr	r2, [pc, #16]	@ (8001bdc <Ultrasonic_MeasureA+0x18>)
 8001bcc:	2101      	movs	r1, #1
 8001bce:	4803      	ldr	r0, [pc, #12]	@ (8001bdc <Ultrasonic_MeasureA+0x18>)
 8001bd0:	f7ff ff26 	bl	8001a20 <Ultrasonic_Measure_Pin>
 8001bd4:	4603      	mov	r3, r0
#else
    return 0;
#endif
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40020400 	.word	0x40020400

08001be0 <Ultrasonic_MeasureB>:
/**
 * @brief  Measure distance from right sensor (Sensor B)
 * @retval Distance in centimeters (0-400), 0 on timeout
 */
uint16_t Ultrasonic_MeasureB(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
#if ULTRASONIC_ENABLED
    return Ultrasonic_Measure_Pin(US_GPIO_PORT, US_TRIG_B_PIN, US_GPIO_PORT, US_ECHO_B_PIN);
 8001be4:	2380      	movs	r3, #128	@ 0x80
 8001be6:	4a04      	ldr	r2, [pc, #16]	@ (8001bf8 <Ultrasonic_MeasureB+0x18>)
 8001be8:	2102      	movs	r1, #2
 8001bea:	4803      	ldr	r0, [pc, #12]	@ (8001bf8 <Ultrasonic_MeasureB+0x18>)
 8001bec:	f7ff ff18 	bl	8001a20 <Ultrasonic_Measure_Pin>
 8001bf0:	4603      	mov	r3, r0
#else
    return 0;
#endif
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40020400 	.word	0x40020400

08001bfc <WallAvoidance_Task>:
 * @brief  FreeRTOS task for ultrasonic sensing and wall avoidance
 * @param  argument: Not used
 * @retval None
 */
void WallAvoidance_Task(void const * argument)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b090      	sub	sp, #64	@ 0x40
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
#if ULTRASONIC_ENABLED
    /* PID state for center-seeking control */
    static float pid_i = 0.0f;
    static float last_err = 0.0f;
    const float dt = (float)ULTRASONIC_MEASURE_INTERVAL_MS / 1000.0f;
 8001c04:	4ba8      	ldr	r3, [pc, #672]	@ (8001ea8 <WallAvoidance_Task+0x2ac>)
 8001c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Debug throttling */
    static uint32_t dbg_counter = 0;

#if DEBUG_BOOT_BANNER
    UART_SendString("Task: ultrasonic started\r\n");
 8001c08:	48a8      	ldr	r0, [pc, #672]	@ (8001eac <WallAvoidance_Task+0x2b0>)
 8001c0a:	f7ff fe37 	bl	800187c <UART_SendString>
#endif

    for(;;)
    {
        /* Measure left (A) and right (B) distances */
        uint16_t left = Ultrasonic_MeasureA();
 8001c0e:	f7ff ffd9 	bl	8001bc4 <Ultrasonic_MeasureA>
 8001c12:	4603      	mov	r3, r0
 8001c14:	857b      	strh	r3, [r7, #42]	@ 0x2a
        osDelay(5);
 8001c16:	2005      	movs	r0, #5
 8001c18:	f001 ffee 	bl	8003bf8 <osDelay>
        uint16_t right = Ultrasonic_MeasureB();
 8001c1c:	f7ff ffe0 	bl	8001be0 <Ultrasonic_MeasureB>
 8001c20:	4603      	mov	r3, r0
 8001c22:	853b      	strh	r3, [r7, #40]	@ 0x28
        ultrasonic_left_cm = left;
 8001c24:	4aa2      	ldr	r2, [pc, #648]	@ (8001eb0 <WallAvoidance_Task+0x2b4>)
 8001c26:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001c28:	8013      	strh	r3, [r2, #0]
        ultrasonic_right_cm = right;
 8001c2a:	4aa2      	ldr	r2, [pc, #648]	@ (8001eb4 <WallAvoidance_Task+0x2b8>)
 8001c2c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001c2e:	8013      	strh	r3, [r2, #0]

        /* Drive debug LEDs */
        GPIO_PinState left_led = (left > 0 && left <= COLLISION_DISTANCE_SLOW) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8001c30:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d004      	beq.n	8001c40 <WallAvoidance_Task+0x44>
 8001c36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001c38:	2b05      	cmp	r3, #5
 8001c3a:	d801      	bhi.n	8001c40 <WallAvoidance_Task+0x44>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <WallAvoidance_Task+0x46>
 8001c40:	2300      	movs	r3, #0
 8001c42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        GPIO_PinState right_led = (right > 0 && right <= COLLISION_DISTANCE_SLOW) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8001c46:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d004      	beq.n	8001c56 <WallAvoidance_Task+0x5a>
 8001c4c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001c4e:	2b05      	cmp	r3, #5
 8001c50:	d801      	bhi.n	8001c56 <WallAvoidance_Task+0x5a>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <WallAvoidance_Task+0x5c>
 8001c56:	2300      	movs	r3, #0
 8001c58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LED_SetWallIndicators(left_led, right_led);
 8001c5c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001c60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c64:	4611      	mov	r1, r2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe ff22 	bl	8000ab0 <LED_SetWallIndicators>

#if ULTRASONIC_DEBUG
        /* Every ~10 cycles (~500ms), print diagnostics */
        if ((dbg_counter++ % 10U) == 0U)
 8001c6c:	4b92      	ldr	r3, [pc, #584]	@ (8001eb8 <WallAvoidance_Task+0x2bc>)
 8001c6e:	6819      	ldr	r1, [r3, #0]
 8001c70:	1c4b      	adds	r3, r1, #1
 8001c72:	4a91      	ldr	r2, [pc, #580]	@ (8001eb8 <WallAvoidance_Task+0x2bc>)
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b91      	ldr	r3, [pc, #580]	@ (8001ebc <WallAvoidance_Task+0x2c0>)
 8001c78:	fba3 2301 	umull	r2, r3, r3, r1
 8001c7c:	08da      	lsrs	r2, r3, #3
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	1aca      	subs	r2, r1, r3
 8001c88:	2a00      	cmp	r2, #0
 8001c8a:	d138      	bne.n	8001cfe <WallAvoidance_Task+0x102>
        {
            UART_SendString("US L="); 
 8001c8c:	488c      	ldr	r0, [pc, #560]	@ (8001ec0 <WallAvoidance_Task+0x2c4>)
 8001c8e:	f7ff fdf5 	bl	800187c <UART_SendString>
            UART_SendUInt(left);
 8001c92:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fe11 	bl	80018bc <UART_SendUInt>
            UART_SendString("cm R="); 
 8001c9a:	488a      	ldr	r0, [pc, #552]	@ (8001ec4 <WallAvoidance_Task+0x2c8>)
 8001c9c:	f7ff fdee 	bl	800187c <UART_SendString>
            UART_SendUInt(right);
 8001ca0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fe0a 	bl	80018bc <UART_SendUInt>
            UART_SendString("cm LEDL="); 
 8001ca8:	4887      	ldr	r0, [pc, #540]	@ (8001ec8 <WallAvoidance_Task+0x2cc>)
 8001caa:	f7ff fde7 	bl	800187c <UART_SendString>
            UART_SendUInt((uint32_t)(left_led == GPIO_PIN_SET));
 8001cae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	bf0c      	ite	eq
 8001cb6:	2301      	moveq	r3, #1
 8001cb8:	2300      	movne	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fdfd 	bl	80018bc <UART_SendUInt>
            UART_SendString(" LEDR="); 
 8001cc2:	4882      	ldr	r0, [pc, #520]	@ (8001ecc <WallAvoidance_Task+0x2d0>)
 8001cc4:	f7ff fdda 	bl	800187c <UART_SendString>
            UART_SendUInt((uint32_t)(right_led == GPIO_PIN_SET));
 8001cc8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	bf0c      	ite	eq
 8001cd0:	2301      	moveq	r3, #1
 8001cd2:	2300      	movne	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fdf0 	bl	80018bc <UART_SendUInt>
            UART_SendString(" CMD=");
 8001cdc:	487c      	ldr	r0, [pc, #496]	@ (8001ed0 <WallAvoidance_Task+0x2d4>)
 8001cde:	f7ff fdcd 	bl	800187c <UART_SendString>
            while (!(USART1->SR & USART_SR_TXE)) { }
 8001ce2:	bf00      	nop
 8001ce4:	4b7b      	ldr	r3, [pc, #492]	@ (8001ed4 <WallAvoidance_Task+0x2d8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f9      	beq.n	8001ce4 <WallAvoidance_Task+0xe8>
            USART1->DR = (uint8_t)last_movement_cmd;
 8001cf0:	4b79      	ldr	r3, [pc, #484]	@ (8001ed8 <WallAvoidance_Task+0x2dc>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4b77      	ldr	r3, [pc, #476]	@ (8001ed4 <WallAvoidance_Task+0x2d8>)
 8001cf8:	605a      	str	r2, [r3, #4]
            UART_SendCRLF();
 8001cfa:	f7ff fe31 	bl	8001960 <UART_SendCRLF>
        }
#endif

        /* Emergency stop if any side is dangerously close */
        if ((left > 0 && left <= COLLISION_DISTANCE_STOP) ||
 8001cfe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <WallAvoidance_Task+0x10e>
 8001d04:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d905      	bls.n	8001d16 <WallAvoidance_Task+0x11a>
 8001d0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d016      	beq.n	8001d3e <WallAvoidance_Task+0x142>
            (right > 0 && right <= COLLISION_DISTANCE_STOP))
 8001d10:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d813      	bhi.n	8001d3e <WallAvoidance_Task+0x142>
        {
            Motor_Stop();
 8001d16:	f7ff fbcf 	bl	80014b8 <Motor_Stop>
            last_movement_cmd = CMD_STOP;
 8001d1a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ed8 <WallAvoidance_Task+0x2dc>)
 8001d1c:	2253      	movs	r2, #83	@ 0x53
 8001d1e:	701a      	strb	r2, [r3, #0]
            motors_moving = false;
 8001d20:	4b6e      	ldr	r3, [pc, #440]	@ (8001edc <WallAvoidance_Task+0x2e0>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
            pid_i = 0.0f;
 8001d26:	4b6e      	ldr	r3, [pc, #440]	@ (8001ee0 <WallAvoidance_Task+0x2e4>)
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
            last_err = 0.0f;
 8001d2e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ee4 <WallAvoidance_Task+0x2e8>)
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
            osDelay(ULTRASONIC_MEASURE_INTERVAL_MS);
 8001d36:	2032      	movs	r0, #50	@ 0x32
 8001d38:	f001 ff5e 	bl	8003bf8 <osDelay>
            continue;
 8001d3c:	e136      	b.n	8001fac <WallAvoidance_Task+0x3b0>
        }

        /* Center-seeking steering only when moving forward */
        if (last_movement_cmd == CMD_FORWARD && motors_moving)
 8001d3e:	4b66      	ldr	r3, [pc, #408]	@ (8001ed8 <WallAvoidance_Task+0x2dc>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b46      	cmp	r3, #70	@ 0x46
 8001d46:	f040 8124 	bne.w	8001f92 <WallAvoidance_Task+0x396>
 8001d4a:	4b64      	ldr	r3, [pc, #400]	@ (8001edc <WallAvoidance_Task+0x2e0>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 811e 	beq.w	8001f92 <WallAvoidance_Task+0x396>
        {
            int base = (int)current_speed;
 8001d56:	4b64      	ldr	r3, [pc, #400]	@ (8001ee8 <WallAvoidance_Task+0x2ec>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	623b      	str	r3, [r7, #32]
            int left_cmd = base;
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
            int right_cmd = base;
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	63bb      	str	r3, [r7, #56]	@ 0x38

#if CENTERING_PID_ENABLED
            bool left_ok = (left > 0);
 8001d66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bf14      	ite	ne
 8001d6c:	2301      	movne	r3, #1
 8001d6e:	2300      	moveq	r3, #0
 8001d70:	77fb      	strb	r3, [r7, #31]
            bool right_ok = (right > 0);
 8001d72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bf14      	ite	ne
 8001d78:	2301      	movne	r3, #1
 8001d7a:	2300      	moveq	r3, #0
 8001d7c:	77bb      	strb	r3, [r7, #30]

            if (left_ok && right_ok)
 8001d7e:	7ffb      	ldrb	r3, [r7, #31]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80bf 	beq.w	8001f04 <WallAvoidance_Task+0x308>
 8001d86:	7fbb      	ldrb	r3, [r7, #30]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 80bb 	beq.w	8001f04 <WallAvoidance_Task+0x308>
            {
                /* error positive => closer to left => steer right */
                float err = (float)left - (float)right;
 8001d8e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001d90:	ee07 3a90 	vmov	s15, r3
 8001d94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d98:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d9a:	ee07 3a90 	vmov	s15, r3
 8001d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001da2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001da6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

                /* deadband to avoid dithering */
                if (err > -CENTER_DEADBAND_CM && err < CENTER_DEADBAND_CM)
 8001daa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001dae:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dba:	dd0b      	ble.n	8001dd4 <WallAvoidance_Task+0x1d8>
 8001dbc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001dc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001dc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dcc:	d502      	bpl.n	8001dd4 <WallAvoidance_Task+0x1d8>
                    err = 0.0f;
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	637b      	str	r3, [r7, #52]	@ 0x34

                /* PID terms */
                float d = (err - last_err) / dt;
 8001dd4:	4b43      	ldr	r3, [pc, #268]	@ (8001ee4 <WallAvoidance_Task+0x2e8>)
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001dde:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001de2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dea:	edc7 7a06 	vstr	s15, [r7, #24]
                pid_i += err * dt;
 8001dee:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001df2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001df6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dfa:	4b39      	ldr	r3, [pc, #228]	@ (8001ee0 <WallAvoidance_Task+0x2e4>)
 8001dfc:	edd3 7a00 	vldr	s15, [r3]
 8001e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e04:	4b36      	ldr	r3, [pc, #216]	@ (8001ee0 <WallAvoidance_Task+0x2e4>)
 8001e06:	edc3 7a00 	vstr	s15, [r3]
                    if (pid_i > i_max) pid_i = i_max;
                    if (pid_i < -i_max) pid_i = -i_max;
                }
                else
                {
                    pid_i = 0.0f;
 8001e0a:	4b35      	ldr	r3, [pc, #212]	@ (8001ee0 <WallAvoidance_Task+0x2e4>)
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
                }

                float corr = CENTER_PID_KP * err + CENTER_PID_KI * pid_i + CENTER_PID_KD * d;
 8001e12:	4b33      	ldr	r3, [pc, #204]	@ (8001ee0 <WallAvoidance_Task+0x2e4>)
 8001e14:	edd3 7a00 	vldr	s15, [r3]
 8001e18:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001eec <WallAvoidance_Task+0x2f0>
 8001e1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e20:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e28:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e2c:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8001ef0 <WallAvoidance_Task+0x2f4>
 8001e30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e38:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

                /* clamp correction */
                if (corr > CENTER_CORR_MAX) corr = CENTER_CORR_MAX;
 8001e3c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001e40:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001ef4 <WallAvoidance_Task+0x2f8>
 8001e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4c:	dd01      	ble.n	8001e52 <WallAvoidance_Task+0x256>
 8001e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef8 <WallAvoidance_Task+0x2fc>)
 8001e50:	633b      	str	r3, [r7, #48]	@ 0x30
                if (corr < -CENTER_CORR_MAX) corr = -CENTER_CORR_MAX;
 8001e52:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001e56:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001efc <WallAvoidance_Task+0x300>
 8001e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e62:	d501      	bpl.n	8001e68 <WallAvoidance_Task+0x26c>
 8001e64:	4b26      	ldr	r3, [pc, #152]	@ (8001f00 <WallAvoidance_Task+0x304>)
 8001e66:	633b      	str	r3, [r7, #48]	@ 0x30

                /* symmetric differential application */
                left_cmd  = (int)((float)base - corr);
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e72:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e7e:	ee17 3a90 	vmov	r3, s15
 8001e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
                right_cmd = (int)((float)base + corr);
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	ee07 3a90 	vmov	s15, r3
 8001e8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e8e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e9a:	ee17 3a90 	vmov	r3, s15
 8001e9e:	63bb      	str	r3, [r7, #56]	@ 0x38

                last_err = err;
 8001ea0:	4a10      	ldr	r2, [pc, #64]	@ (8001ee4 <WallAvoidance_Task+0x2e8>)
 8001ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ea4:	6013      	str	r3, [r2, #0]
            {
 8001ea6:	e04f      	b.n	8001f48 <WallAvoidance_Task+0x34c>
 8001ea8:	3d4ccccd 	.word	0x3d4ccccd
 8001eac:	08006438 	.word	0x08006438
 8001eb0:	200003d4 	.word	0x200003d4
 8001eb4:	200003d6 	.word	0x200003d6
 8001eb8:	200003d8 	.word	0x200003d8
 8001ebc:	cccccccd 	.word	0xcccccccd
 8001ec0:	08006454 	.word	0x08006454
 8001ec4:	0800645c 	.word	0x0800645c
 8001ec8:	08006464 	.word	0x08006464
 8001ecc:	08006470 	.word	0x08006470
 8001ed0:	08006478 	.word	0x08006478
 8001ed4:	40011000 	.word	0x40011000
 8001ed8:	20000002 	.word	0x20000002
 8001edc:	20000380 	.word	0x20000380
 8001ee0:	200003dc 	.word	0x200003dc
 8001ee4:	200003e0 	.word	0x200003e0
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	00000000 	.word	0x00000000
 8001ef0:	3e4ccccd 	.word	0x3e4ccccd
 8001ef4:	42200000 	.word	0x42200000
 8001ef8:	42200000 	.word	0x42200000
 8001efc:	c2200000 	.word	0xc2200000
 8001f00:	c2200000 	.word	0xc2200000
            }
            else
#endif /* CENTERING_PID_ENABLED */
            {
                /* Fallback: single-sensor proportional nudge away */
                if (left > 0 && left < COLLISION_DISTANCE_SLOW)
 8001f04:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00d      	beq.n	8001f26 <WallAvoidance_Task+0x32a>
 8001f0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d80a      	bhi.n	8001f26 <WallAvoidance_Task+0x32a>
                {
                    int delta_cm = (int)COLLISION_DISTANCE_SLOW - (int)left;
 8001f10:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001f12:	f1c3 0305 	rsb	r3, r3, #5
 8001f16:	617b      	str	r3, [r7, #20]
                    int corr = delta_cm * WALL_CORR_GAIN_PCT_PER_CM;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	613b      	str	r3, [r7, #16]
                    left_cmd -= corr;
 8001f1e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
                }

                if (right > 0 && right < COLLISION_DISTANCE_SLOW)
 8001f26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00d      	beq.n	8001f48 <WallAvoidance_Task+0x34c>
 8001f2c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d80a      	bhi.n	8001f48 <WallAvoidance_Task+0x34c>
                {
                    int delta_cm = (int)COLLISION_DISTANCE_SLOW - (int)right;
 8001f32:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001f34:	f1c3 0305 	rsb	r3, r3, #5
 8001f38:	60fb      	str	r3, [r7, #12]
                    int corr = delta_cm * WALL_CORR_GAIN_PCT_PER_CM;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
                    right_cmd -= corr;
 8001f40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	63bb      	str	r3, [r7, #56]	@ 0x38
                }
            }

            /* Clamp speeds */
            if (left_cmd < 0) left_cmd = 0;
 8001f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	da01      	bge.n	8001f52 <WallAvoidance_Task+0x356>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (left_cmd > 100) left_cmd = 100;
 8001f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f54:	2b64      	cmp	r3, #100	@ 0x64
 8001f56:	dd01      	ble.n	8001f5c <WallAvoidance_Task+0x360>
 8001f58:	2364      	movs	r3, #100	@ 0x64
 8001f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (right_cmd < 0) right_cmd = 0;
 8001f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	da01      	bge.n	8001f66 <WallAvoidance_Task+0x36a>
 8001f62:	2300      	movs	r3, #0
 8001f64:	63bb      	str	r3, [r7, #56]	@ 0x38
            if (right_cmd > 100) right_cmd = 100;
 8001f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f68:	2b64      	cmp	r3, #100	@ 0x64
 8001f6a:	dd01      	ble.n	8001f70 <WallAvoidance_Task+0x374>
 8001f6c:	2364      	movs	r3, #100	@ 0x64
 8001f6e:	63bb      	str	r3, [r7, #56]	@ 0x38

            /* Only update if any correction applied */
            if (left_cmd != base || right_cmd != base)
 8001f70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d103      	bne.n	8001f80 <WallAvoidance_Task+0x384>
 8001f78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d011      	beq.n	8001fa4 <WallAvoidance_Task+0x3a8>
            {
                Motor_ForwardDifferential((uint8_t)left_cmd, (uint8_t)right_cmd);
 8001f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fa82 	bl	8001494 <Motor_ForwardDifferential>
        {
 8001f90:	e008      	b.n	8001fa4 <WallAvoidance_Task+0x3a8>
            }
        }
        else
        {
            /* Not actively centering: reset PID state */
            pid_i = 0.0f;
 8001f92:	4b07      	ldr	r3, [pc, #28]	@ (8001fb0 <WallAvoidance_Task+0x3b4>)
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
            last_err = 0.0f;
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <WallAvoidance_Task+0x3b8>)
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	e000      	b.n	8001fa6 <WallAvoidance_Task+0x3aa>
        {
 8001fa4:	bf00      	nop
        }

        osDelay(ULTRASONIC_MEASURE_INTERVAL_MS);
 8001fa6:	2032      	movs	r0, #50	@ 0x32
 8001fa8:	f001 fe26 	bl	8003bf8 <osDelay>
    {
 8001fac:	e62f      	b.n	8001c0e <WallAvoidance_Task+0x12>
 8001fae:	bf00      	nop
 8001fb0:	200003dc 	.word	0x200003dc
 8001fb4:	200003e0 	.word	0x200003e0

08001fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ff0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fbc:	f7ff fb5e 	bl	800167c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fc0:	480c      	ldr	r0, [pc, #48]	@ (8001ff4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fc2:	490d      	ldr	r1, [pc, #52]	@ (8001ff8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001ffc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc8:	e002      	b.n	8001fd0 <LoopCopyDataInit>

08001fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fce:	3304      	adds	r3, #4

08001fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd4:	d3f9      	bcc.n	8001fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002000 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fd8:	4c0a      	ldr	r4, [pc, #40]	@ (8002004 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fdc:	e001      	b.n	8001fe2 <LoopFillZerobss>

08001fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe0:	3204      	adds	r2, #4

08001fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe4:	d3fb      	bcc.n	8001fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fe6:	f004 f8bd 	bl	8006164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fea:	f7fe fda1 	bl	8000b30 <main>
  bx  lr    
 8001fee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ff0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001ffc:	080064b0 	.word	0x080064b0
  ldr r2, =_sbss
 8002000:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002004:	2000167c 	.word	0x2000167c

08002008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002008:	e7fe      	b.n	8002008 <ADC_IRQHandler>
	...

0800200c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002010:	4b0e      	ldr	r3, [pc, #56]	@ (800204c <HAL_Init+0x40>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0d      	ldr	r2, [pc, #52]	@ (800204c <HAL_Init+0x40>)
 8002016:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800201a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800201c:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <HAL_Init+0x40>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <HAL_Init+0x40>)
 8002022:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002028:	4b08      	ldr	r3, [pc, #32]	@ (800204c <HAL_Init+0x40>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a07      	ldr	r2, [pc, #28]	@ (800204c <HAL_Init+0x40>)
 800202e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002034:	2003      	movs	r0, #3
 8002036:	f000 f8fc 	bl	8002232 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800203a:	200f      	movs	r0, #15
 800203c:	f7ff fa7c 	bl	8001538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002040:	f7ff fa4e 	bl	80014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023c00 	.word	0x40023c00

08002050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002054:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <HAL_IncTick+0x20>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <HAL_IncTick+0x24>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4413      	add	r3, r2
 8002060:	4a04      	ldr	r2, [pc, #16]	@ (8002074 <HAL_IncTick+0x24>)
 8002062:	6013      	str	r3, [r2, #0]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	2000000c 	.word	0x2000000c
 8002074:	200003e4 	.word	0x200003e4

08002078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return uwTick;
 800207c:	4b03      	ldr	r3, [pc, #12]	@ (800208c <HAL_GetTick+0x14>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	200003e4 	.word	0x200003e4

08002090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002098:	f7ff ffee 	bl	8002078 <HAL_GetTick>
 800209c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a8:	d005      	beq.n	80020b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020aa:	4b0a      	ldr	r3, [pc, #40]	@ (80020d4 <HAL_Delay+0x44>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4413      	add	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020b6:	bf00      	nop
 80020b8:	f7ff ffde 	bl	8002078 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d8f7      	bhi.n	80020b8 <HAL_Delay+0x28>
  {
  }
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	2000000c 	.word	0x2000000c

080020d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e8:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <__NVIC_SetPriorityGrouping+0x44>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020f4:	4013      	ands	r3, r2
 80020f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002100:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210a:	4a04      	ldr	r2, [pc, #16]	@ (800211c <__NVIC_SetPriorityGrouping+0x44>)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	60d3      	str	r3, [r2, #12]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002124:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <__NVIC_GetPriorityGrouping+0x18>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	f003 0307 	and.w	r3, r3, #7
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	2b00      	cmp	r3, #0
 800214c:	db0b      	blt.n	8002166 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	f003 021f 	and.w	r2, r3, #31
 8002154:	4907      	ldr	r1, [pc, #28]	@ (8002174 <__NVIC_EnableIRQ+0x38>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	2001      	movs	r0, #1
 800215e:	fa00 f202 	lsl.w	r2, r0, r2
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000e100 	.word	0xe000e100

08002178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	2b00      	cmp	r3, #0
 800218a:	db0a      	blt.n	80021a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	490c      	ldr	r1, [pc, #48]	@ (80021c4 <__NVIC_SetPriority+0x4c>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	0112      	lsls	r2, r2, #4
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	440b      	add	r3, r1
 800219c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a0:	e00a      	b.n	80021b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4908      	ldr	r1, [pc, #32]	@ (80021c8 <__NVIC_SetPriority+0x50>)
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3b04      	subs	r3, #4
 80021b0:	0112      	lsls	r2, r2, #4
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	440b      	add	r3, r1
 80021b6:	761a      	strb	r2, [r3, #24]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000e100 	.word	0xe000e100
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	@ 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f1c3 0307 	rsb	r3, r3, #7
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	bf28      	it	cs
 80021ea:	2304      	movcs	r3, #4
 80021ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3304      	adds	r3, #4
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d902      	bls.n	80021fc <NVIC_EncodePriority+0x30>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3b03      	subs	r3, #3
 80021fa:	e000      	b.n	80021fe <NVIC_EncodePriority+0x32>
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	f04f 32ff 	mov.w	r2, #4294967295
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	401a      	ands	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002214:	f04f 31ff 	mov.w	r1, #4294967295
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	43d9      	mvns	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	4313      	orrs	r3, r2
         );
}
 8002226:	4618      	mov	r0, r3
 8002228:	3724      	adds	r7, #36	@ 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff ff4c 	bl	80020d8 <__NVIC_SetPriorityGrouping>
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800225a:	f7ff ff61 	bl	8002120 <__NVIC_GetPriorityGrouping>
 800225e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	6978      	ldr	r0, [r7, #20]
 8002266:	f7ff ffb1 	bl	80021cc <NVIC_EncodePriority>
 800226a:	4602      	mov	r2, r0
 800226c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ff80 	bl	8002178 <__NVIC_SetPriority>
}
 8002278:	bf00      	nop
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff ff54 	bl	800213c <__NVIC_EnableIRQ>
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	@ 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	e159      	b.n	800256c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b8:	2201      	movs	r2, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	f040 8148 	bne.w	8002566 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d005      	beq.n	80022ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d130      	bne.n	8002350 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002324:	2201      	movs	r2, #1
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 0201 	and.w	r2, r3, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b03      	cmp	r3, #3
 800235a:	d017      	beq.n	800238c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d123      	bne.n	80023e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	08da      	lsrs	r2, r3, #3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3208      	adds	r2, #8
 80023a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	220f      	movs	r2, #15
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	08da      	lsrs	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3208      	adds	r2, #8
 80023da:	69b9      	ldr	r1, [r7, #24]
 80023dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0203 	and.w	r2, r3, #3
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80a2 	beq.w	8002566 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b57      	ldr	r3, [pc, #348]	@ (8002584 <HAL_GPIO_Init+0x2e8>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242a:	4a56      	ldr	r2, [pc, #344]	@ (8002584 <HAL_GPIO_Init+0x2e8>)
 800242c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002430:	6453      	str	r3, [r2, #68]	@ 0x44
 8002432:	4b54      	ldr	r3, [pc, #336]	@ (8002584 <HAL_GPIO_Init+0x2e8>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800243e:	4a52      	ldr	r2, [pc, #328]	@ (8002588 <HAL_GPIO_Init+0x2ec>)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	220f      	movs	r2, #15
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a49      	ldr	r2, [pc, #292]	@ (800258c <HAL_GPIO_Init+0x2f0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d019      	beq.n	800249e <HAL_GPIO_Init+0x202>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a48      	ldr	r2, [pc, #288]	@ (8002590 <HAL_GPIO_Init+0x2f4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_GPIO_Init+0x1fe>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a47      	ldr	r2, [pc, #284]	@ (8002594 <HAL_GPIO_Init+0x2f8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00d      	beq.n	8002496 <HAL_GPIO_Init+0x1fa>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a46      	ldr	r2, [pc, #280]	@ (8002598 <HAL_GPIO_Init+0x2fc>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d007      	beq.n	8002492 <HAL_GPIO_Init+0x1f6>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a45      	ldr	r2, [pc, #276]	@ (800259c <HAL_GPIO_Init+0x300>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d101      	bne.n	800248e <HAL_GPIO_Init+0x1f2>
 800248a:	2304      	movs	r3, #4
 800248c:	e008      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 800248e:	2307      	movs	r3, #7
 8002490:	e006      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 8002492:	2303      	movs	r3, #3
 8002494:	e004      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 8002496:	2302      	movs	r3, #2
 8002498:	e002      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 800249e:	2300      	movs	r3, #0
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	f002 0203 	and.w	r2, r2, #3
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	4093      	lsls	r3, r2
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b0:	4935      	ldr	r1, [pc, #212]	@ (8002588 <HAL_GPIO_Init+0x2ec>)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	3302      	adds	r3, #2
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024be:	4b38      	ldr	r3, [pc, #224]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024e2:	4a2f      	ldr	r2, [pc, #188]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e8:	4b2d      	ldr	r3, [pc, #180]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800250c:	4a24      	ldr	r2, [pc, #144]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002512:	4b23      	ldr	r3, [pc, #140]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002536:	4a1a      	ldr	r2, [pc, #104]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800253c:	4b18      	ldr	r3, [pc, #96]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002560:	4a0f      	ldr	r2, [pc, #60]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3301      	adds	r3, #1
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	2b0f      	cmp	r3, #15
 8002570:	f67f aea2 	bls.w	80022b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3724      	adds	r7, #36	@ 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	40013800 	.word	0x40013800
 800258c:	40020000 	.word	0x40020000
 8002590:	40020400 	.word	0x40020400
 8002594:	40020800 	.word	0x40020800
 8002598:	40020c00 	.word	0x40020c00
 800259c:	40021000 	.word	0x40021000
 80025a0:	40013c00 	.word	0x40013c00

080025a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	887b      	ldrh	r3, [r7, #2]
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
 80025c0:	e001      	b.n	80025c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025c2:	2300      	movs	r3, #0
 80025c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	807b      	strh	r3, [r7, #2]
 80025e0:	4613      	mov	r3, r2
 80025e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025e4:	787b      	ldrb	r3, [r7, #1]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ea:	887a      	ldrh	r2, [r7, #2]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025f0:	e003      	b.n	80025fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025f2:	887b      	ldrh	r3, [r7, #2]
 80025f4:	041a      	lsls	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	619a      	str	r2, [r3, #24]
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002606:	b480      	push	{r7}
 8002608:	b085      	sub	sp, #20
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	460b      	mov	r3, r1
 8002610:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002618:	887a      	ldrh	r2, [r7, #2]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4013      	ands	r3, r2
 800261e:	041a      	lsls	r2, r3, #16
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	43d9      	mvns	r1, r3
 8002624:	887b      	ldrh	r3, [r7, #2]
 8002626:	400b      	ands	r3, r1
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	619a      	str	r2, [r3, #24]
}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e267      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d075      	beq.n	8002746 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800265a:	4b88      	ldr	r3, [pc, #544]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b04      	cmp	r3, #4
 8002664:	d00c      	beq.n	8002680 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002666:	4b85      	ldr	r3, [pc, #532]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800266e:	2b08      	cmp	r3, #8
 8002670:	d112      	bne.n	8002698 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002672:	4b82      	ldr	r3, [pc, #520]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800267a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800267e:	d10b      	bne.n	8002698 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	4b7e      	ldr	r3, [pc, #504]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d05b      	beq.n	8002744 <HAL_RCC_OscConfig+0x108>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d157      	bne.n	8002744 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e242      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026a0:	d106      	bne.n	80026b0 <HAL_RCC_OscConfig+0x74>
 80026a2:	4b76      	ldr	r3, [pc, #472]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a75      	ldr	r2, [pc, #468]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e01d      	b.n	80026ec <HAL_RCC_OscConfig+0xb0>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x98>
 80026ba:	4b70      	ldr	r3, [pc, #448]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a6f      	ldr	r2, [pc, #444]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80026c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b6d      	ldr	r3, [pc, #436]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a6c      	ldr	r2, [pc, #432]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e00b      	b.n	80026ec <HAL_RCC_OscConfig+0xb0>
 80026d4:	4b69      	ldr	r3, [pc, #420]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a68      	ldr	r2, [pc, #416]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80026da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b66      	ldr	r3, [pc, #408]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a65      	ldr	r2, [pc, #404]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80026e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d013      	beq.n	800271c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7ff fcc0 	bl	8002078 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026fc:	f7ff fcbc 	bl	8002078 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	@ 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e207      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b5b      	ldr	r3, [pc, #364]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0xc0>
 800271a:	e014      	b.n	8002746 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7ff fcac 	bl	8002078 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7ff fca8 	bl	8002078 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	@ 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e1f3      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002736:	4b51      	ldr	r3, [pc, #324]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0xe8>
 8002742:	e000      	b.n	8002746 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d063      	beq.n	800281a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002752:	4b4a      	ldr	r3, [pc, #296]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800275e:	4b47      	ldr	r3, [pc, #284]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002766:	2b08      	cmp	r3, #8
 8002768:	d11c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800276a:	4b44      	ldr	r3, [pc, #272]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d116      	bne.n	80027a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002776:	4b41      	ldr	r3, [pc, #260]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_RCC_OscConfig+0x152>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d001      	beq.n	800278e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e1c7      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278e:	4b3b      	ldr	r3, [pc, #236]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4937      	ldr	r1, [pc, #220]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a2:	e03a      	b.n	800281a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d020      	beq.n	80027ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ac:	4b34      	ldr	r3, [pc, #208]	@ (8002880 <HAL_RCC_OscConfig+0x244>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7ff fc61 	bl	8002078 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ba:	f7ff fc5d 	bl	8002078 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e1a8      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	4b2b      	ldr	r3, [pc, #172]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d8:	4b28      	ldr	r3, [pc, #160]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4925      	ldr	r1, [pc, #148]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]
 80027ec:	e015      	b.n	800281a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ee:	4b24      	ldr	r3, [pc, #144]	@ (8002880 <HAL_RCC_OscConfig+0x244>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7ff fc40 	bl	8002078 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fc:	f7ff fc3c 	bl	8002078 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e187      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280e:	4b1b      	ldr	r3, [pc, #108]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d036      	beq.n	8002894 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d016      	beq.n	800285c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282e:	4b15      	ldr	r3, [pc, #84]	@ (8002884 <HAL_RCC_OscConfig+0x248>)
 8002830:	2201      	movs	r2, #1
 8002832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7ff fc20 	bl	8002078 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283c:	f7ff fc1c 	bl	8002078 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e167      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284e:	4b0b      	ldr	r3, [pc, #44]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x200>
 800285a:	e01b      	b.n	8002894 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800285c:	4b09      	ldr	r3, [pc, #36]	@ (8002884 <HAL_RCC_OscConfig+0x248>)
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002862:	f7ff fc09 	bl	8002078 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002868:	e00e      	b.n	8002888 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286a:	f7ff fc05 	bl	8002078 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d907      	bls.n	8002888 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e150      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
 800287c:	40023800 	.word	0x40023800
 8002880:	42470000 	.word	0x42470000
 8002884:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002888:	4b88      	ldr	r3, [pc, #544]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 800288a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1ea      	bne.n	800286a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 8097 	beq.w	80029d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a2:	2300      	movs	r3, #0
 80028a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a6:	4b81      	ldr	r3, [pc, #516]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10f      	bne.n	80028d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	4b7d      	ldr	r3, [pc, #500]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	4a7c      	ldr	r2, [pc, #496]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 80028bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028c2:	4b7a      	ldr	r3, [pc, #488]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ce:	2301      	movs	r3, #1
 80028d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d2:	4b77      	ldr	r3, [pc, #476]	@ (8002ab0 <HAL_RCC_OscConfig+0x474>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d118      	bne.n	8002910 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028de:	4b74      	ldr	r3, [pc, #464]	@ (8002ab0 <HAL_RCC_OscConfig+0x474>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a73      	ldr	r2, [pc, #460]	@ (8002ab0 <HAL_RCC_OscConfig+0x474>)
 80028e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ea:	f7ff fbc5 	bl	8002078 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f2:	f7ff fbc1 	bl	8002078 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e10c      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002904:	4b6a      	ldr	r3, [pc, #424]	@ (8002ab0 <HAL_RCC_OscConfig+0x474>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d106      	bne.n	8002926 <HAL_RCC_OscConfig+0x2ea>
 8002918:	4b64      	ldr	r3, [pc, #400]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291c:	4a63      	ldr	r2, [pc, #396]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6713      	str	r3, [r2, #112]	@ 0x70
 8002924:	e01c      	b.n	8002960 <HAL_RCC_OscConfig+0x324>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b05      	cmp	r3, #5
 800292c:	d10c      	bne.n	8002948 <HAL_RCC_OscConfig+0x30c>
 800292e:	4b5f      	ldr	r3, [pc, #380]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002932:	4a5e      	ldr	r2, [pc, #376]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	6713      	str	r3, [r2, #112]	@ 0x70
 800293a:	4b5c      	ldr	r3, [pc, #368]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293e:	4a5b      	ldr	r2, [pc, #364]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6713      	str	r3, [r2, #112]	@ 0x70
 8002946:	e00b      	b.n	8002960 <HAL_RCC_OscConfig+0x324>
 8002948:	4b58      	ldr	r3, [pc, #352]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294c:	4a57      	ldr	r2, [pc, #348]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	6713      	str	r3, [r2, #112]	@ 0x70
 8002954:	4b55      	ldr	r3, [pc, #340]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002958:	4a54      	ldr	r2, [pc, #336]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 800295a:	f023 0304 	bic.w	r3, r3, #4
 800295e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d015      	beq.n	8002994 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7ff fb86 	bl	8002078 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296e:	e00a      	b.n	8002986 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002970:	f7ff fb82 	bl	8002078 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e0cb      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002986:	4b49      	ldr	r3, [pc, #292]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 8002988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0ee      	beq.n	8002970 <HAL_RCC_OscConfig+0x334>
 8002992:	e014      	b.n	80029be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002994:	f7ff fb70 	bl	8002078 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299a:	e00a      	b.n	80029b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299c:	f7ff fb6c 	bl	8002078 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e0b5      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b2:	4b3e      	ldr	r3, [pc, #248]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1ee      	bne.n	800299c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029be:	7dfb      	ldrb	r3, [r7, #23]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d105      	bne.n	80029d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c4:	4b39      	ldr	r3, [pc, #228]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	4a38      	ldr	r2, [pc, #224]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 80029ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80a1 	beq.w	8002b1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029da:	4b34      	ldr	r3, [pc, #208]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d05c      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d141      	bne.n	8002a72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ee:	4b31      	ldr	r3, [pc, #196]	@ (8002ab4 <HAL_RCC_OscConfig+0x478>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7ff fb40 	bl	8002078 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fc:	f7ff fb3c 	bl	8002078 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e087      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0e:	4b27      	ldr	r3, [pc, #156]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a28:	019b      	lsls	r3, r3, #6
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a30:	085b      	lsrs	r3, r3, #1
 8002a32:	3b01      	subs	r3, #1
 8002a34:	041b      	lsls	r3, r3, #16
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	061b      	lsls	r3, r3, #24
 8002a3e:	491b      	ldr	r1, [pc, #108]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a44:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab4 <HAL_RCC_OscConfig+0x478>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4a:	f7ff fb15 	bl	8002078 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a52:	f7ff fb11 	bl	8002078 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e05c      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a64:	4b11      	ldr	r3, [pc, #68]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x416>
 8002a70:	e054      	b.n	8002b1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a72:	4b10      	ldr	r3, [pc, #64]	@ (8002ab4 <HAL_RCC_OscConfig+0x478>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a78:	f7ff fafe 	bl	8002078 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a80:	f7ff fafa 	bl	8002078 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e045      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a92:	4b06      	ldr	r3, [pc, #24]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x444>
 8002a9e:	e03d      	b.n	8002b1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d107      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e038      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40007000 	.word	0x40007000
 8002ab4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b28 <HAL_RCC_OscConfig+0x4ec>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d028      	beq.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d121      	bne.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d11a      	bne.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ae8:	4013      	ands	r3, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002aee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d111      	bne.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afe:	085b      	lsrs	r3, r3, #1
 8002b00:	3b01      	subs	r3, #1
 8002b02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d107      	bne.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800

08002b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0cc      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b40:	4b68      	ldr	r3, [pc, #416]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d90c      	bls.n	8002b68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	4b65      	ldr	r3, [pc, #404]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b63      	ldr	r3, [pc, #396]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0b8      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d020      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b80:	4b59      	ldr	r3, [pc, #356]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	4a58      	ldr	r2, [pc, #352]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b98:	4b53      	ldr	r3, [pc, #332]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	4a52      	ldr	r2, [pc, #328]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ba2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba4:	4b50      	ldr	r3, [pc, #320]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	494d      	ldr	r1, [pc, #308]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d044      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	4b47      	ldr	r3, [pc, #284]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d119      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e07f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d003      	beq.n	8002bea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d107      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bea:	4b3f      	ldr	r3, [pc, #252]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e06f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e067      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c0a:	4b37      	ldr	r3, [pc, #220]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f023 0203 	bic.w	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	4934      	ldr	r1, [pc, #208]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c1c:	f7ff fa2c 	bl	8002078 <HAL_GetTick>
 8002c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c24:	f7ff fa28 	bl	8002078 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e04f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 020c 	and.w	r2, r3, #12
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d1eb      	bne.n	8002c24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c4c:	4b25      	ldr	r3, [pc, #148]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d20c      	bcs.n	8002c74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5a:	4b22      	ldr	r3, [pc, #136]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c62:	4b20      	ldr	r3, [pc, #128]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e032      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c80:	4b19      	ldr	r3, [pc, #100]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4916      	ldr	r1, [pc, #88]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c9e:	4b12      	ldr	r3, [pc, #72]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	490e      	ldr	r1, [pc, #56]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cb2:	f000 f821 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	490a      	ldr	r1, [pc, #40]	@ (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002cc4:	5ccb      	ldrb	r3, [r1, r3]
 8002cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cca:	4a09      	ldr	r2, [pc, #36]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cce:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe fc30 	bl	8001538 <HAL_InitTick>

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023c00 	.word	0x40023c00
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	08006488 	.word	0x08006488
 8002cf0:	20000004 	.word	0x20000004
 8002cf4:	20000008 	.word	0x20000008

08002cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cfc:	b090      	sub	sp, #64	@ 0x40
 8002cfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d10:	4b59      	ldr	r3, [pc, #356]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d00d      	beq.n	8002d38 <HAL_RCC_GetSysClockFreq+0x40>
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	f200 80a1 	bhi.w	8002e64 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq+0x34>
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d003      	beq.n	8002d32 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d2a:	e09b      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d2c:	4b53      	ldr	r3, [pc, #332]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x184>)
 8002d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d30:	e09b      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d32:	4b53      	ldr	r3, [pc, #332]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d34:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d36:	e098      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d38:	4b4f      	ldr	r3, [pc, #316]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d40:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d42:	4b4d      	ldr	r3, [pc, #308]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d028      	beq.n	8002da0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	099b      	lsrs	r3, r3, #6
 8002d54:	2200      	movs	r2, #0
 8002d56:	623b      	str	r3, [r7, #32]
 8002d58:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d60:	2100      	movs	r1, #0
 8002d62:	4b47      	ldr	r3, [pc, #284]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d64:	fb03 f201 	mul.w	r2, r3, r1
 8002d68:	2300      	movs	r3, #0
 8002d6a:	fb00 f303 	mul.w	r3, r0, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	4a43      	ldr	r2, [pc, #268]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d72:	fba0 1202 	umull	r1, r2, r0, r2
 8002d76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d78:	460a      	mov	r2, r1
 8002d7a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002d7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d7e:	4413      	add	r3, r2
 8002d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d84:	2200      	movs	r2, #0
 8002d86:	61bb      	str	r3, [r7, #24]
 8002d88:	61fa      	str	r2, [r7, #28]
 8002d8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d92:	f7fd fa25 	bl	80001e0 <__aeabi_uldivmod>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d9e:	e053      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da0:	4b35      	ldr	r3, [pc, #212]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	099b      	lsrs	r3, r3, #6
 8002da6:	2200      	movs	r2, #0
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	617a      	str	r2, [r7, #20]
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002db2:	f04f 0b00 	mov.w	fp, #0
 8002db6:	4652      	mov	r2, sl
 8002db8:	465b      	mov	r3, fp
 8002dba:	f04f 0000 	mov.w	r0, #0
 8002dbe:	f04f 0100 	mov.w	r1, #0
 8002dc2:	0159      	lsls	r1, r3, #5
 8002dc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dc8:	0150      	lsls	r0, r2, #5
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	ebb2 080a 	subs.w	r8, r2, sl
 8002dd2:	eb63 090b 	sbc.w	r9, r3, fp
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002de2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002de6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002dea:	ebb2 0408 	subs.w	r4, r2, r8
 8002dee:	eb63 0509 	sbc.w	r5, r3, r9
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	00eb      	lsls	r3, r5, #3
 8002dfc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e00:	00e2      	lsls	r2, r4, #3
 8002e02:	4614      	mov	r4, r2
 8002e04:	461d      	mov	r5, r3
 8002e06:	eb14 030a 	adds.w	r3, r4, sl
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	eb45 030b 	adc.w	r3, r5, fp
 8002e10:	607b      	str	r3, [r7, #4]
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e1e:	4629      	mov	r1, r5
 8002e20:	028b      	lsls	r3, r1, #10
 8002e22:	4621      	mov	r1, r4
 8002e24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e28:	4621      	mov	r1, r4
 8002e2a:	028a      	lsls	r2, r1, #10
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4619      	mov	r1, r3
 8002e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e32:	2200      	movs	r2, #0
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	60fa      	str	r2, [r7, #12]
 8002e38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e3c:	f7fd f9d0 	bl	80001e0 <__aeabi_uldivmod>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4613      	mov	r3, r2
 8002e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e48:	4b0b      	ldr	r3, [pc, #44]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	0c1b      	lsrs	r3, r3, #16
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	3301      	adds	r3, #1
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002e58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e62:	e002      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e64:	4b05      	ldr	r3, [pc, #20]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x184>)
 8002e66:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3740      	adds	r7, #64	@ 0x40
 8002e70:	46bd      	mov	sp, r7
 8002e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	00f42400 	.word	0x00f42400
 8002e80:	017d7840 	.word	0x017d7840

08002e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e88:	4b03      	ldr	r3, [pc, #12]	@ (8002e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20000004 	.word	0x20000004

08002e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ea0:	f7ff fff0 	bl	8002e84 <HAL_RCC_GetHCLKFreq>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	4b05      	ldr	r3, [pc, #20]	@ (8002ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	0a9b      	lsrs	r3, r3, #10
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	4903      	ldr	r1, [pc, #12]	@ (8002ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eb2:	5ccb      	ldrb	r3, [r1, r3]
 8002eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	08006498 	.word	0x08006498

08002ec4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	220f      	movs	r2, #15
 8002ed2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ed4:	4b12      	ldr	r3, [pc, #72]	@ (8002f20 <HAL_RCC_GetClockConfig+0x5c>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 0203 	and.w	r2, r3, #3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f20 <HAL_RCC_GetClockConfig+0x5c>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002eec:	4b0c      	ldr	r3, [pc, #48]	@ (8002f20 <HAL_RCC_GetClockConfig+0x5c>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ef8:	4b09      	ldr	r3, [pc, #36]	@ (8002f20 <HAL_RCC_GetClockConfig+0x5c>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	08db      	lsrs	r3, r3, #3
 8002efe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f06:	4b07      	ldr	r3, [pc, #28]	@ (8002f24 <HAL_RCC_GetClockConfig+0x60>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0207 	and.w	r2, r3, #7
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	601a      	str	r2, [r3, #0]
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40023c00 	.word	0x40023c00

08002f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e041      	b.n	8002fbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f839 	bl	8002fc6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3304      	adds	r3, #4
 8002f64:	4619      	mov	r1, r3
 8002f66:	4610      	mov	r0, r2
 8002f68:	f000 fb7e 	bl	8003668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d001      	beq.n	8002ff4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e044      	b.n	800307e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a1e      	ldr	r2, [pc, #120]	@ (800308c <HAL_TIM_Base_Start_IT+0xb0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d018      	beq.n	8003048 <HAL_TIM_Base_Start_IT+0x6c>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800301e:	d013      	beq.n	8003048 <HAL_TIM_Base_Start_IT+0x6c>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1a      	ldr	r2, [pc, #104]	@ (8003090 <HAL_TIM_Base_Start_IT+0xb4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00e      	beq.n	8003048 <HAL_TIM_Base_Start_IT+0x6c>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a19      	ldr	r2, [pc, #100]	@ (8003094 <HAL_TIM_Base_Start_IT+0xb8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d009      	beq.n	8003048 <HAL_TIM_Base_Start_IT+0x6c>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a17      	ldr	r2, [pc, #92]	@ (8003098 <HAL_TIM_Base_Start_IT+0xbc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d004      	beq.n	8003048 <HAL_TIM_Base_Start_IT+0x6c>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a16      	ldr	r2, [pc, #88]	@ (800309c <HAL_TIM_Base_Start_IT+0xc0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d111      	bne.n	800306c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b06      	cmp	r3, #6
 8003058:	d010      	beq.n	800307c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f042 0201 	orr.w	r2, r2, #1
 8003068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800306a:	e007      	b.n	800307c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40010000 	.word	0x40010000
 8003090:	40000400 	.word	0x40000400
 8003094:	40000800 	.word	0x40000800
 8003098:	40000c00 	.word	0x40000c00
 800309c:	40014000 	.word	0x40014000

080030a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e041      	b.n	8003136 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f839 	bl	800313e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3304      	adds	r3, #4
 80030dc:	4619      	mov	r1, r3
 80030de:	4610      	mov	r0, r2
 80030e0:	f000 fac2 	bl	8003668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
	...

08003154 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d109      	bne.n	8003178 <HAL_TIM_PWM_Start+0x24>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b01      	cmp	r3, #1
 800316e:	bf14      	ite	ne
 8003170:	2301      	movne	r3, #1
 8003172:	2300      	moveq	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	e022      	b.n	80031be <HAL_TIM_PWM_Start+0x6a>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2b04      	cmp	r3, #4
 800317c:	d109      	bne.n	8003192 <HAL_TIM_PWM_Start+0x3e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b01      	cmp	r3, #1
 8003188:	bf14      	ite	ne
 800318a:	2301      	movne	r3, #1
 800318c:	2300      	moveq	r3, #0
 800318e:	b2db      	uxtb	r3, r3
 8003190:	e015      	b.n	80031be <HAL_TIM_PWM_Start+0x6a>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b08      	cmp	r3, #8
 8003196:	d109      	bne.n	80031ac <HAL_TIM_PWM_Start+0x58>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	bf14      	ite	ne
 80031a4:	2301      	movne	r3, #1
 80031a6:	2300      	moveq	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	e008      	b.n	80031be <HAL_TIM_PWM_Start+0x6a>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	bf14      	ite	ne
 80031b8:	2301      	movne	r3, #1
 80031ba:	2300      	moveq	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e068      	b.n	8003298 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d104      	bne.n	80031d6 <HAL_TIM_PWM_Start+0x82>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031d4:	e013      	b.n	80031fe <HAL_TIM_PWM_Start+0xaa>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d104      	bne.n	80031e6 <HAL_TIM_PWM_Start+0x92>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031e4:	e00b      	b.n	80031fe <HAL_TIM_PWM_Start+0xaa>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d104      	bne.n	80031f6 <HAL_TIM_PWM_Start+0xa2>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031f4:	e003      	b.n	80031fe <HAL_TIM_PWM_Start+0xaa>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2202      	movs	r2, #2
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2201      	movs	r2, #1
 8003204:	6839      	ldr	r1, [r7, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fc40 	bl	8003a8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a23      	ldr	r2, [pc, #140]	@ (80032a0 <HAL_TIM_PWM_Start+0x14c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d107      	bne.n	8003226 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003224:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a1d      	ldr	r2, [pc, #116]	@ (80032a0 <HAL_TIM_PWM_Start+0x14c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d018      	beq.n	8003262 <HAL_TIM_PWM_Start+0x10e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003238:	d013      	beq.n	8003262 <HAL_TIM_PWM_Start+0x10e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a19      	ldr	r2, [pc, #100]	@ (80032a4 <HAL_TIM_PWM_Start+0x150>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d00e      	beq.n	8003262 <HAL_TIM_PWM_Start+0x10e>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a17      	ldr	r2, [pc, #92]	@ (80032a8 <HAL_TIM_PWM_Start+0x154>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d009      	beq.n	8003262 <HAL_TIM_PWM_Start+0x10e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a16      	ldr	r2, [pc, #88]	@ (80032ac <HAL_TIM_PWM_Start+0x158>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d004      	beq.n	8003262 <HAL_TIM_PWM_Start+0x10e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a14      	ldr	r2, [pc, #80]	@ (80032b0 <HAL_TIM_PWM_Start+0x15c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d111      	bne.n	8003286 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b06      	cmp	r3, #6
 8003272:	d010      	beq.n	8003296 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0201 	orr.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003284:	e007      	b.n	8003296 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0201 	orr.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40010000 	.word	0x40010000
 80032a4:	40000400 	.word	0x40000400
 80032a8:	40000800 	.word	0x40000800
 80032ac:	40000c00 	.word	0x40000c00
 80032b0:	40014000 	.word	0x40014000

080032b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d020      	beq.n	8003318 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01b      	beq.n	8003318 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0202 	mvn.w	r2, #2
 80032e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f994 	bl	800362c <HAL_TIM_IC_CaptureCallback>
 8003304:	e005      	b.n	8003312 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f986 	bl	8003618 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f997 	bl	8003640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	d020      	beq.n	8003364 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d01b      	beq.n	8003364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0204 	mvn.w	r2, #4
 8003334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2202      	movs	r2, #2
 800333a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f96e 	bl	800362c <HAL_TIM_IC_CaptureCallback>
 8003350:	e005      	b.n	800335e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f960 	bl	8003618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f971 	bl	8003640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d020      	beq.n	80033b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d01b      	beq.n	80033b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f06f 0208 	mvn.w	r2, #8
 8003380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2204      	movs	r2, #4
 8003386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f948 	bl	800362c <HAL_TIM_IC_CaptureCallback>
 800339c:	e005      	b.n	80033aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f93a 	bl	8003618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f94b 	bl	8003640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d020      	beq.n	80033fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01b      	beq.n	80033fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f06f 0210 	mvn.w	r2, #16
 80033cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2208      	movs	r2, #8
 80033d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f922 	bl	800362c <HAL_TIM_IC_CaptureCallback>
 80033e8:	e005      	b.n	80033f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f914 	bl	8003618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f925 	bl	8003640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00c      	beq.n	8003420 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0201 	mvn.w	r2, #1
 8003418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fd fce6 	bl	8000dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00c      	beq.n	8003444 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800343c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fb53 	bl	8003aea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00c      	beq.n	8003468 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f8f6 	bl	8003654 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00c      	beq.n	800348c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f003 0320 	and.w	r3, r3, #32
 8003478:	2b00      	cmp	r3, #0
 800347a:	d007      	beq.n	800348c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0220 	mvn.w	r2, #32
 8003484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fb25 	bl	8003ad6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800348c:	bf00      	nop
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e0ae      	b.n	8003610 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b0c      	cmp	r3, #12
 80034be:	f200 809f 	bhi.w	8003600 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034c2:	a201      	add	r2, pc, #4	@ (adr r2, 80034c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c8:	080034fd 	.word	0x080034fd
 80034cc:	08003601 	.word	0x08003601
 80034d0:	08003601 	.word	0x08003601
 80034d4:	08003601 	.word	0x08003601
 80034d8:	0800353d 	.word	0x0800353d
 80034dc:	08003601 	.word	0x08003601
 80034e0:	08003601 	.word	0x08003601
 80034e4:	08003601 	.word	0x08003601
 80034e8:	0800357f 	.word	0x0800357f
 80034ec:	08003601 	.word	0x08003601
 80034f0:	08003601 	.word	0x08003601
 80034f4:	08003601 	.word	0x08003601
 80034f8:	080035bf 	.word	0x080035bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f936 	bl	8003774 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0208 	orr.w	r2, r2, #8
 8003516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699a      	ldr	r2, [r3, #24]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0204 	bic.w	r2, r2, #4
 8003526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6999      	ldr	r1, [r3, #24]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	619a      	str	r2, [r3, #24]
      break;
 800353a:	e064      	b.n	8003606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68b9      	ldr	r1, [r7, #8]
 8003542:	4618      	mov	r0, r3
 8003544:	f000 f97c 	bl	8003840 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699a      	ldr	r2, [r3, #24]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6999      	ldr	r1, [r3, #24]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	021a      	lsls	r2, r3, #8
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	619a      	str	r2, [r3, #24]
      break;
 800357c:	e043      	b.n	8003606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	4618      	mov	r0, r3
 8003586:	f000 f9c7 	bl	8003918 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69da      	ldr	r2, [r3, #28]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0208 	orr.w	r2, r2, #8
 8003598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69da      	ldr	r2, [r3, #28]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0204 	bic.w	r2, r2, #4
 80035a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	69d9      	ldr	r1, [r3, #28]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	61da      	str	r2, [r3, #28]
      break;
 80035bc:	e023      	b.n	8003606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68b9      	ldr	r1, [r7, #8]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fa11 	bl	80039ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69da      	ldr	r2, [r3, #28]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69d9      	ldr	r1, [r3, #28]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	021a      	lsls	r2, r3, #8
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	61da      	str	r2, [r3, #28]
      break;
 80035fe:	e002      	b.n	8003606 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	75fb      	strb	r3, [r7, #23]
      break;
 8003604:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800360e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a37      	ldr	r2, [pc, #220]	@ (8003758 <TIM_Base_SetConfig+0xf0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d00f      	beq.n	80036a0 <TIM_Base_SetConfig+0x38>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003686:	d00b      	beq.n	80036a0 <TIM_Base_SetConfig+0x38>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a34      	ldr	r2, [pc, #208]	@ (800375c <TIM_Base_SetConfig+0xf4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d007      	beq.n	80036a0 <TIM_Base_SetConfig+0x38>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a33      	ldr	r2, [pc, #204]	@ (8003760 <TIM_Base_SetConfig+0xf8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d003      	beq.n	80036a0 <TIM_Base_SetConfig+0x38>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a32      	ldr	r2, [pc, #200]	@ (8003764 <TIM_Base_SetConfig+0xfc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d108      	bne.n	80036b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a28      	ldr	r2, [pc, #160]	@ (8003758 <TIM_Base_SetConfig+0xf0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01b      	beq.n	80036f2 <TIM_Base_SetConfig+0x8a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c0:	d017      	beq.n	80036f2 <TIM_Base_SetConfig+0x8a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a25      	ldr	r2, [pc, #148]	@ (800375c <TIM_Base_SetConfig+0xf4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d013      	beq.n	80036f2 <TIM_Base_SetConfig+0x8a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a24      	ldr	r2, [pc, #144]	@ (8003760 <TIM_Base_SetConfig+0xf8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00f      	beq.n	80036f2 <TIM_Base_SetConfig+0x8a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a23      	ldr	r2, [pc, #140]	@ (8003764 <TIM_Base_SetConfig+0xfc>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00b      	beq.n	80036f2 <TIM_Base_SetConfig+0x8a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a22      	ldr	r2, [pc, #136]	@ (8003768 <TIM_Base_SetConfig+0x100>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d007      	beq.n	80036f2 <TIM_Base_SetConfig+0x8a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a21      	ldr	r2, [pc, #132]	@ (800376c <TIM_Base_SetConfig+0x104>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d003      	beq.n	80036f2 <TIM_Base_SetConfig+0x8a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a20      	ldr	r2, [pc, #128]	@ (8003770 <TIM_Base_SetConfig+0x108>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d108      	bne.n	8003704 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4313      	orrs	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a0c      	ldr	r2, [pc, #48]	@ (8003758 <TIM_Base_SetConfig+0xf0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d103      	bne.n	8003732 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f043 0204 	orr.w	r2, r3, #4
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	601a      	str	r2, [r3, #0]
}
 800374a:	bf00      	nop
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40010000 	.word	0x40010000
 800375c:	40000400 	.word	0x40000400
 8003760:	40000800 	.word	0x40000800
 8003764:	40000c00 	.word	0x40000c00
 8003768:	40014000 	.word	0x40014000
 800376c:	40014400 	.word	0x40014400
 8003770:	40014800 	.word	0x40014800

08003774 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f023 0201 	bic.w	r2, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0303 	bic.w	r3, r3, #3
 80037aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f023 0302 	bic.w	r3, r3, #2
 80037bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a1c      	ldr	r2, [pc, #112]	@ (800383c <TIM_OC1_SetConfig+0xc8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d10c      	bne.n	80037ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f023 0308 	bic.w	r3, r3, #8
 80037d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f023 0304 	bic.w	r3, r3, #4
 80037e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a13      	ldr	r2, [pc, #76]	@ (800383c <TIM_OC1_SetConfig+0xc8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d111      	bne.n	8003816 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	621a      	str	r2, [r3, #32]
}
 8003830:	bf00      	nop
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	40010000 	.word	0x40010000

08003840 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f023 0210 	bic.w	r2, r3, #16
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800386e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f023 0320 	bic.w	r3, r3, #32
 800388a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a1e      	ldr	r2, [pc, #120]	@ (8003914 <TIM_OC2_SetConfig+0xd4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d10d      	bne.n	80038bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a15      	ldr	r2, [pc, #84]	@ (8003914 <TIM_OC2_SetConfig+0xd4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d113      	bne.n	80038ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	621a      	str	r2, [r3, #32]
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40010000 	.word	0x40010000

08003918 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0303 	bic.w	r3, r3, #3
 800394e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a1d      	ldr	r2, [pc, #116]	@ (80039e8 <TIM_OC3_SetConfig+0xd0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d10d      	bne.n	8003992 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800397c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a14      	ldr	r2, [pc, #80]	@ (80039e8 <TIM_OC3_SetConfig+0xd0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d113      	bne.n	80039c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	621a      	str	r2, [r3, #32]
}
 80039dc:	bf00      	nop
 80039de:	371c      	adds	r7, #28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	40010000 	.word	0x40010000

080039ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	031b      	lsls	r3, r3, #12
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a10      	ldr	r2, [pc, #64]	@ (8003a88 <TIM_OC4_SetConfig+0x9c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d109      	bne.n	8003a60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	019b      	lsls	r3, r3, #6
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40010000 	.word	0x40010000

08003a8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f003 031f 	and.w	r3, r3, #31
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a1a      	ldr	r2, [r3, #32]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	43db      	mvns	r3, r3
 8003aae:	401a      	ands	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a1a      	ldr	r2, [r3, #32]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f003 031f 	and.w	r3, r3, #31
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	621a      	str	r2, [r3, #32]
}
 8003aca:	bf00      	nop
 8003acc:	371c      	adds	r7, #28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b085      	sub	sp, #20
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	4603      	mov	r3, r0
 8003b06:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003b0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b10:	2b84      	cmp	r3, #132	@ 0x84
 8003b12:	d005      	beq.n	8003b20 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003b14:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3303      	adds	r3, #3
 8003b1e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003b20:	68fb      	ldr	r3, [r7, #12]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b34:	f3ef 8305 	mrs	r3, IPSR
 8003b38:	607b      	str	r3, [r7, #4]
  return(result);
 8003b3a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	bf14      	ite	ne
 8003b40:	2301      	movne	r3, #1
 8003b42:	2300      	moveq	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003b56:	f001 f92f 	bl	8004db8 <vTaskStartScheduler>
  
  return osOK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b62:	b089      	sub	sp, #36	@ 0x24
 8003b64:	af04      	add	r7, sp, #16
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d020      	beq.n	8003bb4 <osThreadCreate+0x54>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d01c      	beq.n	8003bb4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685c      	ldr	r4, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691e      	ldr	r6, [r3, #16]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff ffb6 	bl	8003afe <makeFreeRtosPriority>
 8003b92:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b9c:	9202      	str	r2, [sp, #8]
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	9100      	str	r1, [sp, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	4632      	mov	r2, r6
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f000 ff1f 	bl	80049ec <xTaskCreateStatic>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	e01c      	b.n	8003bee <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685c      	ldr	r4, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bc0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ff98 	bl	8003afe <makeFreeRtosPriority>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	f107 030c 	add.w	r3, r7, #12
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	9200      	str	r2, [sp, #0]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	4632      	mov	r2, r6
 8003bdc:	4629      	mov	r1, r5
 8003bde:	4620      	mov	r0, r4
 8003be0:	f000 ff64 	bl	8004aac <xTaskCreate>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d001      	beq.n	8003bee <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e000      	b.n	8003bf0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003bee:	68fb      	ldr	r3, [r7, #12]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bf8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <osDelay+0x16>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	e000      	b.n	8003c10 <osDelay+0x18>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	4618      	mov	r0, r3
 8003c12:	f001 f89b 	bl	8004d4c <vTaskDelay>
  
  return osOK;
 8003c16:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003c20:	b590      	push	{r4, r7, lr}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d011      	beq.n	8003c56 <osMessageCreate+0x36>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00d      	beq.n	8003c56 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6859      	ldr	r1, [r3, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	2400      	movs	r4, #0
 8003c4c:	9400      	str	r4, [sp, #0]
 8003c4e:	f000 f9e1 	bl	8004014 <xQueueGenericCreateStatic>
 8003c52:	4603      	mov	r3, r0
 8003c54:	e008      	b.n	8003c68 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	4619      	mov	r1, r3
 8003c62:	f000 fa54 	bl	800410e <xQueueGenericCreate>
 8003c66:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd90      	pop	{r4, r7, pc}

08003c70 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <osMessagePut+0x1e>
    ticks = 1;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8003c8e:	f7ff ff4e 	bl	8003b2e <inHandlerMode>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d018      	beq.n	8003cca <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003c98:	f107 0210 	add.w	r2, r7, #16
 8003c9c:	f107 0108 	add.w	r1, r7, #8
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 fb90 	bl	80043c8 <xQueueGenericSendFromISR>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d001      	beq.n	8003cb2 <osMessagePut+0x42>
      return osErrorOS;
 8003cae:	23ff      	movs	r3, #255	@ 0xff
 8003cb0:	e018      	b.n	8003ce4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d014      	beq.n	8003ce2 <osMessagePut+0x72>
 8003cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003cec <osMessagePut+0x7c>)
 8003cba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	e00b      	b.n	8003ce2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003cca:	f107 0108 	add.w	r1, r7, #8
 8003cce:	2300      	movs	r3, #0
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 fa76 	bl	80041c4 <xQueueGenericSend>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d001      	beq.n	8003ce2 <osMessagePut+0x72>
      return osErrorOS;
 8003cde:	23ff      	movs	r3, #255	@ 0xff
 8003ce0:	e000      	b.n	8003ce4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3718      	adds	r7, #24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	e000ed04 	.word	0xe000ed04

08003cf0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003cf0:	b590      	push	{r4, r7, lr}
 8003cf2:	b08b      	sub	sp, #44	@ 0x2c
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10a      	bne.n	8003d20 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8003d0a:	2380      	movs	r3, #128	@ 0x80
 8003d0c:	617b      	str	r3, [r7, #20]
    return event;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	461c      	mov	r4, r3
 8003d12:	f107 0314 	add.w	r3, r7, #20
 8003d16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d1e:	e054      	b.n	8003dca <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003d20:	2300      	movs	r3, #0
 8003d22:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2e:	d103      	bne.n	8003d38 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003d30:	f04f 33ff 	mov.w	r3, #4294967295
 8003d34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d36:	e009      	b.n	8003d4c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d006      	beq.n	8003d4c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <osMessageGet+0x5c>
      ticks = 1;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003d4c:	f7ff feef 	bl	8003b2e <inHandlerMode>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d01c      	beq.n	8003d90 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003d56:	f107 0220 	add.w	r2, r7, #32
 8003d5a:	f107 0314 	add.w	r3, r7, #20
 8003d5e:	3304      	adds	r3, #4
 8003d60:	4619      	mov	r1, r3
 8003d62:	68b8      	ldr	r0, [r7, #8]
 8003d64:	f000 fcb0 	bl	80046c8 <xQueueReceiveFromISR>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d102      	bne.n	8003d74 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8003d6e:	2310      	movs	r3, #16
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	e001      	b.n	8003d78 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01d      	beq.n	8003dba <osMessageGet+0xca>
 8003d7e:	4b15      	ldr	r3, [pc, #84]	@ (8003dd4 <osMessageGet+0xe4>)
 8003d80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	e014      	b.n	8003dba <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003d90:	f107 0314 	add.w	r3, r7, #20
 8003d94:	3304      	adds	r3, #4
 8003d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d98:	4619      	mov	r1, r3
 8003d9a:	68b8      	ldr	r0, [r7, #8]
 8003d9c:	f000 fbb2 	bl	8004504 <xQueueReceive>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d102      	bne.n	8003dac <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003da6:	2310      	movs	r3, #16
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	e006      	b.n	8003dba <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <osMessageGet+0xc6>
 8003db2:	2300      	movs	r3, #0
 8003db4:	e000      	b.n	8003db8 <osMessageGet+0xc8>
 8003db6:	2340      	movs	r3, #64	@ 0x40
 8003db8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	461c      	mov	r4, r3
 8003dbe:	f107 0314 	add.w	r3, r7, #20
 8003dc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003dc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	372c      	adds	r7, #44	@ 0x2c
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd90      	pop	{r4, r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	e000ed04 	.word	0xe000ed04

08003dd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f103 0208 	add.w	r2, r3, #8
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f04f 32ff 	mov.w	r2, #4294967295
 8003df0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f103 0208 	add.w	r2, r3, #8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f103 0208 	add.w	r2, r3, #8
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e32:	b480      	push	{r7}
 8003e34:	b085      	sub	sp, #20
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	601a      	str	r2, [r3, #0]
}
 8003e6e:	bf00      	nop
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b085      	sub	sp, #20
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e90:	d103      	bne.n	8003e9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	e00c      	b.n	8003eb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	e002      	b.n	8003ea8 <vListInsert+0x2e>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d2f6      	bcs.n	8003ea2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	601a      	str	r2, [r3, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6892      	ldr	r2, [r2, #8]
 8003f02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6852      	ldr	r2, [r2, #4]
 8003f0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d103      	bne.n	8003f20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	1e5a      	subs	r2, r3, #1
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10b      	bne.n	8003f6c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f66:	bf00      	nop
 8003f68:	bf00      	nop
 8003f6a:	e7fd      	b.n	8003f68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f6c:	f001 fd84 	bl	8005a78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f78:	68f9      	ldr	r1, [r7, #12]
 8003f7a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003f7c:	fb01 f303 	mul.w	r3, r1, r3
 8003f80:	441a      	add	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	68f9      	ldr	r1, [r7, #12]
 8003fa0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003fa2:	fb01 f303 	mul.w	r3, r1, r3
 8003fa6:	441a      	add	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	22ff      	movs	r2, #255	@ 0xff
 8003fb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	22ff      	movs	r2, #255	@ 0xff
 8003fb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d114      	bne.n	8003fec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d01a      	beq.n	8004000 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	3310      	adds	r3, #16
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f001 f94c 	bl	800526c <xTaskRemoveFromEventList>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d012      	beq.n	8004000 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fda:	4b0d      	ldr	r3, [pc, #52]	@ (8004010 <xQueueGenericReset+0xd0>)
 8003fdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	e009      	b.n	8004000 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	3310      	adds	r3, #16
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff fef1 	bl	8003dd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3324      	adds	r3, #36	@ 0x24
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff feec 	bl	8003dd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004000:	f001 fd6c 	bl	8005adc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004004:	2301      	movs	r3, #1
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	e000ed04 	.word	0xe000ed04

08004014 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08e      	sub	sp, #56	@ 0x38
 8004018:	af02      	add	r7, sp, #8
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10b      	bne.n	8004040 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800403a:	bf00      	nop
 800403c:	bf00      	nop
 800403e:	e7fd      	b.n	800403c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10b      	bne.n	800405e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004058:	bf00      	nop
 800405a:	bf00      	nop
 800405c:	e7fd      	b.n	800405a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <xQueueGenericCreateStatic+0x56>
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <xQueueGenericCreateStatic+0x5a>
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <xQueueGenericCreateStatic+0x5c>
 800406e:	2300      	movs	r3, #0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10b      	bne.n	800408c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	623b      	str	r3, [r7, #32]
}
 8004086:	bf00      	nop
 8004088:	bf00      	nop
 800408a:	e7fd      	b.n	8004088 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d102      	bne.n	8004098 <xQueueGenericCreateStatic+0x84>
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <xQueueGenericCreateStatic+0x88>
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <xQueueGenericCreateStatic+0x8a>
 800409c:	2300      	movs	r3, #0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10b      	bne.n	80040ba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	61fb      	str	r3, [r7, #28]
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	e7fd      	b.n	80040b6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040ba:	2348      	movs	r3, #72	@ 0x48
 80040bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b48      	cmp	r3, #72	@ 0x48
 80040c2:	d00b      	beq.n	80040dc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80040c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c8:	f383 8811 	msr	BASEPRI, r3
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	61bb      	str	r3, [r7, #24]
}
 80040d6:	bf00      	nop
 80040d8:	bf00      	nop
 80040da:	e7fd      	b.n	80040d8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80040dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80040e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00d      	beq.n	8004104 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80040f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	68b9      	ldr	r1, [r7, #8]
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f840 	bl	8004184 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004106:	4618      	mov	r0, r3
 8004108:	3730      	adds	r7, #48	@ 0x30
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800410e:	b580      	push	{r7, lr}
 8004110:	b08a      	sub	sp, #40	@ 0x28
 8004112:	af02      	add	r7, sp, #8
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	4613      	mov	r3, r2
 800411a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10b      	bne.n	800413a <xQueueGenericCreate+0x2c>
	__asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	613b      	str	r3, [r7, #16]
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop
 8004138:	e7fd      	b.n	8004136 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	fb02 f303 	mul.w	r3, r2, r3
 8004142:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	3348      	adds	r3, #72	@ 0x48
 8004148:	4618      	mov	r0, r3
 800414a:	f001 fdb7 	bl	8005cbc <pvPortMalloc>
 800414e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d011      	beq.n	800417a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	3348      	adds	r3, #72	@ 0x48
 800415e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004168:	79fa      	ldrb	r2, [r7, #7]
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	4613      	mov	r3, r2
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	68b9      	ldr	r1, [r7, #8]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 f805 	bl	8004184 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800417a:	69bb      	ldr	r3, [r7, #24]
	}
 800417c:	4618      	mov	r0, r3
 800417e:	3720      	adds	r7, #32
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d103      	bne.n	80041a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	e002      	b.n	80041a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041b2:	2101      	movs	r1, #1
 80041b4:	69b8      	ldr	r0, [r7, #24]
 80041b6:	f7ff fec3 	bl	8003f40 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08e      	sub	sp, #56	@ 0x38
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041d2:	2300      	movs	r3, #0
 80041d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80041da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10b      	bne.n	80041f8 <xQueueGenericSend+0x34>
	__asm volatile
 80041e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80041f2:	bf00      	nop
 80041f4:	bf00      	nop
 80041f6:	e7fd      	b.n	80041f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d103      	bne.n	8004206 <xQueueGenericSend+0x42>
 80041fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <xQueueGenericSend+0x46>
 8004206:	2301      	movs	r3, #1
 8004208:	e000      	b.n	800420c <xQueueGenericSend+0x48>
 800420a:	2300      	movs	r3, #0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10b      	bne.n	8004228 <xQueueGenericSend+0x64>
	__asm volatile
 8004210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004222:	bf00      	nop
 8004224:	bf00      	nop
 8004226:	e7fd      	b.n	8004224 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d103      	bne.n	8004236 <xQueueGenericSend+0x72>
 800422e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <xQueueGenericSend+0x76>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <xQueueGenericSend+0x78>
 800423a:	2300      	movs	r3, #0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10b      	bne.n	8004258 <xQueueGenericSend+0x94>
	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	623b      	str	r3, [r7, #32]
}
 8004252:	bf00      	nop
 8004254:	bf00      	nop
 8004256:	e7fd      	b.n	8004254 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004258:	f001 f9ce 	bl	80055f8 <xTaskGetSchedulerState>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d102      	bne.n	8004268 <xQueueGenericSend+0xa4>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <xQueueGenericSend+0xa8>
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <xQueueGenericSend+0xaa>
 800426c:	2300      	movs	r3, #0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10b      	bne.n	800428a <xQueueGenericSend+0xc6>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	61fb      	str	r3, [r7, #28]
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop
 8004288:	e7fd      	b.n	8004286 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800428a:	f001 fbf5 	bl	8005a78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800428e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004290:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004296:	429a      	cmp	r2, r3
 8004298:	d302      	bcc.n	80042a0 <xQueueGenericSend+0xdc>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b02      	cmp	r3, #2
 800429e:	d129      	bne.n	80042f4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	68b9      	ldr	r1, [r7, #8]
 80042a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042a6:	f000 fa91 	bl	80047cc <prvCopyDataToQueue>
 80042aa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d010      	beq.n	80042d6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b6:	3324      	adds	r3, #36	@ 0x24
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 ffd7 	bl	800526c <xTaskRemoveFromEventList>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d013      	beq.n	80042ec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042c4:	4b3f      	ldr	r3, [pc, #252]	@ (80043c4 <xQueueGenericSend+0x200>)
 80042c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	e00a      	b.n	80042ec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d007      	beq.n	80042ec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80042dc:	4b39      	ldr	r3, [pc, #228]	@ (80043c4 <xQueueGenericSend+0x200>)
 80042de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80042ec:	f001 fbf6 	bl	8005adc <vPortExitCritical>
				return pdPASS;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e063      	b.n	80043bc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d103      	bne.n	8004302 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042fa:	f001 fbef 	bl	8005adc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	e05c      	b.n	80043bc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004304:	2b00      	cmp	r3, #0
 8004306:	d106      	bne.n	8004316 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004308:	f107 0314 	add.w	r3, r7, #20
 800430c:	4618      	mov	r0, r3
 800430e:	f001 f811 	bl	8005334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004312:	2301      	movs	r3, #1
 8004314:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004316:	f001 fbe1 	bl	8005adc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800431a:	f000 fdb7 	bl	8004e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800431e:	f001 fbab 	bl	8005a78 <vPortEnterCritical>
 8004322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004324:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004328:	b25b      	sxtb	r3, r3
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432e:	d103      	bne.n	8004338 <xQueueGenericSend+0x174>
 8004330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800433e:	b25b      	sxtb	r3, r3
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004344:	d103      	bne.n	800434e <xQueueGenericSend+0x18a>
 8004346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800434e:	f001 fbc5 	bl	8005adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004352:	1d3a      	adds	r2, r7, #4
 8004354:	f107 0314 	add.w	r3, r7, #20
 8004358:	4611      	mov	r1, r2
 800435a:	4618      	mov	r0, r3
 800435c:	f001 f800 	bl	8005360 <xTaskCheckForTimeOut>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d124      	bne.n	80043b0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004366:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004368:	f000 fb28 	bl	80049bc <prvIsQueueFull>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d018      	beq.n	80043a4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004374:	3310      	adds	r3, #16
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	4611      	mov	r1, r2
 800437a:	4618      	mov	r0, r3
 800437c:	f000 ff50 	bl	8005220 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004380:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004382:	f000 fab3 	bl	80048ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004386:	f000 fd8f 	bl	8004ea8 <xTaskResumeAll>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	f47f af7c 	bne.w	800428a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004392:	4b0c      	ldr	r3, [pc, #48]	@ (80043c4 <xQueueGenericSend+0x200>)
 8004394:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	e772      	b.n	800428a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80043a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043a6:	f000 faa1 	bl	80048ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043aa:	f000 fd7d 	bl	8004ea8 <xTaskResumeAll>
 80043ae:	e76c      	b.n	800428a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80043b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043b2:	f000 fa9b 	bl	80048ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043b6:	f000 fd77 	bl	8004ea8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80043ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3738      	adds	r7, #56	@ 0x38
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	e000ed04 	.word	0xe000ed04

080043c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b090      	sub	sp, #64	@ 0x40
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80043da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10b      	bne.n	80043f8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80043e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80043f2:	bf00      	nop
 80043f4:	bf00      	nop
 80043f6:	e7fd      	b.n	80043f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d103      	bne.n	8004406 <xQueueGenericSendFromISR+0x3e>
 80043fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <xQueueGenericSendFromISR+0x42>
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <xQueueGenericSendFromISR+0x44>
 800440a:	2300      	movs	r3, #0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10b      	bne.n	8004428 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004422:	bf00      	nop
 8004424:	bf00      	nop
 8004426:	e7fd      	b.n	8004424 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d103      	bne.n	8004436 <xQueueGenericSendFromISR+0x6e>
 800442e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <xQueueGenericSendFromISR+0x72>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <xQueueGenericSendFromISR+0x74>
 800443a:	2300      	movs	r3, #0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10b      	bne.n	8004458 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	623b      	str	r3, [r7, #32]
}
 8004452:	bf00      	nop
 8004454:	bf00      	nop
 8004456:	e7fd      	b.n	8004454 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004458:	f001 fbee 	bl	8005c38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800445c:	f3ef 8211 	mrs	r2, BASEPRI
 8004460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	61fa      	str	r2, [r7, #28]
 8004472:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004474:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004476:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800447c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004480:	429a      	cmp	r2, r3
 8004482:	d302      	bcc.n	800448a <xQueueGenericSendFromISR+0xc2>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2b02      	cmp	r3, #2
 8004488:	d12f      	bne.n	80044ea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800448a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800448c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004490:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004498:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	68b9      	ldr	r1, [r7, #8]
 800449e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80044a0:	f000 f994 	bl	80047cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80044a4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80044a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ac:	d112      	bne.n	80044d4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d016      	beq.n	80044e4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b8:	3324      	adds	r3, #36	@ 0x24
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fed6 	bl	800526c <xTaskRemoveFromEventList>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00e      	beq.n	80044e4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00b      	beq.n	80044e4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	e007      	b.n	80044e4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80044d8:	3301      	adds	r3, #1
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	b25a      	sxtb	r2, r3
 80044de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80044e4:	2301      	movs	r3, #1
 80044e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80044e8:	e001      	b.n	80044ee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044f0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3740      	adds	r7, #64	@ 0x40
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08c      	sub	sp, #48	@ 0x30
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004510:	2300      	movs	r3, #0
 8004512:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10b      	bne.n	8004536 <xQueueReceive+0x32>
	__asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	623b      	str	r3, [r7, #32]
}
 8004530:	bf00      	nop
 8004532:	bf00      	nop
 8004534:	e7fd      	b.n	8004532 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d103      	bne.n	8004544 <xQueueReceive+0x40>
 800453c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <xQueueReceive+0x44>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <xQueueReceive+0x46>
 8004548:	2300      	movs	r3, #0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10b      	bne.n	8004566 <xQueueReceive+0x62>
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	61fb      	str	r3, [r7, #28]
}
 8004560:	bf00      	nop
 8004562:	bf00      	nop
 8004564:	e7fd      	b.n	8004562 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004566:	f001 f847 	bl	80055f8 <xTaskGetSchedulerState>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d102      	bne.n	8004576 <xQueueReceive+0x72>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <xQueueReceive+0x76>
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <xQueueReceive+0x78>
 800457a:	2300      	movs	r3, #0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10b      	bne.n	8004598 <xQueueReceive+0x94>
	__asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	61bb      	str	r3, [r7, #24]
}
 8004592:	bf00      	nop
 8004594:	bf00      	nop
 8004596:	e7fd      	b.n	8004594 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004598:	f001 fa6e 	bl	8005a78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800459c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01f      	beq.n	80045e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045ac:	f000 f978 	bl	80048a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b2:	1e5a      	subs	r2, r3, #1
 80045b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00f      	beq.n	80045e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c2:	3310      	adds	r3, #16
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fe51 	bl	800526c <xTaskRemoveFromEventList>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d007      	beq.n	80045e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045d0:	4b3c      	ldr	r3, [pc, #240]	@ (80046c4 <xQueueReceive+0x1c0>)
 80045d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045e0:	f001 fa7c 	bl	8005adc <vPortExitCritical>
				return pdPASS;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e069      	b.n	80046bc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d103      	bne.n	80045f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045ee:	f001 fa75 	bl	8005adc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045f2:	2300      	movs	r3, #0
 80045f4:	e062      	b.n	80046bc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d106      	bne.n	800460a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045fc:	f107 0310 	add.w	r3, r7, #16
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fe97 	bl	8005334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004606:	2301      	movs	r3, #1
 8004608:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800460a:	f001 fa67 	bl	8005adc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800460e:	f000 fc3d 	bl	8004e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004612:	f001 fa31 	bl	8005a78 <vPortEnterCritical>
 8004616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004618:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800461c:	b25b      	sxtb	r3, r3
 800461e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004622:	d103      	bne.n	800462c <xQueueReceive+0x128>
 8004624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800462c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004632:	b25b      	sxtb	r3, r3
 8004634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004638:	d103      	bne.n	8004642 <xQueueReceive+0x13e>
 800463a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004642:	f001 fa4b 	bl	8005adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004646:	1d3a      	adds	r2, r7, #4
 8004648:	f107 0310 	add.w	r3, r7, #16
 800464c:	4611      	mov	r1, r2
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fe86 	bl	8005360 <xTaskCheckForTimeOut>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d123      	bne.n	80046a2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800465a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800465c:	f000 f998 	bl	8004990 <prvIsQueueEmpty>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d017      	beq.n	8004696 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004668:	3324      	adds	r3, #36	@ 0x24
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	4611      	mov	r1, r2
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fdd6 	bl	8005220 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004674:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004676:	f000 f939 	bl	80048ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800467a:	f000 fc15 	bl	8004ea8 <xTaskResumeAll>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d189      	bne.n	8004598 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004684:	4b0f      	ldr	r3, [pc, #60]	@ (80046c4 <xQueueReceive+0x1c0>)
 8004686:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	e780      	b.n	8004598 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004696:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004698:	f000 f928 	bl	80048ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800469c:	f000 fc04 	bl	8004ea8 <xTaskResumeAll>
 80046a0:	e77a      	b.n	8004598 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80046a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046a4:	f000 f922 	bl	80048ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046a8:	f000 fbfe 	bl	8004ea8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046ae:	f000 f96f 	bl	8004990 <prvIsQueueEmpty>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f43f af6f 	beq.w	8004598 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3730      	adds	r7, #48	@ 0x30
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	e000ed04 	.word	0xe000ed04

080046c8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08e      	sub	sp, #56	@ 0x38
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80046d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10b      	bne.n	80046f6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	623b      	str	r3, [r7, #32]
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop
 80046f4:	e7fd      	b.n	80046f2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d103      	bne.n	8004704 <xQueueReceiveFromISR+0x3c>
 80046fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <xQueueReceiveFromISR+0x40>
 8004704:	2301      	movs	r3, #1
 8004706:	e000      	b.n	800470a <xQueueReceiveFromISR+0x42>
 8004708:	2300      	movs	r3, #0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10b      	bne.n	8004726 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	61fb      	str	r3, [r7, #28]
}
 8004720:	bf00      	nop
 8004722:	bf00      	nop
 8004724:	e7fd      	b.n	8004722 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004726:	f001 fa87 	bl	8005c38 <vPortValidateInterruptPriority>
	__asm volatile
 800472a:	f3ef 8211 	mrs	r2, BASEPRI
 800472e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	61ba      	str	r2, [r7, #24]
 8004740:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004742:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004744:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800474c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474e:	2b00      	cmp	r3, #0
 8004750:	d02f      	beq.n	80047b2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004754:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004758:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004760:	f000 f89e 	bl	80048a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004766:	1e5a      	subs	r2, r3, #1
 8004768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800476c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d112      	bne.n	800479c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d016      	beq.n	80047ac <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800477e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004780:	3310      	adds	r3, #16
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fd72 	bl	800526c <xTaskRemoveFromEventList>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00e      	beq.n	80047ac <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00b      	beq.n	80047ac <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	e007      	b.n	80047ac <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800479c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047a0:	3301      	adds	r3, #1
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	b25a      	sxtb	r2, r3
 80047a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80047ac:	2301      	movs	r3, #1
 80047ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80047b0:	e001      	b.n	80047b6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80047b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f383 8811 	msr	BASEPRI, r3
}
 80047c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3738      	adds	r7, #56	@ 0x38
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80047d8:	2300      	movs	r3, #0
 80047da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10d      	bne.n	8004806 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d14d      	bne.n	800488e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 ff1c 	bl	8005634 <xTaskPriorityDisinherit>
 80047fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	609a      	str	r2, [r3, #8]
 8004804:	e043      	b.n	800488e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d119      	bne.n	8004840 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6858      	ldr	r0, [r3, #4]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004814:	461a      	mov	r2, r3
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	f001 fcca 	bl	80061b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004824:	441a      	add	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	429a      	cmp	r2, r3
 8004834:	d32b      	bcc.n	800488e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	605a      	str	r2, [r3, #4]
 800483e:	e026      	b.n	800488e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	68d8      	ldr	r0, [r3, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004848:	461a      	mov	r2, r3
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	f001 fcb0 	bl	80061b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004858:	425b      	negs	r3, r3
 800485a:	441a      	add	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d207      	bcs.n	800487c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004874:	425b      	negs	r3, r3
 8004876:	441a      	add	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b02      	cmp	r3, #2
 8004880:	d105      	bne.n	800488e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	3b01      	subs	r3, #1
 800488c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004896:	697b      	ldr	r3, [r7, #20]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d018      	beq.n	80048e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ba:	441a      	add	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d303      	bcc.n	80048d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68d9      	ldr	r1, [r3, #12]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048dc:	461a      	mov	r2, r3
 80048de:	6838      	ldr	r0, [r7, #0]
 80048e0:	f001 fc66 	bl	80061b0 <memcpy>
	}
}
 80048e4:	bf00      	nop
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80048f4:	f001 f8c0 	bl	8005a78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004900:	e011      	b.n	8004926 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004906:	2b00      	cmp	r3, #0
 8004908:	d012      	beq.n	8004930 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3324      	adds	r3, #36	@ 0x24
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fcac 	bl	800526c <xTaskRemoveFromEventList>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800491a:	f000 fd85 	bl	8005428 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800491e:	7bfb      	ldrb	r3, [r7, #15]
 8004920:	3b01      	subs	r3, #1
 8004922:	b2db      	uxtb	r3, r3
 8004924:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800492a:	2b00      	cmp	r3, #0
 800492c:	dce9      	bgt.n	8004902 <prvUnlockQueue+0x16>
 800492e:	e000      	b.n	8004932 <prvUnlockQueue+0x46>
					break;
 8004930:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	22ff      	movs	r2, #255	@ 0xff
 8004936:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800493a:	f001 f8cf 	bl	8005adc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800493e:	f001 f89b 	bl	8005a78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004948:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800494a:	e011      	b.n	8004970 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d012      	beq.n	800497a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3310      	adds	r3, #16
 8004958:	4618      	mov	r0, r3
 800495a:	f000 fc87 	bl	800526c <xTaskRemoveFromEventList>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004964:	f000 fd60 	bl	8005428 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004968:	7bbb      	ldrb	r3, [r7, #14]
 800496a:	3b01      	subs	r3, #1
 800496c:	b2db      	uxtb	r3, r3
 800496e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004970:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004974:	2b00      	cmp	r3, #0
 8004976:	dce9      	bgt.n	800494c <prvUnlockQueue+0x60>
 8004978:	e000      	b.n	800497c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800497a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	22ff      	movs	r2, #255	@ 0xff
 8004980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004984:	f001 f8aa 	bl	8005adc <vPortExitCritical>
}
 8004988:	bf00      	nop
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004998:	f001 f86e 	bl	8005a78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d102      	bne.n	80049aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80049a4:	2301      	movs	r3, #1
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	e001      	b.n	80049ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049ae:	f001 f895 	bl	8005adc <vPortExitCritical>

	return xReturn;
 80049b2:	68fb      	ldr	r3, [r7, #12]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049c4:	f001 f858 	bl	8005a78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d102      	bne.n	80049da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80049d4:	2301      	movs	r3, #1
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	e001      	b.n	80049de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049de:	f001 f87d 	bl	8005adc <vPortExitCritical>

	return xReturn;
 80049e2:	68fb      	ldr	r3, [r7, #12]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08e      	sub	sp, #56	@ 0x38
 80049f0:	af04      	add	r7, sp, #16
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80049fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10b      	bne.n	8004a18 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	623b      	str	r3, [r7, #32]
}
 8004a12:	bf00      	nop
 8004a14:	bf00      	nop
 8004a16:	e7fd      	b.n	8004a14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10b      	bne.n	8004a36 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	61fb      	str	r3, [r7, #28]
}
 8004a30:	bf00      	nop
 8004a32:	bf00      	nop
 8004a34:	e7fd      	b.n	8004a32 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a36:	23a0      	movs	r3, #160	@ 0xa0
 8004a38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2ba0      	cmp	r3, #160	@ 0xa0
 8004a3e:	d00b      	beq.n	8004a58 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	61bb      	str	r3, [r7, #24]
}
 8004a52:	bf00      	nop
 8004a54:	bf00      	nop
 8004a56:	e7fd      	b.n	8004a54 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a58:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01e      	beq.n	8004a9e <xTaskCreateStatic+0xb2>
 8004a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d01b      	beq.n	8004a9e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a68:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a6e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a78:	2300      	movs	r3, #0
 8004a7a:	9303      	str	r3, [sp, #12]
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7e:	9302      	str	r3, [sp, #8]
 8004a80:	f107 0314 	add.w	r3, r7, #20
 8004a84:	9301      	str	r3, [sp, #4]
 8004a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	68b9      	ldr	r1, [r7, #8]
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f851 	bl	8004b38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a98:	f000 f8ee 	bl	8004c78 <prvAddNewTaskToReadyList>
 8004a9c:	e001      	b.n	8004aa2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004aa2:	697b      	ldr	r3, [r7, #20]
	}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3728      	adds	r7, #40	@ 0x28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08c      	sub	sp, #48	@ 0x30
 8004ab0:	af04      	add	r7, sp, #16
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	603b      	str	r3, [r7, #0]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004abc:	88fb      	ldrh	r3, [r7, #6]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f001 f8fb 	bl	8005cbc <pvPortMalloc>
 8004ac6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00e      	beq.n	8004aec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ace:	20a0      	movs	r0, #160	@ 0xa0
 8004ad0:	f001 f8f4 	bl	8005cbc <pvPortMalloc>
 8004ad4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ae2:	e005      	b.n	8004af0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ae4:	6978      	ldr	r0, [r7, #20]
 8004ae6:	f001 f9b7 	bl	8005e58 <vPortFree>
 8004aea:	e001      	b.n	8004af0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d017      	beq.n	8004b26 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004afe:	88fa      	ldrh	r2, [r7, #6]
 8004b00:	2300      	movs	r3, #0
 8004b02:	9303      	str	r3, [sp, #12]
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	9302      	str	r3, [sp, #8]
 8004b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f80f 	bl	8004b38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b1a:	69f8      	ldr	r0, [r7, #28]
 8004b1c:	f000 f8ac 	bl	8004c78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b20:	2301      	movs	r3, #1
 8004b22:	61bb      	str	r3, [r7, #24]
 8004b24:	e002      	b.n	8004b2c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b26:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b2c:	69bb      	ldr	r3, [r7, #24]
	}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3720      	adds	r7, #32
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b088      	sub	sp, #32
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b50:	3b01      	subs	r3, #1
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	f023 0307 	bic.w	r3, r3, #7
 8004b5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00b      	beq.n	8004b82 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	617b      	str	r3, [r7, #20]
}
 8004b7c:	bf00      	nop
 8004b7e:	bf00      	nop
 8004b80:	e7fd      	b.n	8004b7e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01f      	beq.n	8004bc8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61fb      	str	r3, [r7, #28]
 8004b8c:	e012      	b.n	8004bb4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	4413      	add	r3, r2
 8004b94:	7819      	ldrb	r1, [r3, #0]
 8004b96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3334      	adds	r3, #52	@ 0x34
 8004b9e:	460a      	mov	r2, r1
 8004ba0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d006      	beq.n	8004bbc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	61fb      	str	r3, [r7, #28]
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	2b0f      	cmp	r3, #15
 8004bb8:	d9e9      	bls.n	8004b8e <prvInitialiseNewTask+0x56>
 8004bba:	e000      	b.n	8004bbe <prvInitialiseNewTask+0x86>
			{
				break;
 8004bbc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bc6:	e003      	b.n	8004bd0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd2:	2b06      	cmp	r3, #6
 8004bd4:	d901      	bls.n	8004bda <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004bd6:	2306      	movs	r3, #6
 8004bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bde:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004be4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be8:	2200      	movs	r2, #0
 8004bea:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bee:	3304      	adds	r3, #4
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff f911 	bl	8003e18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf8:	3318      	adds	r3, #24
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff f90c 	bl	8003e18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c04:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c08:	f1c3 0207 	rsb	r2, r3, #7
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c14:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c28:	334c      	adds	r3, #76	@ 0x4c
 8004c2a:	224c      	movs	r2, #76	@ 0x4c
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f001 fa32 	bl	8006098 <memset>
 8004c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c36:	4a0d      	ldr	r2, [pc, #52]	@ (8004c6c <prvInitialiseNewTask+0x134>)
 8004c38:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8004c70 <prvInitialiseNewTask+0x138>)
 8004c3e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c42:	4a0c      	ldr	r2, [pc, #48]	@ (8004c74 <prvInitialiseNewTask+0x13c>)
 8004c44:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	68f9      	ldr	r1, [r7, #12]
 8004c4a:	69b8      	ldr	r0, [r7, #24]
 8004c4c:	f000 fde0 	bl	8005810 <pxPortInitialiseStack>
 8004c50:	4602      	mov	r2, r0
 8004c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c62:	bf00      	nop
 8004c64:	3720      	adds	r7, #32
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	2000153c 	.word	0x2000153c
 8004c70:	200015a4 	.word	0x200015a4
 8004c74:	2000160c 	.word	0x2000160c

08004c78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c80:	f000 fefa 	bl	8005a78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c84:	4b2a      	ldr	r3, [pc, #168]	@ (8004d30 <prvAddNewTaskToReadyList+0xb8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	4a29      	ldr	r2, [pc, #164]	@ (8004d30 <prvAddNewTaskToReadyList+0xb8>)
 8004c8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c8e:	4b29      	ldr	r3, [pc, #164]	@ (8004d34 <prvAddNewTaskToReadyList+0xbc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d109      	bne.n	8004caa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c96:	4a27      	ldr	r2, [pc, #156]	@ (8004d34 <prvAddNewTaskToReadyList+0xbc>)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c9c:	4b24      	ldr	r3, [pc, #144]	@ (8004d30 <prvAddNewTaskToReadyList+0xb8>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d110      	bne.n	8004cc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ca4:	f000 fbe4 	bl	8005470 <prvInitialiseTaskLists>
 8004ca8:	e00d      	b.n	8004cc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004caa:	4b23      	ldr	r3, [pc, #140]	@ (8004d38 <prvAddNewTaskToReadyList+0xc0>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d109      	bne.n	8004cc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cb2:	4b20      	ldr	r3, [pc, #128]	@ (8004d34 <prvAddNewTaskToReadyList+0xbc>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d802      	bhi.n	8004cc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8004d34 <prvAddNewTaskToReadyList+0xbc>)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8004d3c <prvAddNewTaskToReadyList+0xc4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8004d3c <prvAddNewTaskToReadyList+0xc4>)
 8004cce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	409a      	lsls	r2, r3
 8004cd8:	4b19      	ldr	r3, [pc, #100]	@ (8004d40 <prvAddNewTaskToReadyList+0xc8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	4a18      	ldr	r2, [pc, #96]	@ (8004d40 <prvAddNewTaskToReadyList+0xc8>)
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4a15      	ldr	r2, [pc, #84]	@ (8004d44 <prvAddNewTaskToReadyList+0xcc>)
 8004cf0:	441a      	add	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	f7ff f89a 	bl	8003e32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004cfe:	f000 feed 	bl	8005adc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d02:	4b0d      	ldr	r3, [pc, #52]	@ (8004d38 <prvAddNewTaskToReadyList+0xc0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00e      	beq.n	8004d28 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d34 <prvAddNewTaskToReadyList+0xbc>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d207      	bcs.n	8004d28 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d18:	4b0b      	ldr	r3, [pc, #44]	@ (8004d48 <prvAddNewTaskToReadyList+0xd0>)
 8004d1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d28:	bf00      	nop
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	200004e8 	.word	0x200004e8
 8004d34:	200003e8 	.word	0x200003e8
 8004d38:	200004f4 	.word	0x200004f4
 8004d3c:	20000504 	.word	0x20000504
 8004d40:	200004f0 	.word	0x200004f0
 8004d44:	200003ec 	.word	0x200003ec
 8004d48:	e000ed04 	.word	0xe000ed04

08004d4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d018      	beq.n	8004d90 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d5e:	4b14      	ldr	r3, [pc, #80]	@ (8004db0 <vTaskDelay+0x64>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00b      	beq.n	8004d7e <vTaskDelay+0x32>
	__asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	60bb      	str	r3, [r7, #8]
}
 8004d78:	bf00      	nop
 8004d7a:	bf00      	nop
 8004d7c:	e7fd      	b.n	8004d7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d7e:	f000 f885 	bl	8004e8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d82:	2100      	movs	r1, #0
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fcdd 	bl	8005744 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d8a:	f000 f88d 	bl	8004ea8 <xTaskResumeAll>
 8004d8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d107      	bne.n	8004da6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004d96:	4b07      	ldr	r3, [pc, #28]	@ (8004db4 <vTaskDelay+0x68>)
 8004d98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004da6:	bf00      	nop
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	20000510 	.word	0x20000510
 8004db4:	e000ed04 	.word	0xe000ed04

08004db8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08a      	sub	sp, #40	@ 0x28
 8004dbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004dc6:	463a      	mov	r2, r7
 8004dc8:	1d39      	adds	r1, r7, #4
 8004dca:	f107 0308 	add.w	r3, r7, #8
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fb fdba 	bl	8000948 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004dd4:	6839      	ldr	r1, [r7, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	9202      	str	r2, [sp, #8]
 8004ddc:	9301      	str	r3, [sp, #4]
 8004dde:	2300      	movs	r3, #0
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	2300      	movs	r3, #0
 8004de4:	460a      	mov	r2, r1
 8004de6:	4921      	ldr	r1, [pc, #132]	@ (8004e6c <vTaskStartScheduler+0xb4>)
 8004de8:	4821      	ldr	r0, [pc, #132]	@ (8004e70 <vTaskStartScheduler+0xb8>)
 8004dea:	f7ff fdff 	bl	80049ec <xTaskCreateStatic>
 8004dee:	4603      	mov	r3, r0
 8004df0:	4a20      	ldr	r2, [pc, #128]	@ (8004e74 <vTaskStartScheduler+0xbc>)
 8004df2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004df4:	4b1f      	ldr	r3, [pc, #124]	@ (8004e74 <vTaskStartScheduler+0xbc>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	e001      	b.n	8004e06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d11b      	bne.n	8004e44 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	613b      	str	r3, [r7, #16]
}
 8004e1e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e20:	4b15      	ldr	r3, [pc, #84]	@ (8004e78 <vTaskStartScheduler+0xc0>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	334c      	adds	r3, #76	@ 0x4c
 8004e26:	4a15      	ldr	r2, [pc, #84]	@ (8004e7c <vTaskStartScheduler+0xc4>)
 8004e28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e2a:	4b15      	ldr	r3, [pc, #84]	@ (8004e80 <vTaskStartScheduler+0xc8>)
 8004e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e32:	4b14      	ldr	r3, [pc, #80]	@ (8004e84 <vTaskStartScheduler+0xcc>)
 8004e34:	2201      	movs	r2, #1
 8004e36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e38:	4b13      	ldr	r3, [pc, #76]	@ (8004e88 <vTaskStartScheduler+0xd0>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e3e:	f000 fd77 	bl	8005930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e42:	e00f      	b.n	8004e64 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4a:	d10b      	bne.n	8004e64 <vTaskStartScheduler+0xac>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	60fb      	str	r3, [r7, #12]
}
 8004e5e:	bf00      	nop
 8004e60:	bf00      	nop
 8004e62:	e7fd      	b.n	8004e60 <vTaskStartScheduler+0xa8>
}
 8004e64:	bf00      	nop
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	08006480 	.word	0x08006480
 8004e70:	08005441 	.word	0x08005441
 8004e74:	2000050c 	.word	0x2000050c
 8004e78:	200003e8 	.word	0x200003e8
 8004e7c:	20000014 	.word	0x20000014
 8004e80:	20000508 	.word	0x20000508
 8004e84:	200004f4 	.word	0x200004f4
 8004e88:	200004ec 	.word	0x200004ec

08004e8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e90:	4b04      	ldr	r3, [pc, #16]	@ (8004ea4 <vTaskSuspendAll+0x18>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3301      	adds	r3, #1
 8004e96:	4a03      	ldr	r2, [pc, #12]	@ (8004ea4 <vTaskSuspendAll+0x18>)
 8004e98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e9a:	bf00      	nop
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	20000510 	.word	0x20000510

08004ea8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004eb6:	4b42      	ldr	r3, [pc, #264]	@ (8004fc0 <xTaskResumeAll+0x118>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10b      	bne.n	8004ed6 <xTaskResumeAll+0x2e>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	603b      	str	r3, [r7, #0]
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	e7fd      	b.n	8004ed2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ed6:	f000 fdcf 	bl	8005a78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004eda:	4b39      	ldr	r3, [pc, #228]	@ (8004fc0 <xTaskResumeAll+0x118>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	4a37      	ldr	r2, [pc, #220]	@ (8004fc0 <xTaskResumeAll+0x118>)
 8004ee2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ee4:	4b36      	ldr	r3, [pc, #216]	@ (8004fc0 <xTaskResumeAll+0x118>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d161      	bne.n	8004fb0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004eec:	4b35      	ldr	r3, [pc, #212]	@ (8004fc4 <xTaskResumeAll+0x11c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d05d      	beq.n	8004fb0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ef4:	e02e      	b.n	8004f54 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ef6:	4b34      	ldr	r3, [pc, #208]	@ (8004fc8 <xTaskResumeAll+0x120>)
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3318      	adds	r3, #24
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fe fff2 	bl	8003eec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7fe ffed 	bl	8003eec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f16:	2201      	movs	r2, #1
 8004f18:	409a      	lsls	r2, r3
 8004f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8004fcc <xTaskResumeAll+0x124>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	4a2a      	ldr	r2, [pc, #168]	@ (8004fcc <xTaskResumeAll+0x124>)
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4a27      	ldr	r2, [pc, #156]	@ (8004fd0 <xTaskResumeAll+0x128>)
 8004f32:	441a      	add	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f7fe ff79 	bl	8003e32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f44:	4b23      	ldr	r3, [pc, #140]	@ (8004fd4 <xTaskResumeAll+0x12c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d302      	bcc.n	8004f54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004f4e:	4b22      	ldr	r3, [pc, #136]	@ (8004fd8 <xTaskResumeAll+0x130>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f54:	4b1c      	ldr	r3, [pc, #112]	@ (8004fc8 <xTaskResumeAll+0x120>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1cc      	bne.n	8004ef6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f62:	f000 fb29 	bl	80055b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f66:	4b1d      	ldr	r3, [pc, #116]	@ (8004fdc <xTaskResumeAll+0x134>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d010      	beq.n	8004f94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f72:	f000 f837 	bl	8004fe4 <xTaskIncrementTick>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004f7c:	4b16      	ldr	r3, [pc, #88]	@ (8004fd8 <xTaskResumeAll+0x130>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	3b01      	subs	r3, #1
 8004f86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1f1      	bne.n	8004f72 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004f8e:	4b13      	ldr	r3, [pc, #76]	@ (8004fdc <xTaskResumeAll+0x134>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f94:	4b10      	ldr	r3, [pc, #64]	@ (8004fd8 <xTaskResumeAll+0x130>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d009      	beq.n	8004fb0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8004fe0 <xTaskResumeAll+0x138>)
 8004fa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fb0:	f000 fd94 	bl	8005adc <vPortExitCritical>

	return xAlreadyYielded;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000510 	.word	0x20000510
 8004fc4:	200004e8 	.word	0x200004e8
 8004fc8:	200004a8 	.word	0x200004a8
 8004fcc:	200004f0 	.word	0x200004f0
 8004fd0:	200003ec 	.word	0x200003ec
 8004fd4:	200003e8 	.word	0x200003e8
 8004fd8:	200004fc 	.word	0x200004fc
 8004fdc:	200004f8 	.word	0x200004f8
 8004fe0:	e000ed04 	.word	0xe000ed04

08004fe4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fee:	4b4f      	ldr	r3, [pc, #316]	@ (800512c <xTaskIncrementTick+0x148>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f040 808f 	bne.w	8005116 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ff8:	4b4d      	ldr	r3, [pc, #308]	@ (8005130 <xTaskIncrementTick+0x14c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005000:	4a4b      	ldr	r2, [pc, #300]	@ (8005130 <xTaskIncrementTick+0x14c>)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d121      	bne.n	8005050 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800500c:	4b49      	ldr	r3, [pc, #292]	@ (8005134 <xTaskIncrementTick+0x150>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00b      	beq.n	800502e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	603b      	str	r3, [r7, #0]
}
 8005028:	bf00      	nop
 800502a:	bf00      	nop
 800502c:	e7fd      	b.n	800502a <xTaskIncrementTick+0x46>
 800502e:	4b41      	ldr	r3, [pc, #260]	@ (8005134 <xTaskIncrementTick+0x150>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	4b40      	ldr	r3, [pc, #256]	@ (8005138 <xTaskIncrementTick+0x154>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a3e      	ldr	r2, [pc, #248]	@ (8005134 <xTaskIncrementTick+0x150>)
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	4a3e      	ldr	r2, [pc, #248]	@ (8005138 <xTaskIncrementTick+0x154>)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	4b3e      	ldr	r3, [pc, #248]	@ (800513c <xTaskIncrementTick+0x158>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3301      	adds	r3, #1
 8005048:	4a3c      	ldr	r2, [pc, #240]	@ (800513c <xTaskIncrementTick+0x158>)
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	f000 fab4 	bl	80055b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005050:	4b3b      	ldr	r3, [pc, #236]	@ (8005140 <xTaskIncrementTick+0x15c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	429a      	cmp	r2, r3
 8005058:	d348      	bcc.n	80050ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800505a:	4b36      	ldr	r3, [pc, #216]	@ (8005134 <xTaskIncrementTick+0x150>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d104      	bne.n	800506e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005064:	4b36      	ldr	r3, [pc, #216]	@ (8005140 <xTaskIncrementTick+0x15c>)
 8005066:	f04f 32ff 	mov.w	r2, #4294967295
 800506a:	601a      	str	r2, [r3, #0]
					break;
 800506c:	e03e      	b.n	80050ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800506e:	4b31      	ldr	r3, [pc, #196]	@ (8005134 <xTaskIncrementTick+0x150>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	429a      	cmp	r2, r3
 8005084:	d203      	bcs.n	800508e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005086:	4a2e      	ldr	r2, [pc, #184]	@ (8005140 <xTaskIncrementTick+0x15c>)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800508c:	e02e      	b.n	80050ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	3304      	adds	r3, #4
 8005092:	4618      	mov	r0, r3
 8005094:	f7fe ff2a 	bl	8003eec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509c:	2b00      	cmp	r3, #0
 800509e:	d004      	beq.n	80050aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	3318      	adds	r3, #24
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fe ff21 	bl	8003eec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ae:	2201      	movs	r2, #1
 80050b0:	409a      	lsls	r2, r3
 80050b2:	4b24      	ldr	r3, [pc, #144]	@ (8005144 <xTaskIncrementTick+0x160>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	4a22      	ldr	r2, [pc, #136]	@ (8005144 <xTaskIncrementTick+0x160>)
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050c0:	4613      	mov	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005148 <xTaskIncrementTick+0x164>)
 80050ca:	441a      	add	r2, r3
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	3304      	adds	r3, #4
 80050d0:	4619      	mov	r1, r3
 80050d2:	4610      	mov	r0, r2
 80050d4:	f7fe fead 	bl	8003e32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050dc:	4b1b      	ldr	r3, [pc, #108]	@ (800514c <xTaskIncrementTick+0x168>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d3b9      	bcc.n	800505a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80050e6:	2301      	movs	r3, #1
 80050e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050ea:	e7b6      	b.n	800505a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050ec:	4b17      	ldr	r3, [pc, #92]	@ (800514c <xTaskIncrementTick+0x168>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050f2:	4915      	ldr	r1, [pc, #84]	@ (8005148 <xTaskIncrementTick+0x164>)
 80050f4:	4613      	mov	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d901      	bls.n	8005108 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005104:	2301      	movs	r3, #1
 8005106:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005108:	4b11      	ldr	r3, [pc, #68]	@ (8005150 <xTaskIncrementTick+0x16c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d007      	beq.n	8005120 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005110:	2301      	movs	r3, #1
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	e004      	b.n	8005120 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005116:	4b0f      	ldr	r3, [pc, #60]	@ (8005154 <xTaskIncrementTick+0x170>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3301      	adds	r3, #1
 800511c:	4a0d      	ldr	r2, [pc, #52]	@ (8005154 <xTaskIncrementTick+0x170>)
 800511e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005120:	697b      	ldr	r3, [r7, #20]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000510 	.word	0x20000510
 8005130:	200004ec 	.word	0x200004ec
 8005134:	200004a0 	.word	0x200004a0
 8005138:	200004a4 	.word	0x200004a4
 800513c:	20000500 	.word	0x20000500
 8005140:	20000508 	.word	0x20000508
 8005144:	200004f0 	.word	0x200004f0
 8005148:	200003ec 	.word	0x200003ec
 800514c:	200003e8 	.word	0x200003e8
 8005150:	200004fc 	.word	0x200004fc
 8005154:	200004f8 	.word	0x200004f8

08005158 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800515e:	4b2a      	ldr	r3, [pc, #168]	@ (8005208 <vTaskSwitchContext+0xb0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005166:	4b29      	ldr	r3, [pc, #164]	@ (800520c <vTaskSwitchContext+0xb4>)
 8005168:	2201      	movs	r2, #1
 800516a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800516c:	e045      	b.n	80051fa <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800516e:	4b27      	ldr	r3, [pc, #156]	@ (800520c <vTaskSwitchContext+0xb4>)
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005174:	4b26      	ldr	r3, [pc, #152]	@ (8005210 <vTaskSwitchContext+0xb8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	fab3 f383 	clz	r3, r3
 8005180:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005182:	7afb      	ldrb	r3, [r7, #11]
 8005184:	f1c3 031f 	rsb	r3, r3, #31
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	4922      	ldr	r1, [pc, #136]	@ (8005214 <vTaskSwitchContext+0xbc>)
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	440b      	add	r3, r1
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10b      	bne.n	80051b6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	607b      	str	r3, [r7, #4]
}
 80051b0:	bf00      	nop
 80051b2:	bf00      	nop
 80051b4:	e7fd      	b.n	80051b2 <vTaskSwitchContext+0x5a>
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4613      	mov	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4a14      	ldr	r2, [pc, #80]	@ (8005214 <vTaskSwitchContext+0xbc>)
 80051c2:	4413      	add	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	605a      	str	r2, [r3, #4]
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	3308      	adds	r3, #8
 80051d8:	429a      	cmp	r2, r3
 80051da:	d104      	bne.n	80051e6 <vTaskSwitchContext+0x8e>
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	605a      	str	r2, [r3, #4]
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005218 <vTaskSwitchContext+0xc0>)
 80051ee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051f0:	4b09      	ldr	r3, [pc, #36]	@ (8005218 <vTaskSwitchContext+0xc0>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	334c      	adds	r3, #76	@ 0x4c
 80051f6:	4a09      	ldr	r2, [pc, #36]	@ (800521c <vTaskSwitchContext+0xc4>)
 80051f8:	6013      	str	r3, [r2, #0]
}
 80051fa:	bf00      	nop
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	20000510 	.word	0x20000510
 800520c:	200004fc 	.word	0x200004fc
 8005210:	200004f0 	.word	0x200004f0
 8005214:	200003ec 	.word	0x200003ec
 8005218:	200003e8 	.word	0x200003e8
 800521c:	20000014 	.word	0x20000014

08005220 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10b      	bne.n	8005248 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	60fb      	str	r3, [r7, #12]
}
 8005242:	bf00      	nop
 8005244:	bf00      	nop
 8005246:	e7fd      	b.n	8005244 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005248:	4b07      	ldr	r3, [pc, #28]	@ (8005268 <vTaskPlaceOnEventList+0x48>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3318      	adds	r3, #24
 800524e:	4619      	mov	r1, r3
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7fe fe12 	bl	8003e7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005256:	2101      	movs	r1, #1
 8005258:	6838      	ldr	r0, [r7, #0]
 800525a:	f000 fa73 	bl	8005744 <prvAddCurrentTaskToDelayedList>
}
 800525e:	bf00      	nop
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	200003e8 	.word	0x200003e8

0800526c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10b      	bne.n	800529a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	60fb      	str	r3, [r7, #12]
}
 8005294:	bf00      	nop
 8005296:	bf00      	nop
 8005298:	e7fd      	b.n	8005296 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	3318      	adds	r3, #24
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fe fe24 	bl	8003eec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052a4:	4b1d      	ldr	r3, [pc, #116]	@ (800531c <xTaskRemoveFromEventList+0xb0>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d11c      	bne.n	80052e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	3304      	adds	r3, #4
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7fe fe1b 	bl	8003eec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ba:	2201      	movs	r2, #1
 80052bc:	409a      	lsls	r2, r3
 80052be:	4b18      	ldr	r3, [pc, #96]	@ (8005320 <xTaskRemoveFromEventList+0xb4>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	4a16      	ldr	r2, [pc, #88]	@ (8005320 <xTaskRemoveFromEventList+0xb4>)
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4a13      	ldr	r2, [pc, #76]	@ (8005324 <xTaskRemoveFromEventList+0xb8>)
 80052d6:	441a      	add	r2, r3
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	3304      	adds	r3, #4
 80052dc:	4619      	mov	r1, r3
 80052de:	4610      	mov	r0, r2
 80052e0:	f7fe fda7 	bl	8003e32 <vListInsertEnd>
 80052e4:	e005      	b.n	80052f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	3318      	adds	r3, #24
 80052ea:	4619      	mov	r1, r3
 80052ec:	480e      	ldr	r0, [pc, #56]	@ (8005328 <xTaskRemoveFromEventList+0xbc>)
 80052ee:	f7fe fda0 	bl	8003e32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f6:	4b0d      	ldr	r3, [pc, #52]	@ (800532c <xTaskRemoveFromEventList+0xc0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d905      	bls.n	800530c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005300:	2301      	movs	r3, #1
 8005302:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005304:	4b0a      	ldr	r3, [pc, #40]	@ (8005330 <xTaskRemoveFromEventList+0xc4>)
 8005306:	2201      	movs	r2, #1
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e001      	b.n	8005310 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800530c:	2300      	movs	r3, #0
 800530e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005310:	697b      	ldr	r3, [r7, #20]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3718      	adds	r7, #24
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20000510 	.word	0x20000510
 8005320:	200004f0 	.word	0x200004f0
 8005324:	200003ec 	.word	0x200003ec
 8005328:	200004a8 	.word	0x200004a8
 800532c:	200003e8 	.word	0x200003e8
 8005330:	200004fc 	.word	0x200004fc

08005334 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800533c:	4b06      	ldr	r3, [pc, #24]	@ (8005358 <vTaskInternalSetTimeOutState+0x24>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005344:	4b05      	ldr	r3, [pc, #20]	@ (800535c <vTaskInternalSetTimeOutState+0x28>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	605a      	str	r2, [r3, #4]
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	20000500 	.word	0x20000500
 800535c:	200004ec 	.word	0x200004ec

08005360 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10b      	bne.n	8005388 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	613b      	str	r3, [r7, #16]
}
 8005382:	bf00      	nop
 8005384:	bf00      	nop
 8005386:	e7fd      	b.n	8005384 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10b      	bne.n	80053a6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	60fb      	str	r3, [r7, #12]
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	e7fd      	b.n	80053a2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80053a6:	f000 fb67 	bl	8005a78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80053aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005420 <xTaskCheckForTimeOut+0xc0>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c2:	d102      	bne.n	80053ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80053c4:	2300      	movs	r3, #0
 80053c6:	61fb      	str	r3, [r7, #28]
 80053c8:	e023      	b.n	8005412 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	4b15      	ldr	r3, [pc, #84]	@ (8005424 <xTaskCheckForTimeOut+0xc4>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d007      	beq.n	80053e6 <xTaskCheckForTimeOut+0x86>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d302      	bcc.n	80053e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80053e0:	2301      	movs	r3, #1
 80053e2:	61fb      	str	r3, [r7, #28]
 80053e4:	e015      	b.n	8005412 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d20b      	bcs.n	8005408 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	1ad2      	subs	r2, r2, r3
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7ff ff99 	bl	8005334 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005402:	2300      	movs	r3, #0
 8005404:	61fb      	str	r3, [r7, #28]
 8005406:	e004      	b.n	8005412 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800540e:	2301      	movs	r3, #1
 8005410:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005412:	f000 fb63 	bl	8005adc <vPortExitCritical>

	return xReturn;
 8005416:	69fb      	ldr	r3, [r7, #28]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3720      	adds	r7, #32
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	200004ec 	.word	0x200004ec
 8005424:	20000500 	.word	0x20000500

08005428 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800542c:	4b03      	ldr	r3, [pc, #12]	@ (800543c <vTaskMissedYield+0x14>)
 800542e:	2201      	movs	r2, #1
 8005430:	601a      	str	r2, [r3, #0]
}
 8005432:	bf00      	nop
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	200004fc 	.word	0x200004fc

08005440 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005448:	f000 f852 	bl	80054f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800544c:	4b06      	ldr	r3, [pc, #24]	@ (8005468 <prvIdleTask+0x28>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d9f9      	bls.n	8005448 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005454:	4b05      	ldr	r3, [pc, #20]	@ (800546c <prvIdleTask+0x2c>)
 8005456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005464:	e7f0      	b.n	8005448 <prvIdleTask+0x8>
 8005466:	bf00      	nop
 8005468:	200003ec 	.word	0x200003ec
 800546c:	e000ed04 	.word	0xe000ed04

08005470 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005476:	2300      	movs	r3, #0
 8005478:	607b      	str	r3, [r7, #4]
 800547a:	e00c      	b.n	8005496 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	4613      	mov	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4a12      	ldr	r2, [pc, #72]	@ (80054d0 <prvInitialiseTaskLists+0x60>)
 8005488:	4413      	add	r3, r2
 800548a:	4618      	mov	r0, r3
 800548c:	f7fe fca4 	bl	8003dd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3301      	adds	r3, #1
 8005494:	607b      	str	r3, [r7, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b06      	cmp	r3, #6
 800549a:	d9ef      	bls.n	800547c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800549c:	480d      	ldr	r0, [pc, #52]	@ (80054d4 <prvInitialiseTaskLists+0x64>)
 800549e:	f7fe fc9b 	bl	8003dd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054a2:	480d      	ldr	r0, [pc, #52]	@ (80054d8 <prvInitialiseTaskLists+0x68>)
 80054a4:	f7fe fc98 	bl	8003dd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054a8:	480c      	ldr	r0, [pc, #48]	@ (80054dc <prvInitialiseTaskLists+0x6c>)
 80054aa:	f7fe fc95 	bl	8003dd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054ae:	480c      	ldr	r0, [pc, #48]	@ (80054e0 <prvInitialiseTaskLists+0x70>)
 80054b0:	f7fe fc92 	bl	8003dd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054b4:	480b      	ldr	r0, [pc, #44]	@ (80054e4 <prvInitialiseTaskLists+0x74>)
 80054b6:	f7fe fc8f 	bl	8003dd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054ba:	4b0b      	ldr	r3, [pc, #44]	@ (80054e8 <prvInitialiseTaskLists+0x78>)
 80054bc:	4a05      	ldr	r2, [pc, #20]	@ (80054d4 <prvInitialiseTaskLists+0x64>)
 80054be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054c0:	4b0a      	ldr	r3, [pc, #40]	@ (80054ec <prvInitialiseTaskLists+0x7c>)
 80054c2:	4a05      	ldr	r2, [pc, #20]	@ (80054d8 <prvInitialiseTaskLists+0x68>)
 80054c4:	601a      	str	r2, [r3, #0]
}
 80054c6:	bf00      	nop
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	200003ec 	.word	0x200003ec
 80054d4:	20000478 	.word	0x20000478
 80054d8:	2000048c 	.word	0x2000048c
 80054dc:	200004a8 	.word	0x200004a8
 80054e0:	200004bc 	.word	0x200004bc
 80054e4:	200004d4 	.word	0x200004d4
 80054e8:	200004a0 	.word	0x200004a0
 80054ec:	200004a4 	.word	0x200004a4

080054f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054f6:	e019      	b.n	800552c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80054f8:	f000 fabe 	bl	8005a78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054fc:	4b10      	ldr	r3, [pc, #64]	@ (8005540 <prvCheckTasksWaitingTermination+0x50>)
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3304      	adds	r3, #4
 8005508:	4618      	mov	r0, r3
 800550a:	f7fe fcef 	bl	8003eec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800550e:	4b0d      	ldr	r3, [pc, #52]	@ (8005544 <prvCheckTasksWaitingTermination+0x54>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3b01      	subs	r3, #1
 8005514:	4a0b      	ldr	r2, [pc, #44]	@ (8005544 <prvCheckTasksWaitingTermination+0x54>)
 8005516:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005518:	4b0b      	ldr	r3, [pc, #44]	@ (8005548 <prvCheckTasksWaitingTermination+0x58>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3b01      	subs	r3, #1
 800551e:	4a0a      	ldr	r2, [pc, #40]	@ (8005548 <prvCheckTasksWaitingTermination+0x58>)
 8005520:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005522:	f000 fadb 	bl	8005adc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f810 	bl	800554c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800552c:	4b06      	ldr	r3, [pc, #24]	@ (8005548 <prvCheckTasksWaitingTermination+0x58>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1e1      	bne.n	80054f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	200004bc 	.word	0x200004bc
 8005544:	200004e8 	.word	0x200004e8
 8005548:	200004d0 	.word	0x200004d0

0800554c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	334c      	adds	r3, #76	@ 0x4c
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fda5 	bl	80060a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005564:	2b00      	cmp	r3, #0
 8005566:	d108      	bne.n	800557a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fc73 	bl	8005e58 <vPortFree>
				vPortFree( pxTCB );
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fc70 	bl	8005e58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005578:	e019      	b.n	80055ae <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005580:	2b01      	cmp	r3, #1
 8005582:	d103      	bne.n	800558c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fc67 	bl	8005e58 <vPortFree>
	}
 800558a:	e010      	b.n	80055ae <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005592:	2b02      	cmp	r3, #2
 8005594:	d00b      	beq.n	80055ae <prvDeleteTCB+0x62>
	__asm volatile
 8005596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	60fb      	str	r3, [r7, #12]
}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop
 80055ac:	e7fd      	b.n	80055aa <prvDeleteTCB+0x5e>
	}
 80055ae:	bf00      	nop
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
	...

080055b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055be:	4b0c      	ldr	r3, [pc, #48]	@ (80055f0 <prvResetNextTaskUnblockTime+0x38>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d104      	bne.n	80055d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055c8:	4b0a      	ldr	r3, [pc, #40]	@ (80055f4 <prvResetNextTaskUnblockTime+0x3c>)
 80055ca:	f04f 32ff 	mov.w	r2, #4294967295
 80055ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80055d0:	e008      	b.n	80055e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055d2:	4b07      	ldr	r3, [pc, #28]	@ (80055f0 <prvResetNextTaskUnblockTime+0x38>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	4a04      	ldr	r2, [pc, #16]	@ (80055f4 <prvResetNextTaskUnblockTime+0x3c>)
 80055e2:	6013      	str	r3, [r2, #0]
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	200004a0 	.word	0x200004a0
 80055f4:	20000508 	.word	0x20000508

080055f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80055fe:	4b0b      	ldr	r3, [pc, #44]	@ (800562c <xTaskGetSchedulerState+0x34>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d102      	bne.n	800560c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005606:	2301      	movs	r3, #1
 8005608:	607b      	str	r3, [r7, #4]
 800560a:	e008      	b.n	800561e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800560c:	4b08      	ldr	r3, [pc, #32]	@ (8005630 <xTaskGetSchedulerState+0x38>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d102      	bne.n	800561a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005614:	2302      	movs	r3, #2
 8005616:	607b      	str	r3, [r7, #4]
 8005618:	e001      	b.n	800561e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800561a:	2300      	movs	r3, #0
 800561c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800561e:	687b      	ldr	r3, [r7, #4]
	}
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	200004f4 	.word	0x200004f4
 8005630:	20000510 	.word	0x20000510

08005634 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d070      	beq.n	800572c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800564a:	4b3b      	ldr	r3, [pc, #236]	@ (8005738 <xTaskPriorityDisinherit+0x104>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	429a      	cmp	r2, r3
 8005652:	d00b      	beq.n	800566c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	60fb      	str	r3, [r7, #12]
}
 8005666:	bf00      	nop
 8005668:	bf00      	nop
 800566a:	e7fd      	b.n	8005668 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10b      	bne.n	800568c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	60bb      	str	r3, [r7, #8]
}
 8005686:	bf00      	nop
 8005688:	bf00      	nop
 800568a:	e7fd      	b.n	8005688 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005690:	1e5a      	subs	r2, r3, #1
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569e:	429a      	cmp	r2, r3
 80056a0:	d044      	beq.n	800572c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d140      	bne.n	800572c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	3304      	adds	r3, #4
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fe fc1c 	bl	8003eec <uxListRemove>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d115      	bne.n	80056e6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056be:	491f      	ldr	r1, [pc, #124]	@ (800573c <xTaskPriorityDisinherit+0x108>)
 80056c0:	4613      	mov	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10a      	bne.n	80056e6 <xTaskPriorityDisinherit+0xb2>
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d4:	2201      	movs	r2, #1
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	43da      	mvns	r2, r3
 80056dc:	4b18      	ldr	r3, [pc, #96]	@ (8005740 <xTaskPriorityDisinherit+0x10c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4013      	ands	r3, r2
 80056e2:	4a17      	ldr	r2, [pc, #92]	@ (8005740 <xTaskPriorityDisinherit+0x10c>)
 80056e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f2:	f1c3 0207 	rsb	r2, r3, #7
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fe:	2201      	movs	r2, #1
 8005700:	409a      	lsls	r2, r3
 8005702:	4b0f      	ldr	r3, [pc, #60]	@ (8005740 <xTaskPriorityDisinherit+0x10c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4313      	orrs	r3, r2
 8005708:	4a0d      	ldr	r2, [pc, #52]	@ (8005740 <xTaskPriorityDisinherit+0x10c>)
 800570a:	6013      	str	r3, [r2, #0]
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005710:	4613      	mov	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4a08      	ldr	r2, [pc, #32]	@ (800573c <xTaskPriorityDisinherit+0x108>)
 800571a:	441a      	add	r2, r3
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	3304      	adds	r3, #4
 8005720:	4619      	mov	r1, r3
 8005722:	4610      	mov	r0, r2
 8005724:	f7fe fb85 	bl	8003e32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005728:	2301      	movs	r3, #1
 800572a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800572c:	697b      	ldr	r3, [r7, #20]
	}
 800572e:	4618      	mov	r0, r3
 8005730:	3718      	adds	r7, #24
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	200003e8 	.word	0x200003e8
 800573c:	200003ec 	.word	0x200003ec
 8005740:	200004f0 	.word	0x200004f0

08005744 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800574e:	4b29      	ldr	r3, [pc, #164]	@ (80057f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005754:	4b28      	ldr	r3, [pc, #160]	@ (80057f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3304      	adds	r3, #4
 800575a:	4618      	mov	r0, r3
 800575c:	f7fe fbc6 	bl	8003eec <uxListRemove>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10b      	bne.n	800577e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005766:	4b24      	ldr	r3, [pc, #144]	@ (80057f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576c:	2201      	movs	r2, #1
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	43da      	mvns	r2, r3
 8005774:	4b21      	ldr	r3, [pc, #132]	@ (80057fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4013      	ands	r3, r2
 800577a:	4a20      	ldr	r2, [pc, #128]	@ (80057fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800577c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005784:	d10a      	bne.n	800579c <prvAddCurrentTaskToDelayedList+0x58>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800578c:	4b1a      	ldr	r3, [pc, #104]	@ (80057f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3304      	adds	r3, #4
 8005792:	4619      	mov	r1, r3
 8005794:	481a      	ldr	r0, [pc, #104]	@ (8005800 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005796:	f7fe fb4c 	bl	8003e32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800579a:	e026      	b.n	80057ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4413      	add	r3, r2
 80057a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057a4:	4b14      	ldr	r3, [pc, #80]	@ (80057f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d209      	bcs.n	80057c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057b4:	4b13      	ldr	r3, [pc, #76]	@ (8005804 <prvAddCurrentTaskToDelayedList+0xc0>)
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	4b0f      	ldr	r3, [pc, #60]	@ (80057f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3304      	adds	r3, #4
 80057be:	4619      	mov	r1, r3
 80057c0:	4610      	mov	r0, r2
 80057c2:	f7fe fb5a 	bl	8003e7a <vListInsert>
}
 80057c6:	e010      	b.n	80057ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005808 <prvAddCurrentTaskToDelayedList+0xc4>)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	4b0a      	ldr	r3, [pc, #40]	@ (80057f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3304      	adds	r3, #4
 80057d2:	4619      	mov	r1, r3
 80057d4:	4610      	mov	r0, r2
 80057d6:	f7fe fb50 	bl	8003e7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057da:	4b0c      	ldr	r3, [pc, #48]	@ (800580c <prvAddCurrentTaskToDelayedList+0xc8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d202      	bcs.n	80057ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80057e4:	4a09      	ldr	r2, [pc, #36]	@ (800580c <prvAddCurrentTaskToDelayedList+0xc8>)
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	6013      	str	r3, [r2, #0]
}
 80057ea:	bf00      	nop
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	200004ec 	.word	0x200004ec
 80057f8:	200003e8 	.word	0x200003e8
 80057fc:	200004f0 	.word	0x200004f0
 8005800:	200004d4 	.word	0x200004d4
 8005804:	200004a4 	.word	0x200004a4
 8005808:	200004a0 	.word	0x200004a0
 800580c:	20000508 	.word	0x20000508

08005810 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3b04      	subs	r3, #4
 8005820:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	3b04      	subs	r3, #4
 800582e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f023 0201 	bic.w	r2, r3, #1
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	3b04      	subs	r3, #4
 800583e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005840:	4a0c      	ldr	r2, [pc, #48]	@ (8005874 <pxPortInitialiseStack+0x64>)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3b14      	subs	r3, #20
 800584a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3b04      	subs	r3, #4
 8005856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f06f 0202 	mvn.w	r2, #2
 800585e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3b20      	subs	r3, #32
 8005864:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005866:	68fb      	ldr	r3, [r7, #12]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	08005879 	.word	0x08005879

08005878 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800587e:	2300      	movs	r3, #0
 8005880:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005882:	4b13      	ldr	r3, [pc, #76]	@ (80058d0 <prvTaskExitError+0x58>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588a:	d00b      	beq.n	80058a4 <prvTaskExitError+0x2c>
	__asm volatile
 800588c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	60fb      	str	r3, [r7, #12]
}
 800589e:	bf00      	nop
 80058a0:	bf00      	nop
 80058a2:	e7fd      	b.n	80058a0 <prvTaskExitError+0x28>
	__asm volatile
 80058a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	60bb      	str	r3, [r7, #8]
}
 80058b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80058b8:	bf00      	nop
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0fc      	beq.n	80058ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058c0:	bf00      	nop
 80058c2:	bf00      	nop
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	20000010 	.word	0x20000010
	...

080058e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80058e0:	4b07      	ldr	r3, [pc, #28]	@ (8005900 <pxCurrentTCBConst2>)
 80058e2:	6819      	ldr	r1, [r3, #0]
 80058e4:	6808      	ldr	r0, [r1, #0]
 80058e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ea:	f380 8809 	msr	PSP, r0
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f04f 0000 	mov.w	r0, #0
 80058f6:	f380 8811 	msr	BASEPRI, r0
 80058fa:	4770      	bx	lr
 80058fc:	f3af 8000 	nop.w

08005900 <pxCurrentTCBConst2>:
 8005900:	200003e8 	.word	0x200003e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop

08005908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005908:	4808      	ldr	r0, [pc, #32]	@ (800592c <prvPortStartFirstTask+0x24>)
 800590a:	6800      	ldr	r0, [r0, #0]
 800590c:	6800      	ldr	r0, [r0, #0]
 800590e:	f380 8808 	msr	MSP, r0
 8005912:	f04f 0000 	mov.w	r0, #0
 8005916:	f380 8814 	msr	CONTROL, r0
 800591a:	b662      	cpsie	i
 800591c:	b661      	cpsie	f
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	df00      	svc	0
 8005928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800592a:	bf00      	nop
 800592c:	e000ed08 	.word	0xe000ed08

08005930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005936:	4b47      	ldr	r3, [pc, #284]	@ (8005a54 <xPortStartScheduler+0x124>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a47      	ldr	r2, [pc, #284]	@ (8005a58 <xPortStartScheduler+0x128>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d10b      	bne.n	8005958 <xPortStartScheduler+0x28>
	__asm volatile
 8005940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	60fb      	str	r3, [r7, #12]
}
 8005952:	bf00      	nop
 8005954:	bf00      	nop
 8005956:	e7fd      	b.n	8005954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005958:	4b3e      	ldr	r3, [pc, #248]	@ (8005a54 <xPortStartScheduler+0x124>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a3f      	ldr	r2, [pc, #252]	@ (8005a5c <xPortStartScheduler+0x12c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d10b      	bne.n	800597a <xPortStartScheduler+0x4a>
	__asm volatile
 8005962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	613b      	str	r3, [r7, #16]
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop
 8005978:	e7fd      	b.n	8005976 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800597a:	4b39      	ldr	r3, [pc, #228]	@ (8005a60 <xPortStartScheduler+0x130>)
 800597c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	b2db      	uxtb	r3, r3
 8005984:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	22ff      	movs	r2, #255	@ 0xff
 800598a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005994:	78fb      	ldrb	r3, [r7, #3]
 8005996:	b2db      	uxtb	r3, r3
 8005998:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800599c:	b2da      	uxtb	r2, r3
 800599e:	4b31      	ldr	r3, [pc, #196]	@ (8005a64 <xPortStartScheduler+0x134>)
 80059a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059a2:	4b31      	ldr	r3, [pc, #196]	@ (8005a68 <xPortStartScheduler+0x138>)
 80059a4:	2207      	movs	r2, #7
 80059a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059a8:	e009      	b.n	80059be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80059aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005a68 <xPortStartScheduler+0x138>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005a68 <xPortStartScheduler+0x138>)
 80059b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059b4:	78fb      	ldrb	r3, [r7, #3]
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059be:	78fb      	ldrb	r3, [r7, #3]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c6:	2b80      	cmp	r3, #128	@ 0x80
 80059c8:	d0ef      	beq.n	80059aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059ca:	4b27      	ldr	r3, [pc, #156]	@ (8005a68 <xPortStartScheduler+0x138>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f1c3 0307 	rsb	r3, r3, #7
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d00b      	beq.n	80059ee <xPortStartScheduler+0xbe>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	60bb      	str	r3, [r7, #8]
}
 80059e8:	bf00      	nop
 80059ea:	bf00      	nop
 80059ec:	e7fd      	b.n	80059ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005a68 <xPortStartScheduler+0x138>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	021b      	lsls	r3, r3, #8
 80059f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a68 <xPortStartScheduler+0x138>)
 80059f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a68 <xPortStartScheduler+0x138>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a00:	4a19      	ldr	r2, [pc, #100]	@ (8005a68 <xPortStartScheduler+0x138>)
 8005a02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a0c:	4b17      	ldr	r3, [pc, #92]	@ (8005a6c <xPortStartScheduler+0x13c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a16      	ldr	r2, [pc, #88]	@ (8005a6c <xPortStartScheduler+0x13c>)
 8005a12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005a16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a18:	4b14      	ldr	r3, [pc, #80]	@ (8005a6c <xPortStartScheduler+0x13c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a13      	ldr	r2, [pc, #76]	@ (8005a6c <xPortStartScheduler+0x13c>)
 8005a1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005a22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a24:	f000 f8da 	bl	8005bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a28:	4b11      	ldr	r3, [pc, #68]	@ (8005a70 <xPortStartScheduler+0x140>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a2e:	f000 f8f9 	bl	8005c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a32:	4b10      	ldr	r3, [pc, #64]	@ (8005a74 <xPortStartScheduler+0x144>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a0f      	ldr	r2, [pc, #60]	@ (8005a74 <xPortStartScheduler+0x144>)
 8005a38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005a3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a3e:	f7ff ff63 	bl	8005908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a42:	f7ff fb89 	bl	8005158 <vTaskSwitchContext>
	prvTaskExitError();
 8005a46:	f7ff ff17 	bl	8005878 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	e000ed00 	.word	0xe000ed00
 8005a58:	410fc271 	.word	0x410fc271
 8005a5c:	410fc270 	.word	0x410fc270
 8005a60:	e000e400 	.word	0xe000e400
 8005a64:	20000514 	.word	0x20000514
 8005a68:	20000518 	.word	0x20000518
 8005a6c:	e000ed20 	.word	0xe000ed20
 8005a70:	20000010 	.word	0x20000010
 8005a74:	e000ef34 	.word	0xe000ef34

08005a78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	607b      	str	r3, [r7, #4]
}
 8005a90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a92:	4b10      	ldr	r3, [pc, #64]	@ (8005ad4 <vPortEnterCritical+0x5c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3301      	adds	r3, #1
 8005a98:	4a0e      	ldr	r2, [pc, #56]	@ (8005ad4 <vPortEnterCritical+0x5c>)
 8005a9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad4 <vPortEnterCritical+0x5c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d110      	bne.n	8005ac6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad8 <vPortEnterCritical+0x60>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00b      	beq.n	8005ac6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	603b      	str	r3, [r7, #0]
}
 8005ac0:	bf00      	nop
 8005ac2:	bf00      	nop
 8005ac4:	e7fd      	b.n	8005ac2 <vPortEnterCritical+0x4a>
	}
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	20000010 	.word	0x20000010
 8005ad8:	e000ed04 	.word	0xe000ed04

08005adc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ae2:	4b12      	ldr	r3, [pc, #72]	@ (8005b2c <vPortExitCritical+0x50>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10b      	bne.n	8005b02 <vPortExitCritical+0x26>
	__asm volatile
 8005aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aee:	f383 8811 	msr	BASEPRI, r3
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	607b      	str	r3, [r7, #4]
}
 8005afc:	bf00      	nop
 8005afe:	bf00      	nop
 8005b00:	e7fd      	b.n	8005afe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005b02:	4b0a      	ldr	r3, [pc, #40]	@ (8005b2c <vPortExitCritical+0x50>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	4a08      	ldr	r2, [pc, #32]	@ (8005b2c <vPortExitCritical+0x50>)
 8005b0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b0c:	4b07      	ldr	r3, [pc, #28]	@ (8005b2c <vPortExitCritical+0x50>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d105      	bne.n	8005b20 <vPortExitCritical+0x44>
 8005b14:	2300      	movs	r3, #0
 8005b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	f383 8811 	msr	BASEPRI, r3
}
 8005b1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	20000010 	.word	0x20000010

08005b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b30:	f3ef 8009 	mrs	r0, PSP
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	4b15      	ldr	r3, [pc, #84]	@ (8005b90 <pxCurrentTCBConst>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	f01e 0f10 	tst.w	lr, #16
 8005b40:	bf08      	it	eq
 8005b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4a:	6010      	str	r0, [r2, #0]
 8005b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005b54:	f380 8811 	msr	BASEPRI, r0
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f7ff fafa 	bl	8005158 <vTaskSwitchContext>
 8005b64:	f04f 0000 	mov.w	r0, #0
 8005b68:	f380 8811 	msr	BASEPRI, r0
 8005b6c:	bc09      	pop	{r0, r3}
 8005b6e:	6819      	ldr	r1, [r3, #0]
 8005b70:	6808      	ldr	r0, [r1, #0]
 8005b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b76:	f01e 0f10 	tst.w	lr, #16
 8005b7a:	bf08      	it	eq
 8005b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b80:	f380 8809 	msr	PSP, r0
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	f3af 8000 	nop.w

08005b90 <pxCurrentTCBConst>:
 8005b90:	200003e8 	.word	0x200003e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop

08005b98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	607b      	str	r3, [r7, #4]
}
 8005bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005bb2:	f7ff fa17 	bl	8004fe4 <xTaskIncrementTick>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005bbc:	4b06      	ldr	r3, [pc, #24]	@ (8005bd8 <SysTick_Handler+0x40>)
 8005bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	f383 8811 	msr	BASEPRI, r3
}
 8005bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005bd0:	bf00      	nop
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005be0:	4b0b      	ldr	r3, [pc, #44]	@ (8005c10 <vPortSetupTimerInterrupt+0x34>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005be6:	4b0b      	ldr	r3, [pc, #44]	@ (8005c14 <vPortSetupTimerInterrupt+0x38>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bec:	4b0a      	ldr	r3, [pc, #40]	@ (8005c18 <vPortSetupTimerInterrupt+0x3c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8005c1c <vPortSetupTimerInterrupt+0x40>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	099b      	lsrs	r3, r3, #6
 8005bf8:	4a09      	ldr	r2, [pc, #36]	@ (8005c20 <vPortSetupTimerInterrupt+0x44>)
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bfe:	4b04      	ldr	r3, [pc, #16]	@ (8005c10 <vPortSetupTimerInterrupt+0x34>)
 8005c00:	2207      	movs	r2, #7
 8005c02:	601a      	str	r2, [r3, #0]
}
 8005c04:	bf00      	nop
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	e000e010 	.word	0xe000e010
 8005c14:	e000e018 	.word	0xe000e018
 8005c18:	20000004 	.word	0x20000004
 8005c1c:	10624dd3 	.word	0x10624dd3
 8005c20:	e000e014 	.word	0xe000e014

08005c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005c34 <vPortEnableVFP+0x10>
 8005c28:	6801      	ldr	r1, [r0, #0]
 8005c2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005c2e:	6001      	str	r1, [r0, #0]
 8005c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c32:	bf00      	nop
 8005c34:	e000ed88 	.word	0xe000ed88

08005c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c3e:	f3ef 8305 	mrs	r3, IPSR
 8005c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b0f      	cmp	r3, #15
 8005c48:	d915      	bls.n	8005c76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c4a:	4a18      	ldr	r2, [pc, #96]	@ (8005cac <vPortValidateInterruptPriority+0x74>)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c54:	4b16      	ldr	r3, [pc, #88]	@ (8005cb0 <vPortValidateInterruptPriority+0x78>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	7afa      	ldrb	r2, [r7, #11]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d20b      	bcs.n	8005c76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	607b      	str	r3, [r7, #4]
}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	e7fd      	b.n	8005c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c76:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb4 <vPortValidateInterruptPriority+0x7c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005cb8 <vPortValidateInterruptPriority+0x80>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d90b      	bls.n	8005c9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	603b      	str	r3, [r7, #0]
}
 8005c98:	bf00      	nop
 8005c9a:	bf00      	nop
 8005c9c:	e7fd      	b.n	8005c9a <vPortValidateInterruptPriority+0x62>
	}
 8005c9e:	bf00      	nop
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	e000e3f0 	.word	0xe000e3f0
 8005cb0:	20000514 	.word	0x20000514
 8005cb4:	e000ed0c 	.word	0xe000ed0c
 8005cb8:	20000518 	.word	0x20000518

08005cbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b08a      	sub	sp, #40	@ 0x28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005cc8:	f7ff f8e0 	bl	8004e8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8005e40 <pvPortMalloc+0x184>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005cd4:	f000 f924 	bl	8005f20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8005e44 <pvPortMalloc+0x188>)
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f040 8095 	bne.w	8005e10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01e      	beq.n	8005d2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005cec:	2208      	movs	r2, #8
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d015      	beq.n	8005d2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f023 0307 	bic.w	r3, r3, #7
 8005d04:	3308      	adds	r3, #8
 8005d06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00b      	beq.n	8005d2a <pvPortMalloc+0x6e>
	__asm volatile
 8005d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	617b      	str	r3, [r7, #20]
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop
 8005d28:	e7fd      	b.n	8005d26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d06f      	beq.n	8005e10 <pvPortMalloc+0x154>
 8005d30:	4b45      	ldr	r3, [pc, #276]	@ (8005e48 <pvPortMalloc+0x18c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d86a      	bhi.n	8005e10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d3a:	4b44      	ldr	r3, [pc, #272]	@ (8005e4c <pvPortMalloc+0x190>)
 8005d3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d3e:	4b43      	ldr	r3, [pc, #268]	@ (8005e4c <pvPortMalloc+0x190>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d44:	e004      	b.n	8005d50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d903      	bls.n	8005d62 <pvPortMalloc+0xa6>
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1f1      	bne.n	8005d46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d62:	4b37      	ldr	r3, [pc, #220]	@ (8005e40 <pvPortMalloc+0x184>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d051      	beq.n	8005e10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2208      	movs	r2, #8
 8005d72:	4413      	add	r3, r2
 8005d74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	1ad2      	subs	r2, r2, r3
 8005d86:	2308      	movs	r3, #8
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d920      	bls.n	8005dd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4413      	add	r3, r2
 8005d94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00b      	beq.n	8005db8 <pvPortMalloc+0xfc>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	613b      	str	r3, [r7, #16]
}
 8005db2:	bf00      	nop
 8005db4:	bf00      	nop
 8005db6:	e7fd      	b.n	8005db4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	1ad2      	subs	r2, r2, r3
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005dca:	69b8      	ldr	r0, [r7, #24]
 8005dcc:	f000 f90a 	bl	8005fe4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8005e48 <pvPortMalloc+0x18c>)
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	4a1b      	ldr	r2, [pc, #108]	@ (8005e48 <pvPortMalloc+0x18c>)
 8005ddc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005dde:	4b1a      	ldr	r3, [pc, #104]	@ (8005e48 <pvPortMalloc+0x18c>)
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e50 <pvPortMalloc+0x194>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d203      	bcs.n	8005df2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005dea:	4b17      	ldr	r3, [pc, #92]	@ (8005e48 <pvPortMalloc+0x18c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a18      	ldr	r2, [pc, #96]	@ (8005e50 <pvPortMalloc+0x194>)
 8005df0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	4b13      	ldr	r3, [pc, #76]	@ (8005e44 <pvPortMalloc+0x188>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e06:	4b13      	ldr	r3, [pc, #76]	@ (8005e54 <pvPortMalloc+0x198>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	4a11      	ldr	r2, [pc, #68]	@ (8005e54 <pvPortMalloc+0x198>)
 8005e0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e10:	f7ff f84a 	bl	8004ea8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00b      	beq.n	8005e36 <pvPortMalloc+0x17a>
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	60fb      	str	r3, [r7, #12]
}
 8005e30:	bf00      	nop
 8005e32:	bf00      	nop
 8005e34:	e7fd      	b.n	8005e32 <pvPortMalloc+0x176>
	return pvReturn;
 8005e36:	69fb      	ldr	r3, [r7, #28]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3728      	adds	r7, #40	@ 0x28
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	20001524 	.word	0x20001524
 8005e44:	20001538 	.word	0x20001538
 8005e48:	20001528 	.word	0x20001528
 8005e4c:	2000151c 	.word	0x2000151c
 8005e50:	2000152c 	.word	0x2000152c
 8005e54:	20001530 	.word	0x20001530

08005e58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d04f      	beq.n	8005f0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e6a:	2308      	movs	r3, #8
 8005e6c:	425b      	negs	r3, r3
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	4413      	add	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	4b25      	ldr	r3, [pc, #148]	@ (8005f14 <vPortFree+0xbc>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4013      	ands	r3, r2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10b      	bne.n	8005e9e <vPortFree+0x46>
	__asm volatile
 8005e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	60fb      	str	r3, [r7, #12]
}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	e7fd      	b.n	8005e9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00b      	beq.n	8005ebe <vPortFree+0x66>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	60bb      	str	r3, [r7, #8]
}
 8005eb8:	bf00      	nop
 8005eba:	bf00      	nop
 8005ebc:	e7fd      	b.n	8005eba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	4b14      	ldr	r3, [pc, #80]	@ (8005f14 <vPortFree+0xbc>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d01e      	beq.n	8005f0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d11a      	bne.n	8005f0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8005f14 <vPortFree+0xbc>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	43db      	mvns	r3, r3
 8005ede:	401a      	ands	r2, r3
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ee4:	f7fe ffd2 	bl	8004e8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	4b0a      	ldr	r3, [pc, #40]	@ (8005f18 <vPortFree+0xc0>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	4a09      	ldr	r2, [pc, #36]	@ (8005f18 <vPortFree+0xc0>)
 8005ef4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ef6:	6938      	ldr	r0, [r7, #16]
 8005ef8:	f000 f874 	bl	8005fe4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005efc:	4b07      	ldr	r3, [pc, #28]	@ (8005f1c <vPortFree+0xc4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3301      	adds	r3, #1
 8005f02:	4a06      	ldr	r2, [pc, #24]	@ (8005f1c <vPortFree+0xc4>)
 8005f04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f06:	f7fe ffcf 	bl	8004ea8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f0a:	bf00      	nop
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20001538 	.word	0x20001538
 8005f18:	20001528 	.word	0x20001528
 8005f1c:	20001534 	.word	0x20001534

08005f20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005f2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f2c:	4b27      	ldr	r3, [pc, #156]	@ (8005fcc <prvHeapInit+0xac>)
 8005f2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00c      	beq.n	8005f54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3307      	adds	r3, #7
 8005f3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 0307 	bic.w	r3, r3, #7
 8005f46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8005fcc <prvHeapInit+0xac>)
 8005f50:	4413      	add	r3, r2
 8005f52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f58:	4a1d      	ldr	r2, [pc, #116]	@ (8005fd0 <prvHeapInit+0xb0>)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8005fd0 <prvHeapInit+0xb0>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	4413      	add	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f6c:	2208      	movs	r2, #8
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	1a9b      	subs	r3, r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0307 	bic.w	r3, r3, #7
 8005f7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4a15      	ldr	r2, [pc, #84]	@ (8005fd4 <prvHeapInit+0xb4>)
 8005f80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f82:	4b14      	ldr	r3, [pc, #80]	@ (8005fd4 <prvHeapInit+0xb4>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2200      	movs	r2, #0
 8005f88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f8a:	4b12      	ldr	r3, [pc, #72]	@ (8005fd4 <prvHeapInit+0xb4>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	1ad2      	subs	r2, r2, r3
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8005fd4 <prvHeapInit+0xb4>)
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	4a0a      	ldr	r2, [pc, #40]	@ (8005fd8 <prvHeapInit+0xb8>)
 8005fae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	4a09      	ldr	r2, [pc, #36]	@ (8005fdc <prvHeapInit+0xbc>)
 8005fb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fb8:	4b09      	ldr	r3, [pc, #36]	@ (8005fe0 <prvHeapInit+0xc0>)
 8005fba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005fbe:	601a      	str	r2, [r3, #0]
}
 8005fc0:	bf00      	nop
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	2000051c 	.word	0x2000051c
 8005fd0:	2000151c 	.word	0x2000151c
 8005fd4:	20001524 	.word	0x20001524
 8005fd8:	2000152c 	.word	0x2000152c
 8005fdc:	20001528 	.word	0x20001528
 8005fe0:	20001538 	.word	0x20001538

08005fe4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fec:	4b28      	ldr	r3, [pc, #160]	@ (8006090 <prvInsertBlockIntoFreeList+0xac>)
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	e002      	b.n	8005ff8 <prvInsertBlockIntoFreeList+0x14>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d8f7      	bhi.n	8005ff2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	4413      	add	r3, r2
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	429a      	cmp	r2, r3
 8006012:	d108      	bne.n	8006026 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	441a      	add	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	441a      	add	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	429a      	cmp	r2, r3
 8006038:	d118      	bne.n	800606c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	4b15      	ldr	r3, [pc, #84]	@ (8006094 <prvInsertBlockIntoFreeList+0xb0>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d00d      	beq.n	8006062 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	441a      	add	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	601a      	str	r2, [r3, #0]
 8006060:	e008      	b.n	8006074 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006062:	4b0c      	ldr	r3, [pc, #48]	@ (8006094 <prvInsertBlockIntoFreeList+0xb0>)
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	e003      	b.n	8006074 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	429a      	cmp	r2, r3
 800607a:	d002      	beq.n	8006082 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006082:	bf00      	nop
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	2000151c 	.word	0x2000151c
 8006094:	20001524 	.word	0x20001524

08006098 <memset>:
 8006098:	4402      	add	r2, r0
 800609a:	4603      	mov	r3, r0
 800609c:	4293      	cmp	r3, r2
 800609e:	d100      	bne.n	80060a2 <memset+0xa>
 80060a0:	4770      	bx	lr
 80060a2:	f803 1b01 	strb.w	r1, [r3], #1
 80060a6:	e7f9      	b.n	800609c <memset+0x4>

080060a8 <_reclaim_reent>:
 80060a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006160 <_reclaim_reent+0xb8>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4283      	cmp	r3, r0
 80060ae:	b570      	push	{r4, r5, r6, lr}
 80060b0:	4604      	mov	r4, r0
 80060b2:	d053      	beq.n	800615c <_reclaim_reent+0xb4>
 80060b4:	69c3      	ldr	r3, [r0, #28]
 80060b6:	b31b      	cbz	r3, 8006100 <_reclaim_reent+0x58>
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	b163      	cbz	r3, 80060d6 <_reclaim_reent+0x2e>
 80060bc:	2500      	movs	r5, #0
 80060be:	69e3      	ldr	r3, [r4, #28]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	5959      	ldr	r1, [r3, r5]
 80060c4:	b9b1      	cbnz	r1, 80060f4 <_reclaim_reent+0x4c>
 80060c6:	3504      	adds	r5, #4
 80060c8:	2d80      	cmp	r5, #128	@ 0x80
 80060ca:	d1f8      	bne.n	80060be <_reclaim_reent+0x16>
 80060cc:	69e3      	ldr	r3, [r4, #28]
 80060ce:	4620      	mov	r0, r4
 80060d0:	68d9      	ldr	r1, [r3, #12]
 80060d2:	f000 f87b 	bl	80061cc <_free_r>
 80060d6:	69e3      	ldr	r3, [r4, #28]
 80060d8:	6819      	ldr	r1, [r3, #0]
 80060da:	b111      	cbz	r1, 80060e2 <_reclaim_reent+0x3a>
 80060dc:	4620      	mov	r0, r4
 80060de:	f000 f875 	bl	80061cc <_free_r>
 80060e2:	69e3      	ldr	r3, [r4, #28]
 80060e4:	689d      	ldr	r5, [r3, #8]
 80060e6:	b15d      	cbz	r5, 8006100 <_reclaim_reent+0x58>
 80060e8:	4629      	mov	r1, r5
 80060ea:	4620      	mov	r0, r4
 80060ec:	682d      	ldr	r5, [r5, #0]
 80060ee:	f000 f86d 	bl	80061cc <_free_r>
 80060f2:	e7f8      	b.n	80060e6 <_reclaim_reent+0x3e>
 80060f4:	680e      	ldr	r6, [r1, #0]
 80060f6:	4620      	mov	r0, r4
 80060f8:	f000 f868 	bl	80061cc <_free_r>
 80060fc:	4631      	mov	r1, r6
 80060fe:	e7e1      	b.n	80060c4 <_reclaim_reent+0x1c>
 8006100:	6961      	ldr	r1, [r4, #20]
 8006102:	b111      	cbz	r1, 800610a <_reclaim_reent+0x62>
 8006104:	4620      	mov	r0, r4
 8006106:	f000 f861 	bl	80061cc <_free_r>
 800610a:	69e1      	ldr	r1, [r4, #28]
 800610c:	b111      	cbz	r1, 8006114 <_reclaim_reent+0x6c>
 800610e:	4620      	mov	r0, r4
 8006110:	f000 f85c 	bl	80061cc <_free_r>
 8006114:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006116:	b111      	cbz	r1, 800611e <_reclaim_reent+0x76>
 8006118:	4620      	mov	r0, r4
 800611a:	f000 f857 	bl	80061cc <_free_r>
 800611e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006120:	b111      	cbz	r1, 8006128 <_reclaim_reent+0x80>
 8006122:	4620      	mov	r0, r4
 8006124:	f000 f852 	bl	80061cc <_free_r>
 8006128:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800612a:	b111      	cbz	r1, 8006132 <_reclaim_reent+0x8a>
 800612c:	4620      	mov	r0, r4
 800612e:	f000 f84d 	bl	80061cc <_free_r>
 8006132:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006134:	b111      	cbz	r1, 800613c <_reclaim_reent+0x94>
 8006136:	4620      	mov	r0, r4
 8006138:	f000 f848 	bl	80061cc <_free_r>
 800613c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800613e:	b111      	cbz	r1, 8006146 <_reclaim_reent+0x9e>
 8006140:	4620      	mov	r0, r4
 8006142:	f000 f843 	bl	80061cc <_free_r>
 8006146:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006148:	b111      	cbz	r1, 8006150 <_reclaim_reent+0xa8>
 800614a:	4620      	mov	r0, r4
 800614c:	f000 f83e 	bl	80061cc <_free_r>
 8006150:	6a23      	ldr	r3, [r4, #32]
 8006152:	b11b      	cbz	r3, 800615c <_reclaim_reent+0xb4>
 8006154:	4620      	mov	r0, r4
 8006156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800615a:	4718      	bx	r3
 800615c:	bd70      	pop	{r4, r5, r6, pc}
 800615e:	bf00      	nop
 8006160:	20000014 	.word	0x20000014

08006164 <__libc_init_array>:
 8006164:	b570      	push	{r4, r5, r6, lr}
 8006166:	4d0d      	ldr	r5, [pc, #52]	@ (800619c <__libc_init_array+0x38>)
 8006168:	4c0d      	ldr	r4, [pc, #52]	@ (80061a0 <__libc_init_array+0x3c>)
 800616a:	1b64      	subs	r4, r4, r5
 800616c:	10a4      	asrs	r4, r4, #2
 800616e:	2600      	movs	r6, #0
 8006170:	42a6      	cmp	r6, r4
 8006172:	d109      	bne.n	8006188 <__libc_init_array+0x24>
 8006174:	4d0b      	ldr	r5, [pc, #44]	@ (80061a4 <__libc_init_array+0x40>)
 8006176:	4c0c      	ldr	r4, [pc, #48]	@ (80061a8 <__libc_init_array+0x44>)
 8006178:	f000 f87e 	bl	8006278 <_init>
 800617c:	1b64      	subs	r4, r4, r5
 800617e:	10a4      	asrs	r4, r4, #2
 8006180:	2600      	movs	r6, #0
 8006182:	42a6      	cmp	r6, r4
 8006184:	d105      	bne.n	8006192 <__libc_init_array+0x2e>
 8006186:	bd70      	pop	{r4, r5, r6, pc}
 8006188:	f855 3b04 	ldr.w	r3, [r5], #4
 800618c:	4798      	blx	r3
 800618e:	3601      	adds	r6, #1
 8006190:	e7ee      	b.n	8006170 <__libc_init_array+0xc>
 8006192:	f855 3b04 	ldr.w	r3, [r5], #4
 8006196:	4798      	blx	r3
 8006198:	3601      	adds	r6, #1
 800619a:	e7f2      	b.n	8006182 <__libc_init_array+0x1e>
 800619c:	080064a8 	.word	0x080064a8
 80061a0:	080064a8 	.word	0x080064a8
 80061a4:	080064a8 	.word	0x080064a8
 80061a8:	080064ac 	.word	0x080064ac

080061ac <__retarget_lock_acquire_recursive>:
 80061ac:	4770      	bx	lr

080061ae <__retarget_lock_release_recursive>:
 80061ae:	4770      	bx	lr

080061b0 <memcpy>:
 80061b0:	440a      	add	r2, r1
 80061b2:	4291      	cmp	r1, r2
 80061b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80061b8:	d100      	bne.n	80061bc <memcpy+0xc>
 80061ba:	4770      	bx	lr
 80061bc:	b510      	push	{r4, lr}
 80061be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061c6:	4291      	cmp	r1, r2
 80061c8:	d1f9      	bne.n	80061be <memcpy+0xe>
 80061ca:	bd10      	pop	{r4, pc}

080061cc <_free_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4605      	mov	r5, r0
 80061d0:	2900      	cmp	r1, #0
 80061d2:	d041      	beq.n	8006258 <_free_r+0x8c>
 80061d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061d8:	1f0c      	subs	r4, r1, #4
 80061da:	2b00      	cmp	r3, #0
 80061dc:	bfb8      	it	lt
 80061de:	18e4      	addlt	r4, r4, r3
 80061e0:	f000 f83e 	bl	8006260 <__malloc_lock>
 80061e4:	4a1d      	ldr	r2, [pc, #116]	@ (800625c <_free_r+0x90>)
 80061e6:	6813      	ldr	r3, [r2, #0]
 80061e8:	b933      	cbnz	r3, 80061f8 <_free_r+0x2c>
 80061ea:	6063      	str	r3, [r4, #4]
 80061ec:	6014      	str	r4, [r2, #0]
 80061ee:	4628      	mov	r0, r5
 80061f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061f4:	f000 b83a 	b.w	800626c <__malloc_unlock>
 80061f8:	42a3      	cmp	r3, r4
 80061fa:	d908      	bls.n	800620e <_free_r+0x42>
 80061fc:	6820      	ldr	r0, [r4, #0]
 80061fe:	1821      	adds	r1, r4, r0
 8006200:	428b      	cmp	r3, r1
 8006202:	bf01      	itttt	eq
 8006204:	6819      	ldreq	r1, [r3, #0]
 8006206:	685b      	ldreq	r3, [r3, #4]
 8006208:	1809      	addeq	r1, r1, r0
 800620a:	6021      	streq	r1, [r4, #0]
 800620c:	e7ed      	b.n	80061ea <_free_r+0x1e>
 800620e:	461a      	mov	r2, r3
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	b10b      	cbz	r3, 8006218 <_free_r+0x4c>
 8006214:	42a3      	cmp	r3, r4
 8006216:	d9fa      	bls.n	800620e <_free_r+0x42>
 8006218:	6811      	ldr	r1, [r2, #0]
 800621a:	1850      	adds	r0, r2, r1
 800621c:	42a0      	cmp	r0, r4
 800621e:	d10b      	bne.n	8006238 <_free_r+0x6c>
 8006220:	6820      	ldr	r0, [r4, #0]
 8006222:	4401      	add	r1, r0
 8006224:	1850      	adds	r0, r2, r1
 8006226:	4283      	cmp	r3, r0
 8006228:	6011      	str	r1, [r2, #0]
 800622a:	d1e0      	bne.n	80061ee <_free_r+0x22>
 800622c:	6818      	ldr	r0, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	6053      	str	r3, [r2, #4]
 8006232:	4408      	add	r0, r1
 8006234:	6010      	str	r0, [r2, #0]
 8006236:	e7da      	b.n	80061ee <_free_r+0x22>
 8006238:	d902      	bls.n	8006240 <_free_r+0x74>
 800623a:	230c      	movs	r3, #12
 800623c:	602b      	str	r3, [r5, #0]
 800623e:	e7d6      	b.n	80061ee <_free_r+0x22>
 8006240:	6820      	ldr	r0, [r4, #0]
 8006242:	1821      	adds	r1, r4, r0
 8006244:	428b      	cmp	r3, r1
 8006246:	bf04      	itt	eq
 8006248:	6819      	ldreq	r1, [r3, #0]
 800624a:	685b      	ldreq	r3, [r3, #4]
 800624c:	6063      	str	r3, [r4, #4]
 800624e:	bf04      	itt	eq
 8006250:	1809      	addeq	r1, r1, r0
 8006252:	6021      	streq	r1, [r4, #0]
 8006254:	6054      	str	r4, [r2, #4]
 8006256:	e7ca      	b.n	80061ee <_free_r+0x22>
 8006258:	bd38      	pop	{r3, r4, r5, pc}
 800625a:	bf00      	nop
 800625c:	20001678 	.word	0x20001678

08006260 <__malloc_lock>:
 8006260:	4801      	ldr	r0, [pc, #4]	@ (8006268 <__malloc_lock+0x8>)
 8006262:	f7ff bfa3 	b.w	80061ac <__retarget_lock_acquire_recursive>
 8006266:	bf00      	nop
 8006268:	20001674 	.word	0x20001674

0800626c <__malloc_unlock>:
 800626c:	4801      	ldr	r0, [pc, #4]	@ (8006274 <__malloc_unlock+0x8>)
 800626e:	f7ff bf9e 	b.w	80061ae <__retarget_lock_release_recursive>
 8006272:	bf00      	nop
 8006274:	20001674 	.word	0x20001674

08006278 <_init>:
 8006278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627a:	bf00      	nop
 800627c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800627e:	bc08      	pop	{r3}
 8006280:	469e      	mov	lr, r3
 8006282:	4770      	bx	lr

08006284 <_fini>:
 8006284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006286:	bf00      	nop
 8006288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800628a:	bc08      	pop	{r3}
 800628c:	469e      	mov	lr, r3
 800628e:	4770      	bx	lr
