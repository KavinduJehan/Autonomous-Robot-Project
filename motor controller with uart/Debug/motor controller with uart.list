
motor controller with uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004750  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080048f0  080048f0  000058f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004970  08004970  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004970  08004970  00005970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004978  08004978  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004978  08004978  00005978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800497c  0800497c  0000597c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004980  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015b4  20000060  080049e0  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001614  080049e0  00006614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001114a  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b13  00000000  00000000  000171da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00019cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf6  00000000  00000000  0001ac80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a92  00000000  00000000  0001b876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001100c  00000000  00000000  00033308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093c0f  00000000  00000000  00044314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7f23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000430c  00000000  00000000  000d7f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000dc274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080048d8 	.word	0x080048d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080048d8 	.word	0x080048d8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	@ (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000007c 	.word	0x2000007c
 800053c:	2000011c 	.word	0x2000011c

08000540 <GPIO_Init>:
 * @brief  Initialize GPIO pins for motor control
 * @note   Configures PA0-PA3 as output pins for MX1508 motor driver
 * @retval None
 */
void GPIO_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	f107 030c 	add.w	r3, r7, #12
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]
    
  /* Enable GPIOA, GPIOB and GPIOC clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	4b47      	ldr	r3, [pc, #284]	@ (8000678 <GPIO_Init+0x138>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a46      	ldr	r2, [pc, #280]	@ (8000678 <GPIO_Init+0x138>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
 8000566:	4b44      	ldr	r3, [pc, #272]	@ (8000678 <GPIO_Init+0x138>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	4b40      	ldr	r3, [pc, #256]	@ (8000678 <GPIO_Init+0x138>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	4a3f      	ldr	r2, [pc, #252]	@ (8000678 <GPIO_Init+0x138>)
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	6313      	str	r3, [r2, #48]	@ 0x30
 8000582:	4b3d      	ldr	r3, [pc, #244]	@ (8000678 <GPIO_Init+0x138>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	4b39      	ldr	r3, [pc, #228]	@ (8000678 <GPIO_Init+0x138>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	4a38      	ldr	r2, [pc, #224]	@ (8000678 <GPIO_Init+0x138>)
 8000598:	f043 0304 	orr.w	r3, r3, #4
 800059c:	6313      	str	r3, [r2, #48]	@ 0x30
 800059e:	4b36      	ldr	r3, [pc, #216]	@ (8000678 <GPIO_Init+0x138>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	f003 0304 	and.w	r3, r3, #4
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]
    
    /* Configure Motor Control Pins (PA0-PA3) as Output */
    GPIO_InitStruct.Pin = MOTOR1_IN1_PIN | MOTOR1_IN2_PIN | MOTOR2_IN3_PIN | MOTOR2_IN4_PIN;
 80005aa:	230f      	movs	r3, #15
 80005ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(MOTOR_PORT, &GPIO_InitStruct);
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	4619      	mov	r1, r3
 80005c0:	482e      	ldr	r0, [pc, #184]	@ (800067c <GPIO_Init+0x13c>)
 80005c2:	f000 fd35 	bl	8001030 <HAL_GPIO_Init>
    
    /* Initialize all motor pins to LOW (stopped state) */
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2101      	movs	r1, #1
 80005ca:	482c      	ldr	r0, [pc, #176]	@ (800067c <GPIO_Init+0x13c>)
 80005cc:	f000 feb4 	bl	8001338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR1_IN2_PIN, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2102      	movs	r1, #2
 80005d4:	4829      	ldr	r0, [pc, #164]	@ (800067c <GPIO_Init+0x13c>)
 80005d6:	f000 feaf 	bl	8001338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2104      	movs	r1, #4
 80005de:	4827      	ldr	r0, [pc, #156]	@ (800067c <GPIO_Init+0x13c>)
 80005e0:	f000 feaa 	bl	8001338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2108      	movs	r1, #8
 80005e8:	4824      	ldr	r0, [pc, #144]	@ (800067c <GPIO_Init+0x13c>)
 80005ea:	f000 fea5 	bl	8001338 <HAL_GPIO_WritePin>
    
    /* Configure LED Indicator Pins (PC13, PC14) as Output */
    GPIO_InitStruct.Pin = LED_RX_PIN | LED_TX_PIN;
 80005ee:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80005f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	4619      	mov	r1, r3
 8000606:	481e      	ldr	r0, [pc, #120]	@ (8000680 <GPIO_Init+0x140>)
 8000608:	f000 fd12 	bl	8001030 <HAL_GPIO_Init>
    
    /* Initialize LED pins to OFF */
    HAL_GPIO_WritePin(LED_PORT, LED_RX_PIN, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000612:	481b      	ldr	r0, [pc, #108]	@ (8000680 <GPIO_Init+0x140>)
 8000614:	f000 fe90 	bl	8001338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_PORT, LED_TX_PIN, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800061e:	4818      	ldr	r0, [pc, #96]	@ (8000680 <GPIO_Init+0x140>)
 8000620:	f000 fe8a 	bl	8001338 <HAL_GPIO_WritePin>

  /* Configure Heartbeat LED (PB12) as Output */
  GPIO_InitStruct.Pin = HEARTBEAT_LED_PIN;
 8000624:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2300      	movs	r3, #0
 8000634:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HEARTBEAT_LED_PORT, &GPIO_InitStruct);
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	4619      	mov	r1, r3
 800063c:	4811      	ldr	r0, [pc, #68]	@ (8000684 <GPIO_Init+0x144>)
 800063e:	f000 fcf7 	bl	8001030 <HAL_GPIO_Init>

  /* Initialize Heartbeat LED to OFF */
  HAL_GPIO_WritePin(HEARTBEAT_LED_PORT, HEARTBEAT_LED_PIN, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000648:	480e      	ldr	r0, [pc, #56]	@ (8000684 <GPIO_Init+0x144>)
 800064a:	f000 fe75 	bl	8001338 <HAL_GPIO_WritePin>
    
    /* Configure UART Pins (PA9-TX, PA10-RX) */
    GPIO_InitStruct.Pin = UART_TX_PIN | UART_RX_PIN;
 800064e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000652:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000654:	2302      	movs	r3, #2
 8000656:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000658:	2301      	movs	r3, #1
 800065a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065c:	2302      	movs	r3, #2
 800065e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = UART_AF;
 8000660:	2307      	movs	r3, #7
 8000662:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(UART_PORT, &GPIO_InitStruct);
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	4619      	mov	r1, r3
 800066a:	4804      	ldr	r0, [pc, #16]	@ (800067c <GPIO_Init+0x13c>)
 800066c:	f000 fce0 	bl	8001030 <HAL_GPIO_Init>
}
 8000670:	bf00      	nop
 8000672:	3720      	adds	r7, #32
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40020000 	.word	0x40020000
 8000680:	40020800 	.word	0x40020800
 8000684:	40020400 	.word	0x40020400

08000688 <USART1_Init>:
 *         APB2 Clock = 16 MHz, Baud = 9600
 *         BRR = 16000000 / 9600 = 1666.67 ≈ 0x0682
 * @retval None
 */
void USART1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
    /* Enable USART1 clock (on APB2) */
    __HAL_RCC_USART1_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	4b24      	ldr	r3, [pc, #144]	@ (8000724 <USART1_Init+0x9c>)
 8000694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000696:	4a23      	ldr	r2, [pc, #140]	@ (8000724 <USART1_Init+0x9c>)
 8000698:	f043 0310 	orr.w	r3, r3, #16
 800069c:	6453      	str	r3, [r2, #68]	@ 0x44
 800069e:	4b21      	ldr	r3, [pc, #132]	@ (8000724 <USART1_Init+0x9c>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a2:	f003 0310 	and.w	r3, r3, #16
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
    
    /* Disable USART1 before configuration */
    USART1->CR1 &= ~USART_CR1_UE;
 80006aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <USART1_Init+0xa0>)
 80006ac:	68db      	ldr	r3, [r3, #12]
 80006ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000728 <USART1_Init+0xa0>)
 80006b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80006b4:	60d3      	str	r3, [r2, #12]
    
    /* Configure USART1 Control Register 1 (CR1) */
    USART1->CR1 = 0;  // Clear register
 80006b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000728 <USART1_Init+0xa0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
    USART1->CR1 |= USART_CR1_RE;      // Receiver enable
 80006bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <USART1_Init+0xa0>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	4a19      	ldr	r2, [pc, #100]	@ (8000728 <USART1_Init+0xa0>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_TE;      // Transmitter enable
 80006c8:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <USART1_Init+0xa0>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	4a16      	ldr	r2, [pc, #88]	@ (8000728 <USART1_Init+0xa0>)
 80006ce:	f043 0308 	orr.w	r3, r3, #8
 80006d2:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_RXNEIE;  // RXNE interrupt enable
 80006d4:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <USART1_Init+0xa0>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	4a13      	ldr	r2, [pc, #76]	@ (8000728 <USART1_Init+0xa0>)
 80006da:	f043 0320 	orr.w	r3, r3, #32
 80006de:	60d3      	str	r3, [r2, #12]
    // Word length = 8 bits (M bit = 0)
    // Parity control disabled (PCE bit = 0)
    
    /* Configure USART1 Control Register 2 (CR2) */
    USART1->CR2 = 0;  // Clear register
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <USART1_Init+0xa0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
    // 1 Stop bit (STOP[1:0] = 00)
    
    /* Configure USART1 Control Register 3 (CR3) */
    USART1->CR3 = 0;  // Clear register
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <USART1_Init+0xa0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
    USART1->CR3 |= USART_CR3_EIE;  // Error interrupt enable
 80006ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <USART1_Init+0xa0>)
 80006ee:	695b      	ldr	r3, [r3, #20]
 80006f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000728 <USART1_Init+0xa0>)
 80006f2:	f043 0301 	orr.w	r3, r3, #1
 80006f6:	6153      	str	r3, [r2, #20]
     * BRR = 16000000 / 9600 = 1666.67
     * BRR (hex) = 0x0682
     * 
     * Actual baud = 16000000 / 1666 = 9603.84 (0.04% error - acceptable)
     */
    USART1->BRR = 0x0682;  // For 9600 baud at 16MHz APB2 clock
 80006f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <USART1_Init+0xa0>)
 80006fa:	f240 6282 	movw	r2, #1666	@ 0x682
 80006fe:	609a      	str	r2, [r3, #8]
    
    /* Enable USART1 */
    USART1->CR1 |= USART_CR1_UE;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <USART1_Init+0xa0>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	4a08      	ldr	r2, [pc, #32]	@ (8000728 <USART1_Init+0xa0>)
 8000706:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800070a:	60d3      	str	r3, [r2, #12]
    
    /* Configure NVIC for USART1 interrupt */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2105      	movs	r1, #5
 8000710:	2025      	movs	r0, #37	@ 0x25
 8000712:	f000 fc63 	bl	8000fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000716:	2025      	movs	r0, #37	@ 0x25
 8000718:	f000 fc7c 	bl	8001014 <HAL_NVIC_EnableIRQ>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800
 8000728:	40011000 	.word	0x40011000

0800072c <Motor_Forward>:
/**
 * @brief  Motor Forward - Both motors forward
 * @retval None
 */
void Motor_Forward(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR1_IN1_PIN, GPIO_PIN_SET);
 8000730:	2201      	movs	r2, #1
 8000732:	2101      	movs	r1, #1
 8000734:	4809      	ldr	r0, [pc, #36]	@ (800075c <Motor_Forward+0x30>)
 8000736:	f000 fdff 	bl	8001338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR1_IN2_PIN, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2102      	movs	r1, #2
 800073e:	4807      	ldr	r0, [pc, #28]	@ (800075c <Motor_Forward+0x30>)
 8000740:	f000 fdfa 	bl	8001338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR2_IN3_PIN, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	2104      	movs	r1, #4
 8000748:	4804      	ldr	r0, [pc, #16]	@ (800075c <Motor_Forward+0x30>)
 800074a:	f000 fdf5 	bl	8001338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2108      	movs	r1, #8
 8000752:	4802      	ldr	r0, [pc, #8]	@ (800075c <Motor_Forward+0x30>)
 8000754:	f000 fdf0 	bl	8001338 <HAL_GPIO_WritePin>
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40020000 	.word	0x40020000

08000760 <Motor_Reverse>:
/**
 * @brief  Motor Reverse - Both motors backward
 * @retval None
 */
void Motor_Reverse(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2101      	movs	r1, #1
 8000768:	4809      	ldr	r0, [pc, #36]	@ (8000790 <Motor_Reverse+0x30>)
 800076a:	f000 fde5 	bl	8001338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR1_IN2_PIN, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	2102      	movs	r1, #2
 8000772:	4807      	ldr	r0, [pc, #28]	@ (8000790 <Motor_Reverse+0x30>)
 8000774:	f000 fde0 	bl	8001338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2104      	movs	r1, #4
 800077c:	4804      	ldr	r0, [pc, #16]	@ (8000790 <Motor_Reverse+0x30>)
 800077e:	f000 fddb 	bl	8001338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR2_IN4_PIN, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	2108      	movs	r1, #8
 8000786:	4802      	ldr	r0, [pc, #8]	@ (8000790 <Motor_Reverse+0x30>)
 8000788:	f000 fdd6 	bl	8001338 <HAL_GPIO_WritePin>
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40020000 	.word	0x40020000

08000794 <Motor_Left>:
/**
 * @brief  Motor Left - Left motor reverse, right motor forward
 * @retval None
 */
void Motor_Left(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2101      	movs	r1, #1
 800079c:	4809      	ldr	r0, [pc, #36]	@ (80007c4 <Motor_Left+0x30>)
 800079e:	f000 fdcb 	bl	8001338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR1_IN2_PIN, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	2102      	movs	r1, #2
 80007a6:	4807      	ldr	r0, [pc, #28]	@ (80007c4 <Motor_Left+0x30>)
 80007a8:	f000 fdc6 	bl	8001338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR2_IN3_PIN, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2104      	movs	r1, #4
 80007b0:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <Motor_Left+0x30>)
 80007b2:	f000 fdc1 	bl	8001338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2108      	movs	r1, #8
 80007ba:	4802      	ldr	r0, [pc, #8]	@ (80007c4 <Motor_Left+0x30>)
 80007bc:	f000 fdbc 	bl	8001338 <HAL_GPIO_WritePin>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40020000 	.word	0x40020000

080007c8 <Motor_Right>:
/**
 * @brief  Motor Right - Left motor forward, right motor reverse
 * @retval None
 */
void Motor_Right(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR1_IN1_PIN, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	2101      	movs	r1, #1
 80007d0:	4809      	ldr	r0, [pc, #36]	@ (80007f8 <Motor_Right+0x30>)
 80007d2:	f000 fdb1 	bl	8001338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR1_IN2_PIN, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2102      	movs	r1, #2
 80007da:	4807      	ldr	r0, [pc, #28]	@ (80007f8 <Motor_Right+0x30>)
 80007dc:	f000 fdac 	bl	8001338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2104      	movs	r1, #4
 80007e4:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <Motor_Right+0x30>)
 80007e6:	f000 fda7 	bl	8001338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR2_IN4_PIN, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	2108      	movs	r1, #8
 80007ee:	4802      	ldr	r0, [pc, #8]	@ (80007f8 <Motor_Right+0x30>)
 80007f0:	f000 fda2 	bl	8001338 <HAL_GPIO_WritePin>
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40020000 	.word	0x40020000

080007fc <Motor_Stop>:
/**
 * @brief  Motor Stop - All motors off
 * @retval None
 */
void Motor_Stop(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR1_IN1_PIN, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	2101      	movs	r1, #1
 8000804:	4809      	ldr	r0, [pc, #36]	@ (800082c <Motor_Stop+0x30>)
 8000806:	f000 fd97 	bl	8001338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR1_IN2_PIN, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2102      	movs	r1, #2
 800080e:	4807      	ldr	r0, [pc, #28]	@ (800082c <Motor_Stop+0x30>)
 8000810:	f000 fd92 	bl	8001338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR2_IN3_PIN, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	2104      	movs	r1, #4
 8000818:	4804      	ldr	r0, [pc, #16]	@ (800082c <Motor_Stop+0x30>)
 800081a:	f000 fd8d 	bl	8001338 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_PORT, MOTOR2_IN4_PIN, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2108      	movs	r1, #8
 8000822:	4802      	ldr	r0, [pc, #8]	@ (800082c <Motor_Stop+0x30>)
 8000824:	f000 fd88 	bl	8001338 <HAL_GPIO_WritePin>
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40020000 	.word	0x40020000

08000830 <Process_Command>:
 * @brief  Process received command
 * @param  cmd: Command character received via UART
 * @retval None
 */
void Process_Command(uint8_t cmd)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
    switch(cmd)
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	3b46      	subs	r3, #70	@ 0x46
 800083e:	2b0e      	cmp	r3, #14
 8000840:	d82f      	bhi.n	80008a2 <Process_Command+0x72>
 8000842:	a201      	add	r2, pc, #4	@ (adr r2, 8000848 <Process_Command+0x18>)
 8000844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000848:	08000885 	.word	0x08000885
 800084c:	080008a3 	.word	0x080008a3
 8000850:	080008a3 	.word	0x080008a3
 8000854:	080008a3 	.word	0x080008a3
 8000858:	080008a3 	.word	0x080008a3
 800085c:	080008a3 	.word	0x080008a3
 8000860:	08000891 	.word	0x08000891
 8000864:	080008a3 	.word	0x080008a3
 8000868:	080008a3 	.word	0x080008a3
 800086c:	080008a3 	.word	0x080008a3
 8000870:	080008a3 	.word	0x080008a3
 8000874:	080008a3 	.word	0x080008a3
 8000878:	0800088b 	.word	0x0800088b
 800087c:	0800089d 	.word	0x0800089d
 8000880:	08000897 	.word	0x08000897
    {
        case CMD_FORWARD:
            Motor_Forward();
 8000884:	f7ff ff52 	bl	800072c <Motor_Forward>
            break;
 8000888:	e00e      	b.n	80008a8 <Process_Command+0x78>
            
        case CMD_REVERSE:
            Motor_Reverse();
 800088a:	f7ff ff69 	bl	8000760 <Motor_Reverse>
            break;
 800088e:	e00b      	b.n	80008a8 <Process_Command+0x78>
            
        case CMD_LEFT:
            Motor_Left();
 8000890:	f7ff ff80 	bl	8000794 <Motor_Left>
            break;
 8000894:	e008      	b.n	80008a8 <Process_Command+0x78>
            
        case CMD_RIGHT:
            Motor_Right();
 8000896:	f7ff ff97 	bl	80007c8 <Motor_Right>
            break;
 800089a:	e005      	b.n	80008a8 <Process_Command+0x78>
            
        case CMD_STOP:
            Motor_Stop();
 800089c:	f7ff ffae 	bl	80007fc <Motor_Stop>
            break;
 80008a0:	e002      	b.n	80008a8 <Process_Command+0x78>
            
        default:
            // Invalid command - do nothing or stop for safety
            Motor_Stop();
 80008a2:	f7ff ffab 	bl	80007fc <Motor_Stop>
            break;
 80008a6:	bf00      	nop
    }
    
    // Update last command time
    last_command_time = HAL_GetTick();
 80008a8:	f000 fad4 	bl	8000e54 <HAL_GetTick>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a03      	ldr	r2, [pc, #12]	@ (80008bc <Process_Command+0x8c>)
 80008b0:	6013      	str	r3, [r2, #0]
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000032c 	.word	0x2000032c

080008c0 <Safety_Check>:
/**
 * @brief  Safety check - emergency stop if no command received
 * @retval None
 */
void Safety_Check(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
    if ((HAL_GetTick() - last_command_time) > SAFETY_TIMEOUT_MS)
 80008c4:	f000 fac6 	bl	8000e54 <HAL_GetTick>
 80008c8:	4602      	mov	r2, r0
 80008ca:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <Safety_Check+0x20>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80008d4:	d901      	bls.n	80008da <Safety_Check+0x1a>
    {
        Motor_Stop();
 80008d6:	f7ff ff91 	bl	80007fc <Motor_Stop>
    }
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000032c 	.word	0x2000032c

080008e4 <USART1_IRQHandler>:
 * @brief  USART1 Interrupt Handler
 * @note   Handles received data and errors
 * @retval None
 */
void USART1_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
    /* Check for RXNE (Receive Data Register Not Empty) */
    if (USART1->SR & USART_SR_RXNE)
 80008ea:	4b30      	ldr	r3, [pc, #192]	@ (80009ac <USART1_IRQHandler+0xc8>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f003 0320 	and.w	r3, r3, #32
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d017      	beq.n	8000926 <USART1_IRQHandler+0x42>
    {
        /* Toggle RX LED to indicate activity */
        HAL_GPIO_TogglePin(LED_PORT, LED_RX_PIN);
 80008f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008fa:	482d      	ldr	r0, [pc, #180]	@ (80009b0 <USART1_IRQHandler+0xcc>)
 80008fc:	f000 fd35 	bl	800136a <HAL_GPIO_TogglePin>
        
        /* Read data register (clears RXNE flag) */
    rx_data = (uint8_t)(USART1->DR & 0xFF);
 8000900:	4b2a      	ldr	r3, [pc, #168]	@ (80009ac <USART1_IRQHandler+0xc8>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <USART1_IRQHandler+0xd0>)
 8000908:	701a      	strb	r2, [r3, #0]
    /* Push received byte into the UART command queue (ISR-safe) */
    if (uartCmdQueueHandle != NULL)
 800090a:	4b2b      	ldr	r3, [pc, #172]	@ (80009b8 <USART1_IRQHandler+0xd4>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d009      	beq.n	8000926 <USART1_IRQHandler+0x42>
    {
      osMessagePut(uartCmdQueueHandle, rx_data, 0);
 8000912:	4b29      	ldr	r3, [pc, #164]	@ (80009b8 <USART1_IRQHandler+0xd4>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a27      	ldr	r2, [pc, #156]	@ (80009b4 <USART1_IRQHandler+0xd0>)
 8000918:	7812      	ldrb	r2, [r2, #0]
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	4611      	mov	r1, r2
 800091e:	2200      	movs	r2, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f001 fcdb 	bl	80022dc <osMessagePut>
    }
    }
    
    /* Check for TXE (Transmit Data Register Empty) - indicates TX activity */
    if (USART1->SR & USART_SR_TXE)
 8000926:	4b21      	ldr	r3, [pc, #132]	@ (80009ac <USART1_IRQHandler+0xc8>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800092e:	2b00      	cmp	r3, #0
 8000930:	d004      	beq.n	800093c <USART1_IRQHandler+0x58>
    {
        /* Toggle TX LED to indicate activity (optional) */
        HAL_GPIO_TogglePin(LED_PORT, LED_TX_PIN);
 8000932:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000936:	481e      	ldr	r0, [pc, #120]	@ (80009b0 <USART1_IRQHandler+0xcc>)
 8000938:	f000 fd17 	bl	800136a <HAL_GPIO_TogglePin>
    }
    
    /* Check for errors */
    if (USART1->SR & USART_SR_ORE)  // Overrun error
 800093c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ac <USART1_IRQHandler+0xc8>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f003 0308 	and.w	r3, r3, #8
 8000944:	2b00      	cmp	r3, #0
 8000946:	d006      	beq.n	8000956 <USART1_IRQHandler+0x72>
    {
        uart_error = true;
 8000948:	4b1c      	ldr	r3, [pc, #112]	@ (80009bc <USART1_IRQHandler+0xd8>)
 800094a:	2201      	movs	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]
        volatile uint32_t dummy = USART1->DR;  // Clear ORE flag
 800094e:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <USART1_IRQHandler+0xc8>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	60fb      	str	r3, [r7, #12]
        (void)dummy;  // Avoid unused variable warning
 8000954:	68fb      	ldr	r3, [r7, #12]
    }
    
    if (USART1->SR & USART_SR_FE)   // Framing error
 8000956:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <USART1_IRQHandler+0xc8>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	2b00      	cmp	r3, #0
 8000960:	d006      	beq.n	8000970 <USART1_IRQHandler+0x8c>
    {
        uart_error = true;
 8000962:	4b16      	ldr	r3, [pc, #88]	@ (80009bc <USART1_IRQHandler+0xd8>)
 8000964:	2201      	movs	r2, #1
 8000966:	701a      	strb	r2, [r3, #0]
        volatile uint32_t dummy = USART1->DR;  // Clear FE flag
 8000968:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <USART1_IRQHandler+0xc8>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	60bb      	str	r3, [r7, #8]
        (void)dummy;
 800096e:	68bb      	ldr	r3, [r7, #8]
    }
    
    if (USART1->SR & USART_SR_NE)   // Noise error
 8000970:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <USART1_IRQHandler+0xc8>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	2b00      	cmp	r3, #0
 800097a:	d006      	beq.n	800098a <USART1_IRQHandler+0xa6>
    {
        uart_error = true;
 800097c:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <USART1_IRQHandler+0xd8>)
 800097e:	2201      	movs	r2, #1
 8000980:	701a      	strb	r2, [r3, #0]
        volatile uint32_t dummy = USART1->DR;  // Clear NE flag
 8000982:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <USART1_IRQHandler+0xc8>)
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	607b      	str	r3, [r7, #4]
        (void)dummy;
 8000988:	687b      	ldr	r3, [r7, #4]
    }
    
    if (USART1->SR & USART_SR_PE)   // Parity error
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <USART1_IRQHandler+0xc8>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	2b00      	cmp	r3, #0
 8000994:	d006      	beq.n	80009a4 <USART1_IRQHandler+0xc0>
    {
        uart_error = true;
 8000996:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <USART1_IRQHandler+0xd8>)
 8000998:	2201      	movs	r2, #1
 800099a:	701a      	strb	r2, [r3, #0]
        volatile uint32_t dummy = USART1->DR;  // Clear PE flag
 800099c:	4b03      	ldr	r3, [pc, #12]	@ (80009ac <USART1_IRQHandler+0xc8>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	603b      	str	r3, [r7, #0]
        (void)dummy;
 80009a2:	683b      	ldr	r3, [r7, #0]
    }
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40011000 	.word	0x40011000
 80009b0:	40020800 	.word	0x40020800
 80009b4:	20000328 	.word	0x20000328
 80009b8:	20000324 	.word	0x20000324
 80009bc:	20000330 	.word	0x20000330

080009c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c0:	b5b0      	push	{r4, r5, r7, lr}
 80009c2:	b092      	sub	sp, #72	@ 0x48
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c6:	f000 fa0f 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ca:	f000 f853 	bl	8000a74 <SystemClock_Config>

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  
  /* Initialize GPIO for motor control and UART */
  GPIO_Init();
 80009ce:	f7ff fdb7 	bl	8000540 <GPIO_Init>
  
  /* Initialize USART1 for command reception */
  USART1_Init();
 80009d2:	f7ff fe59 	bl	8000688 <USART1_Init>
  
  /* Initialize safety timer */
  last_command_time = HAL_GetTick();
 80009d6:	f000 fa3d 	bl	8000e54 <HAL_GetTick>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a1e      	ldr	r2, [pc, #120]	@ (8000a58 <main+0x98>)
 80009de:	6013      	str	r3, [r2, #0]
  
  /* Start with motors stopped */
  Motor_Stop();
 80009e0:	f7ff ff0c 	bl	80007fc <Motor_Stop>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* Create UART command queue (stores command bytes) */
  osMessageQDef(uartCmdQueue, 32, uint16_t);
 80009e4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a5c <main+0x9c>)
 80009e6:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80009ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uartCmdQueueHandle = osMessageCreate(osMessageQ(uartCmdQueue), NULL);
 80009f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 fc47 	bl	800228a <osMessageCreate>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a18      	ldr	r2, [pc, #96]	@ (8000a60 <main+0xa0>)
 8000a00:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a02:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <main+0xa4>)
 8000a04:	f107 041c 	add.w	r4, r7, #28
 8000a08:	461d      	mov	r5, r3
 8000a0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f001 fbd4 	bl	80021ca <osThreadCreate>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4a10      	ldr	r2, [pc, #64]	@ (8000a68 <main+0xa8>)
 8000a26:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorTask */
  osThreadDef(motorTask, StartMotorTask, osPriorityAboveNormal, 0, 256);
 8000a28:	4b10      	ldr	r3, [pc, #64]	@ (8000a6c <main+0xac>)
 8000a2a:	463c      	mov	r4, r7
 8000a2c:	461d      	mov	r5, r3
 8000a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 fbc3 	bl	80021ca <osThreadCreate>
 8000a44:	4603      	mov	r3, r0
 8000a46:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <main+0xb0>)
 8000a48:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a4a:	f001 fbb7 	bl	80021bc <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
    // Main loop is now managed by FreeRTOS tasks
    osDelay(1000); // Idle loop, should never reach here
 8000a4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a52:	f001 fc06 	bl	8002262 <osDelay>
 8000a56:	e7fa      	b.n	8000a4e <main+0x8e>
 8000a58:	2000032c 	.word	0x2000032c
 8000a5c:	080048f0 	.word	0x080048f0
 8000a60:	20000324 	.word	0x20000324
 8000a64:	0800490c 	.word	0x0800490c
 8000a68:	2000031c 	.word	0x2000031c
 8000a6c:	08004934 	.word	0x08004934
 8000a70:	20000320 	.word	0x20000320

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b094      	sub	sp, #80	@ 0x50
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 0320 	add.w	r3, r7, #32
 8000a7e:	2230      	movs	r2, #48	@ 0x30
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f003 fe38 	bl	80046f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	4b23      	ldr	r3, [pc, #140]	@ (8000b2c <SystemClock_Config+0xb8>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa0:	4a22      	ldr	r2, [pc, #136]	@ (8000b2c <SystemClock_Config+0xb8>)
 8000aa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa8:	4b20      	ldr	r3, [pc, #128]	@ (8000b2c <SystemClock_Config+0xb8>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b30 <SystemClock_Config+0xbc>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b30 <SystemClock_Config+0xbc>)
 8000ac2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	4b19      	ldr	r3, [pc, #100]	@ (8000b30 <SystemClock_Config+0xbc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000adc:	2310      	movs	r3, #16
 8000ade:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae4:	f107 0320 	add.w	r3, r7, #32
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 fc59 	bl	80013a0 <HAL_RCC_OscConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000af4:	f000 f867 	bl	8000bc6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af8:	230f      	movs	r3, #15
 8000afa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 febc 	bl	8001890 <HAL_RCC_ClockConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b1e:	f000 f852 	bl	8000bc6 <Error_Handler>
  }
}
 8000b22:	bf00      	nop
 8000b24:	3750      	adds	r7, #80	@ 0x50
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40007000 	.word	0x40007000

08000b34 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Housekeeping/idle task */
  for(;;)
  {
  /* Blink a heartbeat so you can see the RTOS is running */
  HAL_GPIO_TogglePin(HEARTBEAT_LED_PORT, HEARTBEAT_LED_PIN);
 8000b3c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b40:	4803      	ldr	r0, [pc, #12]	@ (8000b50 <StartDefaultTask+0x1c>)
 8000b42:	f000 fc12 	bl	800136a <HAL_GPIO_TogglePin>
    osDelay(250);
 8000b46:	20fa      	movs	r0, #250	@ 0xfa
 8000b48:	f001 fb8b 	bl	8002262 <osDelay>
  HAL_GPIO_TogglePin(HEARTBEAT_LED_PORT, HEARTBEAT_LED_PIN);
 8000b4c:	bf00      	nop
 8000b4e:	e7f5      	b.n	8000b3c <StartDefaultTask+0x8>
 8000b50:	40020400 	.word	0x40020400

08000b54 <StartMotorTask>:
/**
  * @brief  Function implementing the motorTask thread.
  *         Receives UART bytes from queue and drives motors.
  */
void StartMotorTask(void const * argument)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* Wait up to 10ms for a new command */
    osEvent evt = osMessageGet(uartCmdQueueHandle, 10);
 8000b5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <StartMotorTask+0x4c>)
 8000b5e:	6819      	ldr	r1, [r3, #0]
 8000b60:	f107 0308 	add.w	r3, r7, #8
 8000b64:	220a      	movs	r2, #10
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 fbf8 	bl	800235c <osMessageGet>
    if (evt.status == osEventMessage)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	2b10      	cmp	r3, #16
 8000b70:	d108      	bne.n	8000b84 <StartMotorTask+0x30>
    {
        uint8_t cmd = (uint8_t)(evt.value.v & 0xFF);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	75fb      	strb	r3, [r7, #23]
        Process_Command(cmd);
 8000b76:	7dfb      	ldrb	r3, [r7, #23]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fe59 	bl	8000830 <Process_Command>
        uart_error = false; // Clear error on good cmd
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <StartMotorTask+0x50>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
    }

    /* Periodic safety check */
    Safety_Check();
 8000b84:	f7ff fe9c 	bl	80008c0 <Safety_Check>

    /* If an error was flagged by IRQ, react safely */
    if (uart_error)
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <StartMotorTask+0x50>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d0e4      	beq.n	8000b5c <StartMotorTask+0x8>
    {
        Motor_Stop();
 8000b92:	f7ff fe33 	bl	80007fc <Motor_Stop>
        uart_error = false;
 8000b96:	4b03      	ldr	r3, [pc, #12]	@ (8000ba4 <StartMotorTask+0x50>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
  {
 8000b9c:	e7de      	b.n	8000b5c <StartMotorTask+0x8>
 8000b9e:	bf00      	nop
 8000ba0:	20000324 	.word	0x20000324
 8000ba4:	20000330 	.word	0x20000330

08000ba8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bb8:	d101      	bne.n	8000bbe <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000bba:	f000 f937 	bl	8000e2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bca:	b672      	cpsid	i
}
 8000bcc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bce:	bf00      	nop
 8000bd0:	e7fd      	b.n	8000bce <Error_Handler+0x8>
	...

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <HAL_MspInit+0x54>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be2:	4a11      	ldr	r2, [pc, #68]	@ (8000c28 <HAL_MspInit+0x54>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bea:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <HAL_MspInit+0x54>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <HAL_MspInit+0x54>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <HAL_MspInit+0x54>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c06:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <HAL_MspInit+0x54>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	210f      	movs	r1, #15
 8000c16:	f06f 0001 	mvn.w	r0, #1
 8000c1a:	f000 f9df 	bl	8000fdc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800

08000c2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08e      	sub	sp, #56	@ 0x38
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	4b34      	ldr	r3, [pc, #208]	@ (8000d14 <HAL_InitTick+0xe8>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c44:	4a33      	ldr	r2, [pc, #204]	@ (8000d14 <HAL_InitTick+0xe8>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4c:	4b31      	ldr	r3, [pc, #196]	@ (8000d14 <HAL_InitTick+0xe8>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c58:	f107 0210 	add.w	r2, r7, #16
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4611      	mov	r1, r2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 ffe0 	bl	8001c28 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c68:	6a3b      	ldr	r3, [r7, #32]
 8000c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d103      	bne.n	8000c7a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c72:	f000 ffc5 	bl	8001c00 <HAL_RCC_GetPCLK1Freq>
 8000c76:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c78:	e004      	b.n	8000c84 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c7a:	f000 ffc1 	bl	8001c00 <HAL_RCC_GetPCLK1Freq>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c86:	4a24      	ldr	r2, [pc, #144]	@ (8000d18 <HAL_InitTick+0xec>)
 8000c88:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8c:	0c9b      	lsrs	r3, r3, #18
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000c92:	4b22      	ldr	r3, [pc, #136]	@ (8000d1c <HAL_InitTick+0xf0>)
 8000c94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c98:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000c9a:	4b20      	ldr	r3, [pc, #128]	@ (8000d1c <HAL_InitTick+0xf0>)
 8000c9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ca0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d1c <HAL_InitTick+0xf0>)
 8000ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ca6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <HAL_InitTick+0xf0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <HAL_InitTick+0xf0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb4:	4b19      	ldr	r3, [pc, #100]	@ (8000d1c <HAL_InitTick+0xf0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000cba:	4818      	ldr	r0, [pc, #96]	@ (8000d1c <HAL_InitTick+0xf0>)
 8000cbc:	f000 ffe6 	bl	8001c8c <HAL_TIM_Base_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000cc6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d11b      	bne.n	8000d06 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000cce:	4813      	ldr	r0, [pc, #76]	@ (8000d1c <HAL_InitTick+0xf0>)
 8000cd0:	f001 f836 	bl	8001d40 <HAL_TIM_Base_Start_IT>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000cda:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d111      	bne.n	8000d06 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ce2:	201c      	movs	r0, #28
 8000ce4:	f000 f996 	bl	8001014 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b0f      	cmp	r3, #15
 8000cec:	d808      	bhi.n	8000d00 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	201c      	movs	r0, #28
 8000cf4:	f000 f972 	bl	8000fdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cf8:	4a09      	ldr	r2, [pc, #36]	@ (8000d20 <HAL_InitTick+0xf4>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	e002      	b.n	8000d06 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d06:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3738      	adds	r7, #56	@ 0x38
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800
 8000d18:	431bde83 	.word	0x431bde83
 8000d1c:	20000334 	.word	0x20000334
 8000d20:	20000004 	.word	0x20000004

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <NMI_Handler+0x4>

08000d2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d60:	4802      	ldr	r0, [pc, #8]	@ (8000d6c <TIM2_IRQHandler+0x10>)
 8000d62:	f001 f84f 	bl	8001e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000334 	.word	0x20000334

08000d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <SystemInit+0x20>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d7a:	4a05      	ldr	r2, [pc, #20]	@ (8000d90 <SystemInit+0x20>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dcc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d98:	f7ff ffea 	bl	8000d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d9c:	480c      	ldr	r0, [pc, #48]	@ (8000dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d9e:	490d      	ldr	r1, [pc, #52]	@ (8000dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da0:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db4:	4c0a      	ldr	r4, [pc, #40]	@ (8000de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f003 fcff 	bl	80047c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fdfb 	bl	80009c0 <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000dd8:	08004980 	.word	0x08004980
  ldr r2, =_sbss
 8000ddc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000de0:	20001614 	.word	0x20001614

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dec:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e28 <HAL_Init+0x40>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <HAL_Init+0x40>)
 8000dfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	@ (8000e28 <HAL_Init+0x40>)
 8000e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f8d8 	bl	8000fc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	200f      	movs	r0, #15
 8000e18:	f7ff ff08 	bl	8000c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff feda 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023c00 	.word	0x40023c00

08000e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <HAL_IncTick+0x20>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <HAL_IncTick+0x24>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a04      	ldr	r2, [pc, #16]	@ (8000e50 <HAL_IncTick+0x24>)
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	2000037c 	.word	0x2000037c

08000e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b03      	ldr	r3, [pc, #12]	@ (8000e68 <HAL_GetTick+0x14>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	2000037c 	.word	0x2000037c

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	@ (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	db0b      	blt.n	8000efa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	4907      	ldr	r1, [pc, #28]	@ (8000f08 <__NVIC_EnableIRQ+0x38>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000e100 	.word	0xe000e100

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	@ (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	@ (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	@ 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	@ 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ff4c 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fee:	f7ff ff61 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8000ff2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	68b9      	ldr	r1, [r7, #8]
 8000ff8:	6978      	ldr	r0, [r7, #20]
 8000ffa:	f7ff ffb1 	bl	8000f60 <NVIC_EncodePriority>
 8000ffe:	4602      	mov	r2, r0
 8001000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff80 	bl	8000f0c <__NVIC_SetPriority>
}
 800100c:	bf00      	nop
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff54 	bl	8000ed0 <__NVIC_EnableIRQ>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	@ 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	e159      	b.n	8001300 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	429a      	cmp	r2, r3
 8001066:	f040 8148 	bne.w	80012fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b01      	cmp	r3, #1
 8001074:	d005      	beq.n	8001082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107e:	2b02      	cmp	r3, #2
 8001080:	d130      	bne.n	80010e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	f003 0201 	and.w	r2, r3, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d017      	beq.n	8001120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d123      	bne.n	8001174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	08da      	lsrs	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3208      	adds	r2, #8
 8001134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3208      	adds	r2, #8
 800116e:	69b9      	ldr	r1, [r7, #24]
 8001170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0203 	and.w	r2, r3, #3
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80a2 	beq.w	80012fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b57      	ldr	r3, [pc, #348]	@ (8001318 <HAL_GPIO_Init+0x2e8>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	4a56      	ldr	r2, [pc, #344]	@ (8001318 <HAL_GPIO_Init+0x2e8>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011c6:	4b54      	ldr	r3, [pc, #336]	@ (8001318 <HAL_GPIO_Init+0x2e8>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d2:	4a52      	ldr	r2, [pc, #328]	@ (800131c <HAL_GPIO_Init+0x2ec>)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a49      	ldr	r2, [pc, #292]	@ (8001320 <HAL_GPIO_Init+0x2f0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d019      	beq.n	8001232 <HAL_GPIO_Init+0x202>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a48      	ldr	r2, [pc, #288]	@ (8001324 <HAL_GPIO_Init+0x2f4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d013      	beq.n	800122e <HAL_GPIO_Init+0x1fe>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a47      	ldr	r2, [pc, #284]	@ (8001328 <HAL_GPIO_Init+0x2f8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d00d      	beq.n	800122a <HAL_GPIO_Init+0x1fa>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a46      	ldr	r2, [pc, #280]	@ (800132c <HAL_GPIO_Init+0x2fc>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d007      	beq.n	8001226 <HAL_GPIO_Init+0x1f6>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a45      	ldr	r2, [pc, #276]	@ (8001330 <HAL_GPIO_Init+0x300>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d101      	bne.n	8001222 <HAL_GPIO_Init+0x1f2>
 800121e:	2304      	movs	r3, #4
 8001220:	e008      	b.n	8001234 <HAL_GPIO_Init+0x204>
 8001222:	2307      	movs	r3, #7
 8001224:	e006      	b.n	8001234 <HAL_GPIO_Init+0x204>
 8001226:	2303      	movs	r3, #3
 8001228:	e004      	b.n	8001234 <HAL_GPIO_Init+0x204>
 800122a:	2302      	movs	r3, #2
 800122c:	e002      	b.n	8001234 <HAL_GPIO_Init+0x204>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <HAL_GPIO_Init+0x204>
 8001232:	2300      	movs	r3, #0
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	f002 0203 	and.w	r2, r2, #3
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	4093      	lsls	r3, r2
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001244:	4935      	ldr	r1, [pc, #212]	@ (800131c <HAL_GPIO_Init+0x2ec>)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001252:	4b38      	ldr	r3, [pc, #224]	@ (8001334 <HAL_GPIO_Init+0x304>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001276:	4a2f      	ldr	r2, [pc, #188]	@ (8001334 <HAL_GPIO_Init+0x304>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800127c:	4b2d      	ldr	r3, [pc, #180]	@ (8001334 <HAL_GPIO_Init+0x304>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a0:	4a24      	ldr	r2, [pc, #144]	@ (8001334 <HAL_GPIO_Init+0x304>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012a6:	4b23      	ldr	r3, [pc, #140]	@ (8001334 <HAL_GPIO_Init+0x304>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ca:	4a1a      	ldr	r2, [pc, #104]	@ (8001334 <HAL_GPIO_Init+0x304>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d0:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <HAL_GPIO_Init+0x304>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001334 <HAL_GPIO_Init+0x304>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3301      	adds	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	2b0f      	cmp	r3, #15
 8001304:	f67f aea2 	bls.w	800104c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3724      	adds	r7, #36	@ 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40013800 	.word	0x40013800
 8001320:	40020000 	.word	0x40020000
 8001324:	40020400 	.word	0x40020400
 8001328:	40020800 	.word	0x40020800
 800132c:	40020c00 	.word	0x40020c00
 8001330:	40021000 	.word	0x40021000
 8001334:	40013c00 	.word	0x40013c00

08001338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
 8001344:	4613      	mov	r3, r2
 8001346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001354:	e003      	b.n	800135e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	041a      	lsls	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	619a      	str	r2, [r3, #24]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800136a:	b480      	push	{r7}
 800136c:	b085      	sub	sp, #20
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	460b      	mov	r3, r1
 8001374:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800137c:	887a      	ldrh	r2, [r7, #2]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4013      	ands	r3, r2
 8001382:	041a      	lsls	r2, r3, #16
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	43d9      	mvns	r1, r3
 8001388:	887b      	ldrh	r3, [r7, #2]
 800138a:	400b      	ands	r3, r1
 800138c:	431a      	orrs	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	619a      	str	r2, [r3, #24]
}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e267      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d075      	beq.n	80014aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013be:	4b88      	ldr	r3, [pc, #544]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d00c      	beq.n	80013e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ca:	4b85      	ldr	r3, [pc, #532]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d112      	bne.n	80013fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d6:	4b82      	ldr	r3, [pc, #520]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013e2:	d10b      	bne.n	80013fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e4:	4b7e      	ldr	r3, [pc, #504]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d05b      	beq.n	80014a8 <HAL_RCC_OscConfig+0x108>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d157      	bne.n	80014a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e242      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001404:	d106      	bne.n	8001414 <HAL_RCC_OscConfig+0x74>
 8001406:	4b76      	ldr	r3, [pc, #472]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a75      	ldr	r2, [pc, #468]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e01d      	b.n	8001450 <HAL_RCC_OscConfig+0xb0>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800141c:	d10c      	bne.n	8001438 <HAL_RCC_OscConfig+0x98>
 800141e:	4b70      	ldr	r3, [pc, #448]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a6f      	ldr	r2, [pc, #444]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 8001424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	4b6d      	ldr	r3, [pc, #436]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a6c      	ldr	r2, [pc, #432]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 8001430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e00b      	b.n	8001450 <HAL_RCC_OscConfig+0xb0>
 8001438:	4b69      	ldr	r3, [pc, #420]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a68      	ldr	r2, [pc, #416]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 800143e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	4b66      	ldr	r3, [pc, #408]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a65      	ldr	r2, [pc, #404]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 800144a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800144e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d013      	beq.n	8001480 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fcfc 	bl	8000e54 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001460:	f7ff fcf8 	bl	8000e54 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	@ 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e207      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	4b5b      	ldr	r3, [pc, #364]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0xc0>
 800147e:	e014      	b.n	80014aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001480:	f7ff fce8 	bl	8000e54 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001488:	f7ff fce4 	bl	8000e54 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b64      	cmp	r3, #100	@ 0x64
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e1f3      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149a:	4b51      	ldr	r3, [pc, #324]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0xe8>
 80014a6:	e000      	b.n	80014aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d063      	beq.n	800157e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014b6:	4b4a      	ldr	r3, [pc, #296]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00b      	beq.n	80014da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014c2:	4b47      	ldr	r3, [pc, #284]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d11c      	bne.n	8001508 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ce:	4b44      	ldr	r3, [pc, #272]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d116      	bne.n	8001508 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014da:	4b41      	ldr	r3, [pc, #260]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <HAL_RCC_OscConfig+0x152>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d001      	beq.n	80014f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e1c7      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f2:	4b3b      	ldr	r3, [pc, #236]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	4937      	ldr	r1, [pc, #220]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 8001502:	4313      	orrs	r3, r2
 8001504:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001506:	e03a      	b.n	800157e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d020      	beq.n	8001552 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001510:	4b34      	ldr	r3, [pc, #208]	@ (80015e4 <HAL_RCC_OscConfig+0x244>)
 8001512:	2201      	movs	r2, #1
 8001514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001516:	f7ff fc9d 	bl	8000e54 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151e:	f7ff fc99 	bl	8000e54 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e1a8      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001530:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153c:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4925      	ldr	r1, [pc, #148]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 800154c:	4313      	orrs	r3, r2
 800154e:	600b      	str	r3, [r1, #0]
 8001550:	e015      	b.n	800157e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001552:	4b24      	ldr	r3, [pc, #144]	@ (80015e4 <HAL_RCC_OscConfig+0x244>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fc7c 	bl	8000e54 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001560:	f7ff fc78 	bl	8000e54 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e187      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001572:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b00      	cmp	r3, #0
 8001588:	d036      	beq.n	80015f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d016      	beq.n	80015c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001592:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <HAL_RCC_OscConfig+0x248>)
 8001594:	2201      	movs	r2, #1
 8001596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001598:	f7ff fc5c 	bl	8000e54 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a0:	f7ff fc58 	bl	8000e54 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e167      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b2:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <HAL_RCC_OscConfig+0x240>)
 80015b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x200>
 80015be:	e01b      	b.n	80015f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c0:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <HAL_RCC_OscConfig+0x248>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c6:	f7ff fc45 	bl	8000e54 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015cc:	e00e      	b.n	80015ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ce:	f7ff fc41 	bl	8000e54 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d907      	bls.n	80015ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e150      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
 80015e0:	40023800 	.word	0x40023800
 80015e4:	42470000 	.word	0x42470000
 80015e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ec:	4b88      	ldr	r3, [pc, #544]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 80015ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1ea      	bne.n	80015ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 8097 	beq.w	8001734 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800160a:	4b81      	ldr	r3, [pc, #516]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10f      	bne.n	8001636 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b7d      	ldr	r3, [pc, #500]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	4a7c      	ldr	r2, [pc, #496]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	@ 0x40
 8001626:	4b7a      	ldr	r3, [pc, #488]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001632:	2301      	movs	r3, #1
 8001634:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001636:	4b77      	ldr	r3, [pc, #476]	@ (8001814 <HAL_RCC_OscConfig+0x474>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800163e:	2b00      	cmp	r3, #0
 8001640:	d118      	bne.n	8001674 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001642:	4b74      	ldr	r3, [pc, #464]	@ (8001814 <HAL_RCC_OscConfig+0x474>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a73      	ldr	r2, [pc, #460]	@ (8001814 <HAL_RCC_OscConfig+0x474>)
 8001648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800164c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164e:	f7ff fc01 	bl	8000e54 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001656:	f7ff fbfd 	bl	8000e54 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e10c      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001668:	4b6a      	ldr	r3, [pc, #424]	@ (8001814 <HAL_RCC_OscConfig+0x474>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d106      	bne.n	800168a <HAL_RCC_OscConfig+0x2ea>
 800167c:	4b64      	ldr	r3, [pc, #400]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 800167e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001680:	4a63      	ldr	r2, [pc, #396]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6713      	str	r3, [r2, #112]	@ 0x70
 8001688:	e01c      	b.n	80016c4 <HAL_RCC_OscConfig+0x324>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2b05      	cmp	r3, #5
 8001690:	d10c      	bne.n	80016ac <HAL_RCC_OscConfig+0x30c>
 8001692:	4b5f      	ldr	r3, [pc, #380]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 8001694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001696:	4a5e      	ldr	r2, [pc, #376]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	6713      	str	r3, [r2, #112]	@ 0x70
 800169e:	4b5c      	ldr	r3, [pc, #368]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 80016a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a2:	4a5b      	ldr	r2, [pc, #364]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016aa:	e00b      	b.n	80016c4 <HAL_RCC_OscConfig+0x324>
 80016ac:	4b58      	ldr	r3, [pc, #352]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 80016ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b0:	4a57      	ldr	r2, [pc, #348]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016b8:	4b55      	ldr	r3, [pc, #340]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 80016ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016bc:	4a54      	ldr	r2, [pc, #336]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 80016be:	f023 0304 	bic.w	r3, r3, #4
 80016c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d015      	beq.n	80016f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016cc:	f7ff fbc2 	bl	8000e54 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d2:	e00a      	b.n	80016ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d4:	f7ff fbbe 	bl	8000e54 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e0cb      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ea:	4b49      	ldr	r3, [pc, #292]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0ee      	beq.n	80016d4 <HAL_RCC_OscConfig+0x334>
 80016f6:	e014      	b.n	8001722 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f8:	f7ff fbac 	bl	8000e54 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fe:	e00a      	b.n	8001716 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001700:	f7ff fba8 	bl	8000e54 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e0b5      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001716:	4b3e      	ldr	r3, [pc, #248]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 8001718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1ee      	bne.n	8001700 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001722:	7dfb      	ldrb	r3, [r7, #23]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d105      	bne.n	8001734 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001728:	4b39      	ldr	r3, [pc, #228]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172c:	4a38      	ldr	r2, [pc, #224]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 800172e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001732:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80a1 	beq.w	8001880 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800173e:	4b34      	ldr	r3, [pc, #208]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b08      	cmp	r3, #8
 8001748:	d05c      	beq.n	8001804 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d141      	bne.n	80017d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001752:	4b31      	ldr	r3, [pc, #196]	@ (8001818 <HAL_RCC_OscConfig+0x478>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fb7c 	bl	8000e54 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001760:	f7ff fb78 	bl	8000e54 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e087      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001772:	4b27      	ldr	r3, [pc, #156]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69da      	ldr	r2, [r3, #28]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178c:	019b      	lsls	r3, r3, #6
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001794:	085b      	lsrs	r3, r3, #1
 8001796:	3b01      	subs	r3, #1
 8001798:	041b      	lsls	r3, r3, #16
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a0:	061b      	lsls	r3, r3, #24
 80017a2:	491b      	ldr	r1, [pc, #108]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <HAL_RCC_OscConfig+0x478>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ae:	f7ff fb51 	bl	8000e54 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b6:	f7ff fb4d 	bl	8000e54 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e05c      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c8:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f0      	beq.n	80017b6 <HAL_RCC_OscConfig+0x416>
 80017d4:	e054      	b.n	8001880 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d6:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <HAL_RCC_OscConfig+0x478>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fb3a 	bl	8000e54 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e4:	f7ff fb36 	bl	8000e54 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e045      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f6:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_RCC_OscConfig+0x470>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x444>
 8001802:	e03d      	b.n	8001880 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d107      	bne.n	800181c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e038      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
 8001810:	40023800 	.word	0x40023800
 8001814:	40007000 	.word	0x40007000
 8001818:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800181c:	4b1b      	ldr	r3, [pc, #108]	@ (800188c <HAL_RCC_OscConfig+0x4ec>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d028      	beq.n	800187c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001834:	429a      	cmp	r2, r3
 8001836:	d121      	bne.n	800187c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001842:	429a      	cmp	r2, r3
 8001844:	d11a      	bne.n	800187c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800184c:	4013      	ands	r3, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001852:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001854:	4293      	cmp	r3, r2
 8001856:	d111      	bne.n	800187c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001862:	085b      	lsrs	r3, r3, #1
 8001864:	3b01      	subs	r3, #1
 8001866:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001868:	429a      	cmp	r2, r3
 800186a:	d107      	bne.n	800187c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001876:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001878:	429a      	cmp	r2, r3
 800187a:	d001      	beq.n	8001880 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800

08001890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0cc      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018a4:	4b68      	ldr	r3, [pc, #416]	@ (8001a48 <HAL_RCC_ClockConfig+0x1b8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d90c      	bls.n	80018cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b65      	ldr	r3, [pc, #404]	@ (8001a48 <HAL_RCC_ClockConfig+0x1b8>)
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ba:	4b63      	ldr	r3, [pc, #396]	@ (8001a48 <HAL_RCC_ClockConfig+0x1b8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d001      	beq.n	80018cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0b8      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d020      	beq.n	800191a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e4:	4b59      	ldr	r3, [pc, #356]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	4a58      	ldr	r2, [pc, #352]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018fc:	4b53      	ldr	r3, [pc, #332]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	4a52      	ldr	r2, [pc, #328]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001906:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001908:	4b50      	ldr	r3, [pc, #320]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	494d      	ldr	r1, [pc, #308]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d044      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d107      	bne.n	800193e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192e:	4b47      	ldr	r3, [pc, #284]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d119      	bne.n	800196e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e07f      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b02      	cmp	r3, #2
 8001944:	d003      	beq.n	800194e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800194a:	2b03      	cmp	r3, #3
 800194c:	d107      	bne.n	800195e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d109      	bne.n	800196e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e06f      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e067      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800196e:	4b37      	ldr	r3, [pc, #220]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f023 0203 	bic.w	r2, r3, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4934      	ldr	r1, [pc, #208]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	4313      	orrs	r3, r2
 800197e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001980:	f7ff fa68 	bl	8000e54 <HAL_GetTick>
 8001984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001986:	e00a      	b.n	800199e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001988:	f7ff fa64 	bl	8000e54 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e04f      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 020c 	and.w	r2, r3, #12
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d1eb      	bne.n	8001988 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019b0:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <HAL_RCC_ClockConfig+0x1b8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d20c      	bcs.n	80019d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	4b22      	ldr	r3, [pc, #136]	@ (8001a48 <HAL_RCC_ClockConfig+0x1b8>)
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c6:	4b20      	ldr	r3, [pc, #128]	@ (8001a48 <HAL_RCC_ClockConfig+0x1b8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e032      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d008      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e4:	4b19      	ldr	r3, [pc, #100]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	4916      	ldr	r1, [pc, #88]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d009      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a02:	4b12      	ldr	r3, [pc, #72]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	490e      	ldr	r1, [pc, #56]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a16:	f000 f821 	bl	8001a5c <HAL_RCC_GetSysClockFreq>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	091b      	lsrs	r3, r3, #4
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	490a      	ldr	r1, [pc, #40]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c0>)
 8001a28:	5ccb      	ldrb	r3, [r1, r3]
 8001a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2e:	4a09      	ldr	r2, [pc, #36]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a32:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f8f8 	bl	8000c2c <HAL_InitTick>

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023c00 	.word	0x40023c00
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	08004958 	.word	0x08004958
 8001a54:	20000000 	.word	0x20000000
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a60:	b090      	sub	sp, #64	@ 0x40
 8001a62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a74:	4b59      	ldr	r3, [pc, #356]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d00d      	beq.n	8001a9c <HAL_RCC_GetSysClockFreq+0x40>
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	f200 80a1 	bhi.w	8001bc8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <HAL_RCC_GetSysClockFreq+0x34>
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d003      	beq.n	8001a96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a8e:	e09b      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a90:	4b53      	ldr	r3, [pc, #332]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a94:	e09b      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a96:	4b53      	ldr	r3, [pc, #332]	@ (8001be4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a98:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a9a:	e098      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a9c:	4b4f      	ldr	r3, [pc, #316]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001aa4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aa6:	4b4d      	ldr	r3, [pc, #308]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d028      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ab2:	4b4a      	ldr	r3, [pc, #296]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	099b      	lsrs	r3, r3, #6
 8001ab8:	2200      	movs	r2, #0
 8001aba:	623b      	str	r3, [r7, #32]
 8001abc:	627a      	str	r2, [r7, #36]	@ 0x24
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4b47      	ldr	r3, [pc, #284]	@ (8001be4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ac8:	fb03 f201 	mul.w	r2, r3, r1
 8001acc:	2300      	movs	r3, #0
 8001ace:	fb00 f303 	mul.w	r3, r0, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4a43      	ldr	r2, [pc, #268]	@ (8001be4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ad6:	fba0 1202 	umull	r1, r2, r0, r2
 8001ada:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001adc:	460a      	mov	r2, r1
 8001ade:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001ae0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ae2:	4413      	add	r3, r2
 8001ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ae8:	2200      	movs	r2, #0
 8001aea:	61bb      	str	r3, [r7, #24]
 8001aec:	61fa      	str	r2, [r7, #28]
 8001aee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001af2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001af6:	f7fe fb73 	bl	80001e0 <__aeabi_uldivmod>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4613      	mov	r3, r2
 8001b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b02:	e053      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b04:	4b35      	ldr	r3, [pc, #212]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	099b      	lsrs	r3, r3, #6
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	617a      	str	r2, [r7, #20]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b16:	f04f 0b00 	mov.w	fp, #0
 8001b1a:	4652      	mov	r2, sl
 8001b1c:	465b      	mov	r3, fp
 8001b1e:	f04f 0000 	mov.w	r0, #0
 8001b22:	f04f 0100 	mov.w	r1, #0
 8001b26:	0159      	lsls	r1, r3, #5
 8001b28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b2c:	0150      	lsls	r0, r2, #5
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	ebb2 080a 	subs.w	r8, r2, sl
 8001b36:	eb63 090b 	sbc.w	r9, r3, fp
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b4e:	ebb2 0408 	subs.w	r4, r2, r8
 8001b52:	eb63 0509 	sbc.w	r5, r3, r9
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	00eb      	lsls	r3, r5, #3
 8001b60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b64:	00e2      	lsls	r2, r4, #3
 8001b66:	4614      	mov	r4, r2
 8001b68:	461d      	mov	r5, r3
 8001b6a:	eb14 030a 	adds.w	r3, r4, sl
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	eb45 030b 	adc.w	r3, r5, fp
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b82:	4629      	mov	r1, r5
 8001b84:	028b      	lsls	r3, r1, #10
 8001b86:	4621      	mov	r1, r4
 8001b88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b8c:	4621      	mov	r1, r4
 8001b8e:	028a      	lsls	r2, r1, #10
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b96:	2200      	movs	r2, #0
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	60fa      	str	r2, [r7, #12]
 8001b9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ba0:	f7fe fb1e 	bl	80001e0 <__aeabi_uldivmod>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4613      	mov	r3, r2
 8001baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001bac:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x180>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	0c1b      	lsrs	r3, r3, #16
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001bbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bc6:	e002      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bc8:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3740      	adds	r7, #64	@ 0x40
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	00f42400 	.word	0x00f42400
 8001be4:	017d7840 	.word	0x017d7840

08001be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bec:	4b03      	ldr	r3, [pc, #12]	@ (8001bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000000 	.word	0x20000000

08001c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c04:	f7ff fff0 	bl	8001be8 <HAL_RCC_GetHCLKFreq>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	0a9b      	lsrs	r3, r3, #10
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	4903      	ldr	r1, [pc, #12]	@ (8001c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c16:	5ccb      	ldrb	r3, [r1, r3]
 8001c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40023800 	.word	0x40023800
 8001c24:	08004968 	.word	0x08004968

08001c28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	220f      	movs	r2, #15
 8001c36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c38:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <HAL_RCC_GetClockConfig+0x5c>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 0203 	and.w	r2, r3, #3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c44:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <HAL_RCC_GetClockConfig+0x5c>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c50:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <HAL_RCC_GetClockConfig+0x5c>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c5c:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <HAL_RCC_GetClockConfig+0x5c>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	08db      	lsrs	r3, r3, #3
 8001c62:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c6a:	4b07      	ldr	r3, [pc, #28]	@ (8001c88 <HAL_RCC_GetClockConfig+0x60>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0207 	and.w	r2, r3, #7
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	601a      	str	r2, [r3, #0]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40023c00 	.word	0x40023c00

08001c8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e041      	b.n	8001d22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f839 	bl	8001d2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4610      	mov	r0, r2
 8001ccc:	f000 f9b2 	bl	8002034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d001      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e044      	b.n	8001de2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a1e      	ldr	r2, [pc, #120]	@ (8001df0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d018      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x6c>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d82:	d013      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x6c>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a1a      	ldr	r2, [pc, #104]	@ (8001df4 <HAL_TIM_Base_Start_IT+0xb4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d00e      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x6c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a19      	ldr	r2, [pc, #100]	@ (8001df8 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d009      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x6c>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a17      	ldr	r2, [pc, #92]	@ (8001dfc <HAL_TIM_Base_Start_IT+0xbc>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d004      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x6c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a16      	ldr	r2, [pc, #88]	@ (8001e00 <HAL_TIM_Base_Start_IT+0xc0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d111      	bne.n	8001dd0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d010      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 0201 	orr.w	r2, r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dce:	e007      	b.n	8001de0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40010000 	.word	0x40010000
 8001df4:	40000400 	.word	0x40000400
 8001df8:	40000800 	.word	0x40000800
 8001dfc:	40000c00 	.word	0x40000c00
 8001e00:	40014000 	.word	0x40014000

08001e04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d020      	beq.n	8001e68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d01b      	beq.n	8001e68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0202 	mvn.w	r2, #2
 8001e38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8d2 	bl	8001ff8 <HAL_TIM_IC_CaptureCallback>
 8001e54:	e005      	b.n	8001e62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f8c4 	bl	8001fe4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f8d5 	bl	800200c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d020      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01b      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0204 	mvn.w	r2, #4
 8001e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f8ac 	bl	8001ff8 <HAL_TIM_IC_CaptureCallback>
 8001ea0:	e005      	b.n	8001eae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f89e 	bl	8001fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f8af 	bl	800200c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d020      	beq.n	8001f00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01b      	beq.n	8001f00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f06f 0208 	mvn.w	r2, #8
 8001ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2204      	movs	r2, #4
 8001ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f886 	bl	8001ff8 <HAL_TIM_IC_CaptureCallback>
 8001eec:	e005      	b.n	8001efa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f878 	bl	8001fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f889 	bl	800200c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f003 0310 	and.w	r3, r3, #16
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d020      	beq.n	8001f4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d01b      	beq.n	8001f4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0210 	mvn.w	r2, #16
 8001f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2208      	movs	r2, #8
 8001f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f860 	bl	8001ff8 <HAL_TIM_IC_CaptureCallback>
 8001f38:	e005      	b.n	8001f46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f852 	bl	8001fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f863 	bl	800200c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00c      	beq.n	8001f70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d007      	beq.n	8001f70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0201 	mvn.w	r2, #1
 8001f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7fe fe1c 	bl	8000ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00c      	beq.n	8001f94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d007      	beq.n	8001f94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f8e0 	bl	8002154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00c      	beq.n	8001fb8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d007      	beq.n	8001fb8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f834 	bl	8002020 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00c      	beq.n	8001fdc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d007      	beq.n	8001fdc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0220 	mvn.w	r2, #32
 8001fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f8b2 	bl	8002140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a37      	ldr	r2, [pc, #220]	@ (8002124 <TIM_Base_SetConfig+0xf0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00f      	beq.n	800206c <TIM_Base_SetConfig+0x38>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002052:	d00b      	beq.n	800206c <TIM_Base_SetConfig+0x38>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a34      	ldr	r2, [pc, #208]	@ (8002128 <TIM_Base_SetConfig+0xf4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d007      	beq.n	800206c <TIM_Base_SetConfig+0x38>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a33      	ldr	r2, [pc, #204]	@ (800212c <TIM_Base_SetConfig+0xf8>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d003      	beq.n	800206c <TIM_Base_SetConfig+0x38>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a32      	ldr	r2, [pc, #200]	@ (8002130 <TIM_Base_SetConfig+0xfc>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d108      	bne.n	800207e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a28      	ldr	r2, [pc, #160]	@ (8002124 <TIM_Base_SetConfig+0xf0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d01b      	beq.n	80020be <TIM_Base_SetConfig+0x8a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800208c:	d017      	beq.n	80020be <TIM_Base_SetConfig+0x8a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a25      	ldr	r2, [pc, #148]	@ (8002128 <TIM_Base_SetConfig+0xf4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d013      	beq.n	80020be <TIM_Base_SetConfig+0x8a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a24      	ldr	r2, [pc, #144]	@ (800212c <TIM_Base_SetConfig+0xf8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00f      	beq.n	80020be <TIM_Base_SetConfig+0x8a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a23      	ldr	r2, [pc, #140]	@ (8002130 <TIM_Base_SetConfig+0xfc>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00b      	beq.n	80020be <TIM_Base_SetConfig+0x8a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a22      	ldr	r2, [pc, #136]	@ (8002134 <TIM_Base_SetConfig+0x100>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <TIM_Base_SetConfig+0x8a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a21      	ldr	r2, [pc, #132]	@ (8002138 <TIM_Base_SetConfig+0x104>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d003      	beq.n	80020be <TIM_Base_SetConfig+0x8a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a20      	ldr	r2, [pc, #128]	@ (800213c <TIM_Base_SetConfig+0x108>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d108      	bne.n	80020d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002124 <TIM_Base_SetConfig+0xf0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d103      	bne.n	80020fe <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	691a      	ldr	r2, [r3, #16]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f043 0204 	orr.w	r2, r3, #4
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	601a      	str	r2, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40010000 	.word	0x40010000
 8002128:	40000400 	.word	0x40000400
 800212c:	40000800 	.word	0x40000800
 8002130:	40000c00 	.word	0x40000c00
 8002134:	40014000 	.word	0x40014000
 8002138:	40014400 	.word	0x40014400
 800213c:	40014800 	.word	0x40014800

08002140 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800217a:	2b84      	cmp	r3, #132	@ 0x84
 800217c:	d005      	beq.n	800218a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800217e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4413      	add	r3, r2
 8002186:	3303      	adds	r3, #3
 8002188:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800218a:	68fb      	ldr	r3, [r7, #12]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800219e:	f3ef 8305 	mrs	r3, IPSR
 80021a2:	607b      	str	r3, [r7, #4]
  return(result);
 80021a4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	bf14      	ite	ne
 80021aa:	2301      	movne	r3, #1
 80021ac:	2300      	moveq	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80021c0:	f001 f930 	bl	8003424 <vTaskStartScheduler>
  
  return osOK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	bd80      	pop	{r7, pc}

080021ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80021ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021cc:	b089      	sub	sp, #36	@ 0x24
 80021ce:	af04      	add	r7, sp, #16
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d020      	beq.n	800221e <osThreadCreate+0x54>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d01c      	beq.n	800221e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685c      	ldr	r4, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691e      	ldr	r6, [r3, #16]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff ffb6 	bl	8002168 <makeFreeRtosPriority>
 80021fc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002206:	9202      	str	r2, [sp, #8]
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	9100      	str	r1, [sp, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	4632      	mov	r2, r6
 8002210:	4629      	mov	r1, r5
 8002212:	4620      	mov	r0, r4
 8002214:	f000 ff20 	bl	8003058 <xTaskCreateStatic>
 8002218:	4603      	mov	r3, r0
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	e01c      	b.n	8002258 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685c      	ldr	r4, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800222a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ff98 	bl	8002168 <makeFreeRtosPriority>
 8002238:	4602      	mov	r2, r0
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	9200      	str	r2, [sp, #0]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	4632      	mov	r2, r6
 8002246:	4629      	mov	r1, r5
 8002248:	4620      	mov	r0, r4
 800224a:	f000 ff65 	bl	8003118 <xTaskCreate>
 800224e:	4603      	mov	r3, r0
 8002250:	2b01      	cmp	r3, #1
 8002252:	d001      	beq.n	8002258 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002254:	2300      	movs	r3, #0
 8002256:	e000      	b.n	800225a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002258:	68fb      	ldr	r3, [r7, #12]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002262 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <osDelay+0x16>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	e000      	b.n	800227a <osDelay+0x18>
 8002278:	2301      	movs	r3, #1
 800227a:	4618      	mov	r0, r3
 800227c:	f001 f89c 	bl	80033b8 <vTaskDelay>
  
  return osOK;
 8002280:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800228a:	b590      	push	{r4, r7, lr}
 800228c:	b085      	sub	sp, #20
 800228e:	af02      	add	r7, sp, #8
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d011      	beq.n	80022c0 <osMessageCreate+0x36>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00d      	beq.n	80022c0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	2400      	movs	r4, #0
 80022b6:	9400      	str	r4, [sp, #0]
 80022b8:	f000 f9e2 	bl	8002680 <xQueueGenericCreateStatic>
 80022bc:	4603      	mov	r3, r0
 80022be:	e008      	b.n	80022d2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	4619      	mov	r1, r3
 80022cc:	f000 fa55 	bl	800277a <xQueueGenericCreate>
 80022d0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd90      	pop	{r4, r7, pc}
	...

080022dc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80022e8:	2300      	movs	r3, #0
 80022ea:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <osMessagePut+0x1e>
    ticks = 1;
 80022f6:	2301      	movs	r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80022fa:	f7ff ff4d 	bl	8002198 <inHandlerMode>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d018      	beq.n	8002336 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002304:	f107 0210 	add.w	r2, r7, #16
 8002308:	f107 0108 	add.w	r1, r7, #8
 800230c:	2300      	movs	r3, #0
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 fb90 	bl	8002a34 <xQueueGenericSendFromISR>
 8002314:	4603      	mov	r3, r0
 8002316:	2b01      	cmp	r3, #1
 8002318:	d001      	beq.n	800231e <osMessagePut+0x42>
      return osErrorOS;
 800231a:	23ff      	movs	r3, #255	@ 0xff
 800231c:	e018      	b.n	8002350 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d014      	beq.n	800234e <osMessagePut+0x72>
 8002324:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <osMessagePut+0x7c>)
 8002326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	f3bf 8f4f 	dsb	sy
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	e00b      	b.n	800234e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002336:	f107 0108 	add.w	r1, r7, #8
 800233a:	2300      	movs	r3, #0
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 fa76 	bl	8002830 <xQueueGenericSend>
 8002344:	4603      	mov	r3, r0
 8002346:	2b01      	cmp	r3, #1
 8002348:	d001      	beq.n	800234e <osMessagePut+0x72>
      return osErrorOS;
 800234a:	23ff      	movs	r3, #255	@ 0xff
 800234c:	e000      	b.n	8002350 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	e000ed04 	.word	0xe000ed04

0800235c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b08b      	sub	sp, #44	@ 0x2c
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10a      	bne.n	800238c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8002376:	2380      	movs	r3, #128	@ 0x80
 8002378:	617b      	str	r3, [r7, #20]
    return event;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	461c      	mov	r4, r3
 800237e:	f107 0314 	add.w	r3, r7, #20
 8002382:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002386:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800238a:	e054      	b.n	8002436 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800238c:	2300      	movs	r3, #0
 800238e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239a:	d103      	bne.n	80023a4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800239c:	f04f 33ff 	mov.w	r3, #4294967295
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80023a2:	e009      	b.n	80023b8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d006      	beq.n	80023b8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80023ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <osMessageGet+0x5c>
      ticks = 1;
 80023b4:	2301      	movs	r3, #1
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80023b8:	f7ff feee 	bl	8002198 <inHandlerMode>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d01c      	beq.n	80023fc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80023c2:	f107 0220 	add.w	r2, r7, #32
 80023c6:	f107 0314 	add.w	r3, r7, #20
 80023ca:	3304      	adds	r3, #4
 80023cc:	4619      	mov	r1, r3
 80023ce:	68b8      	ldr	r0, [r7, #8]
 80023d0:	f000 fcb0 	bl	8002d34 <xQueueReceiveFromISR>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d102      	bne.n	80023e0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80023da:	2310      	movs	r3, #16
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	e001      	b.n	80023e4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d01d      	beq.n	8002426 <osMessageGet+0xca>
 80023ea:	4b15      	ldr	r3, [pc, #84]	@ (8002440 <osMessageGet+0xe4>)
 80023ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	f3bf 8f4f 	dsb	sy
 80023f6:	f3bf 8f6f 	isb	sy
 80023fa:	e014      	b.n	8002426 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	3304      	adds	r3, #4
 8002402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002404:	4619      	mov	r1, r3
 8002406:	68b8      	ldr	r0, [r7, #8]
 8002408:	f000 fbb2 	bl	8002b70 <xQueueReceive>
 800240c:	4603      	mov	r3, r0
 800240e:	2b01      	cmp	r3, #1
 8002410:	d102      	bne.n	8002418 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8002412:	2310      	movs	r3, #16
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	e006      	b.n	8002426 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <osMessageGet+0xc6>
 800241e:	2300      	movs	r3, #0
 8002420:	e000      	b.n	8002424 <osMessageGet+0xc8>
 8002422:	2340      	movs	r3, #64	@ 0x40
 8002424:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	461c      	mov	r4, r3
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002432:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	372c      	adds	r7, #44	@ 0x2c
 800243a:	46bd      	mov	sp, r7
 800243c:	bd90      	pop	{r4, r7, pc}
 800243e:	bf00      	nop
 8002440:	e000ed04 	.word	0xe000ed04

08002444 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f103 0208 	add.w	r2, r3, #8
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f04f 32ff 	mov.w	r2, #4294967295
 800245c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f103 0208 	add.w	r2, r3, #8
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f103 0208 	add.w	r2, r3, #8
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800249e:	b480      	push	{r7}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	601a      	str	r2, [r3, #0]
}
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024e6:	b480      	push	{r7}
 80024e8:	b085      	sub	sp, #20
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d103      	bne.n	8002506 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	e00c      	b.n	8002520 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3308      	adds	r3, #8
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	e002      	b.n	8002514 <vListInsert+0x2e>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	429a      	cmp	r2, r3
 800251e:	d2f6      	bcs.n	800250e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	601a      	str	r2, [r3, #0]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6892      	ldr	r2, [r2, #8]
 800256e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6852      	ldr	r2, [r2, #4]
 8002578:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	429a      	cmp	r2, r3
 8002582:	d103      	bne.n	800258c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	1e5a      	subs	r2, r3, #1
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10b      	bne.n	80025d8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025c4:	f383 8811 	msr	BASEPRI, r3
 80025c8:	f3bf 8f6f 	isb	sy
 80025cc:	f3bf 8f4f 	dsb	sy
 80025d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80025d2:	bf00      	nop
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80025d8:	f001 fd7e 	bl	80040d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e4:	68f9      	ldr	r1, [r7, #12]
 80025e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	441a      	add	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002608:	3b01      	subs	r3, #1
 800260a:	68f9      	ldr	r1, [r7, #12]
 800260c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	441a      	add	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	22ff      	movs	r2, #255	@ 0xff
 800261c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	22ff      	movs	r2, #255	@ 0xff
 8002624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d114      	bne.n	8002658 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d01a      	beq.n	800266c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	3310      	adds	r3, #16
 800263a:	4618      	mov	r0, r3
 800263c:	f001 f94c 	bl	80038d8 <xTaskRemoveFromEventList>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d012      	beq.n	800266c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002646:	4b0d      	ldr	r3, [pc, #52]	@ (800267c <xQueueGenericReset+0xd0>)
 8002648:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	f3bf 8f6f 	isb	sy
 8002656:	e009      	b.n	800266c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	3310      	adds	r3, #16
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fef1 	bl	8002444 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	3324      	adds	r3, #36	@ 0x24
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff feec 	bl	8002444 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800266c:	f001 fd66 	bl	800413c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002670:	2301      	movs	r3, #1
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	e000ed04 	.word	0xe000ed04

08002680 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08e      	sub	sp, #56	@ 0x38
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10b      	bne.n	80026ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002698:	f383 8811 	msr	BASEPRI, r3
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80026a6:	bf00      	nop
 80026a8:	bf00      	nop
 80026aa:	e7fd      	b.n	80026a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10b      	bne.n	80026ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80026b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026b6:	f383 8811 	msr	BASEPRI, r3
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	f3bf 8f4f 	dsb	sy
 80026c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80026c4:	bf00      	nop
 80026c6:	bf00      	nop
 80026c8:	e7fd      	b.n	80026c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <xQueueGenericCreateStatic+0x56>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <xQueueGenericCreateStatic+0x5a>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <xQueueGenericCreateStatic+0x5c>
 80026da:	2300      	movs	r3, #0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10b      	bne.n	80026f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	623b      	str	r3, [r7, #32]
}
 80026f2:	bf00      	nop
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d102      	bne.n	8002704 <xQueueGenericCreateStatic+0x84>
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <xQueueGenericCreateStatic+0x88>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <xQueueGenericCreateStatic+0x8a>
 8002708:	2300      	movs	r3, #0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10b      	bne.n	8002726 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800270e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002712:	f383 8811 	msr	BASEPRI, r3
 8002716:	f3bf 8f6f 	isb	sy
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	61fb      	str	r3, [r7, #28]
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	e7fd      	b.n	8002722 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002726:	2348      	movs	r3, #72	@ 0x48
 8002728:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b48      	cmp	r3, #72	@ 0x48
 800272e:	d00b      	beq.n	8002748 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	61bb      	str	r3, [r7, #24]
}
 8002742:	bf00      	nop
 8002744:	bf00      	nop
 8002746:	e7fd      	b.n	8002744 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002748:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800274e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00d      	beq.n	8002770 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800275c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	4613      	mov	r3, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f840 	bl	80027f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002772:	4618      	mov	r0, r3
 8002774:	3730      	adds	r7, #48	@ 0x30
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800277a:	b580      	push	{r7, lr}
 800277c:	b08a      	sub	sp, #40	@ 0x28
 800277e:	af02      	add	r7, sp, #8
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	4613      	mov	r3, r2
 8002786:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10b      	bne.n	80027a6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800278e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002792:	f383 8811 	msr	BASEPRI, r3
 8002796:	f3bf 8f6f 	isb	sy
 800279a:	f3bf 8f4f 	dsb	sy
 800279e:	613b      	str	r3, [r7, #16]
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	e7fd      	b.n	80027a2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	fb02 f303 	mul.w	r3, r2, r3
 80027ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	3348      	adds	r3, #72	@ 0x48
 80027b4:	4618      	mov	r0, r3
 80027b6:	f001 fdb1 	bl	800431c <pvPortMalloc>
 80027ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d011      	beq.n	80027e6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	3348      	adds	r3, #72	@ 0x48
 80027ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80027d4:	79fa      	ldrb	r2, [r7, #7]
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	4613      	mov	r3, r2
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	68b9      	ldr	r1, [r7, #8]
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 f805 	bl	80027f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80027e6:	69bb      	ldr	r3, [r7, #24]
	}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3720      	adds	r7, #32
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d103      	bne.n	800280c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	e002      	b.n	8002812 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800281e:	2101      	movs	r1, #1
 8002820:	69b8      	ldr	r0, [r7, #24]
 8002822:	f7ff fec3 	bl	80025ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08e      	sub	sp, #56	@ 0x38
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800283e:	2300      	movs	r3, #0
 8002840:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10b      	bne.n	8002864 <xQueueGenericSend+0x34>
	__asm volatile
 800284c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002850:	f383 8811 	msr	BASEPRI, r3
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800285e:	bf00      	nop
 8002860:	bf00      	nop
 8002862:	e7fd      	b.n	8002860 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d103      	bne.n	8002872 <xQueueGenericSend+0x42>
 800286a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <xQueueGenericSend+0x46>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <xQueueGenericSend+0x48>
 8002876:	2300      	movs	r3, #0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10b      	bne.n	8002894 <xQueueGenericSend+0x64>
	__asm volatile
 800287c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002880:	f383 8811 	msr	BASEPRI, r3
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800288e:	bf00      	nop
 8002890:	bf00      	nop
 8002892:	e7fd      	b.n	8002890 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d103      	bne.n	80028a2 <xQueueGenericSend+0x72>
 800289a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800289c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d101      	bne.n	80028a6 <xQueueGenericSend+0x76>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <xQueueGenericSend+0x78>
 80028a6:	2300      	movs	r3, #0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10b      	bne.n	80028c4 <xQueueGenericSend+0x94>
	__asm volatile
 80028ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028b0:	f383 8811 	msr	BASEPRI, r3
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	623b      	str	r3, [r7, #32]
}
 80028be:	bf00      	nop
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028c4:	f001 f9ce 	bl	8003c64 <xTaskGetSchedulerState>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d102      	bne.n	80028d4 <xQueueGenericSend+0xa4>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <xQueueGenericSend+0xa8>
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <xQueueGenericSend+0xaa>
 80028d8:	2300      	movs	r3, #0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10b      	bne.n	80028f6 <xQueueGenericSend+0xc6>
	__asm volatile
 80028de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028e2:	f383 8811 	msr	BASEPRI, r3
 80028e6:	f3bf 8f6f 	isb	sy
 80028ea:	f3bf 8f4f 	dsb	sy
 80028ee:	61fb      	str	r3, [r7, #28]
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	e7fd      	b.n	80028f2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028f6:	f001 fbef 	bl	80040d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002902:	429a      	cmp	r2, r3
 8002904:	d302      	bcc.n	800290c <xQueueGenericSend+0xdc>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2b02      	cmp	r3, #2
 800290a:	d129      	bne.n	8002960 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002912:	f000 fa91 	bl	8002e38 <prvCopyDataToQueue>
 8002916:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291c:	2b00      	cmp	r3, #0
 800291e:	d010      	beq.n	8002942 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002922:	3324      	adds	r3, #36	@ 0x24
 8002924:	4618      	mov	r0, r3
 8002926:	f000 ffd7 	bl	80038d8 <xTaskRemoveFromEventList>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d013      	beq.n	8002958 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002930:	4b3f      	ldr	r3, [pc, #252]	@ (8002a30 <xQueueGenericSend+0x200>)
 8002932:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	f3bf 8f6f 	isb	sy
 8002940:	e00a      	b.n	8002958 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002948:	4b39      	ldr	r3, [pc, #228]	@ (8002a30 <xQueueGenericSend+0x200>)
 800294a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002958:	f001 fbf0 	bl	800413c <vPortExitCritical>
				return pdPASS;
 800295c:	2301      	movs	r3, #1
 800295e:	e063      	b.n	8002a28 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d103      	bne.n	800296e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002966:	f001 fbe9 	bl	800413c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800296a:	2300      	movs	r3, #0
 800296c:	e05c      	b.n	8002a28 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800296e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002970:	2b00      	cmp	r3, #0
 8002972:	d106      	bne.n	8002982 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	4618      	mov	r0, r3
 800297a:	f001 f811 	bl	80039a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800297e:	2301      	movs	r3, #1
 8002980:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002982:	f001 fbdb 	bl	800413c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002986:	f000 fdb7 	bl	80034f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800298a:	f001 fba5 	bl	80040d8 <vPortEnterCritical>
 800298e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002990:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002994:	b25b      	sxtb	r3, r3
 8002996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299a:	d103      	bne.n	80029a4 <xQueueGenericSend+0x174>
 800299c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029aa:	b25b      	sxtb	r3, r3
 80029ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b0:	d103      	bne.n	80029ba <xQueueGenericSend+0x18a>
 80029b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029ba:	f001 fbbf 	bl	800413c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029be:	1d3a      	adds	r2, r7, #4
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	4611      	mov	r1, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f001 f800 	bl	80039cc <xTaskCheckForTimeOut>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d124      	bne.n	8002a1c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80029d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029d4:	f000 fb28 	bl	8003028 <prvIsQueueFull>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d018      	beq.n	8002a10 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e0:	3310      	adds	r3, #16
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	4611      	mov	r1, r2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 ff50 	bl	800388c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80029ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029ee:	f000 fab3 	bl	8002f58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80029f2:	f000 fd8f 	bl	8003514 <xTaskResumeAll>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f47f af7c 	bne.w	80028f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80029fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002a30 <xQueueGenericSend+0x200>)
 8002a00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	f3bf 8f4f 	dsb	sy
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	e772      	b.n	80028f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002a10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a12:	f000 faa1 	bl	8002f58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a16:	f000 fd7d 	bl	8003514 <xTaskResumeAll>
 8002a1a:	e76c      	b.n	80028f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002a1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a1e:	f000 fa9b 	bl	8002f58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a22:	f000 fd77 	bl	8003514 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002a26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3738      	adds	r7, #56	@ 0x38
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	e000ed04 	.word	0xe000ed04

08002a34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b090      	sub	sp, #64	@ 0x40
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10b      	bne.n	8002a64 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002a5e:	bf00      	nop
 8002a60:	bf00      	nop
 8002a62:	e7fd      	b.n	8002a60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d103      	bne.n	8002a72 <xQueueGenericSendFromISR+0x3e>
 8002a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <xQueueGenericSendFromISR+0x42>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <xQueueGenericSendFromISR+0x44>
 8002a76:	2300      	movs	r3, #0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10b      	bne.n	8002a94 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a8e:	bf00      	nop
 8002a90:	bf00      	nop
 8002a92:	e7fd      	b.n	8002a90 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d103      	bne.n	8002aa2 <xQueueGenericSendFromISR+0x6e>
 8002a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <xQueueGenericSendFromISR+0x72>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <xQueueGenericSendFromISR+0x74>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10b      	bne.n	8002ac4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab0:	f383 8811 	msr	BASEPRI, r3
 8002ab4:	f3bf 8f6f 	isb	sy
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	623b      	str	r3, [r7, #32]
}
 8002abe:	bf00      	nop
 8002ac0:	bf00      	nop
 8002ac2:	e7fd      	b.n	8002ac0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ac4:	f001 fbe8 	bl	8004298 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ac8:	f3ef 8211 	mrs	r2, BASEPRI
 8002acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad0:	f383 8811 	msr	BASEPRI, r3
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	61fa      	str	r2, [r7, #28]
 8002ade:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002ae0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ae2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d302      	bcc.n	8002af6 <xQueueGenericSendFromISR+0xc2>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d12f      	bne.n	8002b56 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002afc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002b0c:	f000 f994 	bl	8002e38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002b10:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d112      	bne.n	8002b40 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d016      	beq.n	8002b50 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b24:	3324      	adds	r3, #36	@ 0x24
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fed6 	bl	80038d8 <xTaskRemoveFromEventList>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00e      	beq.n	8002b50 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00b      	beq.n	8002b50 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	e007      	b.n	8002b50 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b44:	3301      	adds	r3, #1
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	b25a      	sxtb	r2, r3
 8002b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002b50:	2301      	movs	r3, #1
 8002b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002b54:	e001      	b.n	8002b5a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b5c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3740      	adds	r7, #64	@ 0x40
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08c      	sub	sp, #48	@ 0x30
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10b      	bne.n	8002ba2 <xQueueReceive+0x32>
	__asm volatile
 8002b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b8e:	f383 8811 	msr	BASEPRI, r3
 8002b92:	f3bf 8f6f 	isb	sy
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	623b      	str	r3, [r7, #32]
}
 8002b9c:	bf00      	nop
 8002b9e:	bf00      	nop
 8002ba0:	e7fd      	b.n	8002b9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d103      	bne.n	8002bb0 <xQueueReceive+0x40>
 8002ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <xQueueReceive+0x44>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <xQueueReceive+0x46>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10b      	bne.n	8002bd2 <xQueueReceive+0x62>
	__asm volatile
 8002bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bbe:	f383 8811 	msr	BASEPRI, r3
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	61fb      	str	r3, [r7, #28]
}
 8002bcc:	bf00      	nop
 8002bce:	bf00      	nop
 8002bd0:	e7fd      	b.n	8002bce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bd2:	f001 f847 	bl	8003c64 <xTaskGetSchedulerState>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d102      	bne.n	8002be2 <xQueueReceive+0x72>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <xQueueReceive+0x76>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <xQueueReceive+0x78>
 8002be6:	2300      	movs	r3, #0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10b      	bne.n	8002c04 <xQueueReceive+0x94>
	__asm volatile
 8002bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bf0:	f383 8811 	msr	BASEPRI, r3
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	61bb      	str	r3, [r7, #24]
}
 8002bfe:	bf00      	nop
 8002c00:	bf00      	nop
 8002c02:	e7fd      	b.n	8002c00 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c04:	f001 fa68 	bl	80040d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d01f      	beq.n	8002c54 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c14:	68b9      	ldr	r1, [r7, #8]
 8002c16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c18:	f000 f978 	bl	8002f0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1e:	1e5a      	subs	r2, r3, #1
 8002c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c22:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00f      	beq.n	8002c4c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2e:	3310      	adds	r3, #16
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fe51 	bl	80038d8 <xTaskRemoveFromEventList>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d007      	beq.n	8002c4c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002c3c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d30 <xQueueReceive+0x1c0>)
 8002c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002c4c:	f001 fa76 	bl	800413c <vPortExitCritical>
				return pdPASS;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e069      	b.n	8002d28 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d103      	bne.n	8002c62 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c5a:	f001 fa6f 	bl	800413c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	e062      	b.n	8002d28 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d106      	bne.n	8002c76 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c68:	f107 0310 	add.w	r3, r7, #16
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 fe97 	bl	80039a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c72:	2301      	movs	r3, #1
 8002c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c76:	f001 fa61 	bl	800413c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c7a:	f000 fc3d 	bl	80034f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c7e:	f001 fa2b 	bl	80040d8 <vPortEnterCritical>
 8002c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c88:	b25b      	sxtb	r3, r3
 8002c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8e:	d103      	bne.n	8002c98 <xQueueReceive+0x128>
 8002c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c9e:	b25b      	sxtb	r3, r3
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca4:	d103      	bne.n	8002cae <xQueueReceive+0x13e>
 8002ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cae:	f001 fa45 	bl	800413c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cb2:	1d3a      	adds	r2, r7, #4
 8002cb4:	f107 0310 	add.w	r3, r7, #16
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fe86 	bl	80039cc <xTaskCheckForTimeOut>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d123      	bne.n	8002d0e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cc8:	f000 f998 	bl	8002ffc <prvIsQueueEmpty>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d017      	beq.n	8002d02 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd4:	3324      	adds	r3, #36	@ 0x24
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fdd6 	bl	800388c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ce0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ce2:	f000 f939 	bl	8002f58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ce6:	f000 fc15 	bl	8003514 <xTaskResumeAll>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d189      	bne.n	8002c04 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d30 <xQueueReceive+0x1c0>)
 8002cf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	e780      	b.n	8002c04 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002d02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d04:	f000 f928 	bl	8002f58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d08:	f000 fc04 	bl	8003514 <xTaskResumeAll>
 8002d0c:	e77a      	b.n	8002c04 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002d0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d10:	f000 f922 	bl	8002f58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d14:	f000 fbfe 	bl	8003514 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d1a:	f000 f96f 	bl	8002ffc <prvIsQueueEmpty>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f43f af6f 	beq.w	8002c04 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002d26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3730      	adds	r7, #48	@ 0x30
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	e000ed04 	.word	0xe000ed04

08002d34 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08e      	sub	sp, #56	@ 0x38
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10b      	bne.n	8002d62 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8002d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	623b      	str	r3, [r7, #32]
}
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	e7fd      	b.n	8002d5e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d103      	bne.n	8002d70 <xQueueReceiveFromISR+0x3c>
 8002d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <xQueueReceiveFromISR+0x40>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <xQueueReceiveFromISR+0x42>
 8002d74:	2300      	movs	r3, #0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10b      	bne.n	8002d92 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8002d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	61fb      	str	r3, [r7, #28]
}
 8002d8c:	bf00      	nop
 8002d8e:	bf00      	nop
 8002d90:	e7fd      	b.n	8002d8e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d92:	f001 fa81 	bl	8004298 <vPortValidateInterruptPriority>
	__asm volatile
 8002d96:	f3ef 8211 	mrs	r2, BASEPRI
 8002d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	61ba      	str	r2, [r7, #24]
 8002dac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002dae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d02f      	beq.n	8002e1e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002dc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dcc:	f000 f89e 	bl	8002f0c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd2:	1e5a      	subs	r2, r3, #1
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002dd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d112      	bne.n	8002e08 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d016      	beq.n	8002e18 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dec:	3310      	adds	r3, #16
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 fd72 	bl	80038d8 <xTaskRemoveFromEventList>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00e      	beq.n	8002e18 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00b      	beq.n	8002e18 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	e007      	b.n	8002e18 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002e08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	b25a      	sxtb	r2, r3
 8002e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e1c:	e001      	b.n	8002e22 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e24:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f383 8811 	msr	BASEPRI, r3
}
 8002e2c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3738      	adds	r7, #56	@ 0x38
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10d      	bne.n	8002e72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d14d      	bne.n	8002efa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 ff1c 	bl	8003ca0 <xTaskPriorityDisinherit>
 8002e68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	e043      	b.n	8002efa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d119      	bne.n	8002eac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6858      	ldr	r0, [r3, #4]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e80:	461a      	mov	r2, r3
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	f001 fcc4 	bl	8004810 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	441a      	add	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d32b      	bcc.n	8002efa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	e026      	b.n	8002efa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	68d8      	ldr	r0, [r3, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	68b9      	ldr	r1, [r7, #8]
 8002eb8:	f001 fcaa 	bl	8004810 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec4:	425b      	negs	r3, r3
 8002ec6:	441a      	add	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d207      	bcs.n	8002ee8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee0:	425b      	negs	r3, r3
 8002ee2:	441a      	add	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d105      	bne.n	8002efa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002f02:	697b      	ldr	r3, [r7, #20]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d018      	beq.n	8002f50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	441a      	add	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d303      	bcc.n	8002f40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68d9      	ldr	r1, [r3, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f48:	461a      	mov	r2, r3
 8002f4a:	6838      	ldr	r0, [r7, #0]
 8002f4c:	f001 fc60 	bl	8004810 <memcpy>
	}
}
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f60:	f001 f8ba 	bl	80040d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f6c:	e011      	b.n	8002f92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d012      	beq.n	8002f9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3324      	adds	r3, #36	@ 0x24
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 fcac 	bl	80038d8 <xTaskRemoveFromEventList>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f86:	f000 fd85 	bl	8003a94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	dce9      	bgt.n	8002f6e <prvUnlockQueue+0x16>
 8002f9a:	e000      	b.n	8002f9e <prvUnlockQueue+0x46>
					break;
 8002f9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	22ff      	movs	r2, #255	@ 0xff
 8002fa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002fa6:	f001 f8c9 	bl	800413c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002faa:	f001 f895 	bl	80040d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002fb4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fb6:	e011      	b.n	8002fdc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d012      	beq.n	8002fe6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3310      	adds	r3, #16
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fc87 	bl	80038d8 <xTaskRemoveFromEventList>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002fd0:	f000 fd60 	bl	8003a94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002fd4:	7bbb      	ldrb	r3, [r7, #14]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	dce9      	bgt.n	8002fb8 <prvUnlockQueue+0x60>
 8002fe4:	e000      	b.n	8002fe8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002fe6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	22ff      	movs	r2, #255	@ 0xff
 8002fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002ff0:	f001 f8a4 	bl	800413c <vPortExitCritical>
}
 8002ff4:	bf00      	nop
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003004:	f001 f868 	bl	80040d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300c:	2b00      	cmp	r3, #0
 800300e:	d102      	bne.n	8003016 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003010:	2301      	movs	r3, #1
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	e001      	b.n	800301a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800301a:	f001 f88f 	bl	800413c <vPortExitCritical>

	return xReturn;
 800301e:	68fb      	ldr	r3, [r7, #12]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003030:	f001 f852 	bl	80040d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303c:	429a      	cmp	r2, r3
 800303e:	d102      	bne.n	8003046 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003040:	2301      	movs	r3, #1
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	e001      	b.n	800304a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800304a:	f001 f877 	bl	800413c <vPortExitCritical>

	return xReturn;
 800304e:	68fb      	ldr	r3, [r7, #12]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08e      	sub	sp, #56	@ 0x38
 800305c:	af04      	add	r7, sp, #16
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10b      	bne.n	8003084 <xTaskCreateStatic+0x2c>
	__asm volatile
 800306c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	623b      	str	r3, [r7, #32]
}
 800307e:	bf00      	nop
 8003080:	bf00      	nop
 8003082:	e7fd      	b.n	8003080 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10b      	bne.n	80030a2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	61fb      	str	r3, [r7, #28]
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	e7fd      	b.n	800309e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80030a2:	23a0      	movs	r3, #160	@ 0xa0
 80030a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2ba0      	cmp	r3, #160	@ 0xa0
 80030aa:	d00b      	beq.n	80030c4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80030ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030b0:	f383 8811 	msr	BASEPRI, r3
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	61bb      	str	r3, [r7, #24]
}
 80030be:	bf00      	nop
 80030c0:	bf00      	nop
 80030c2:	e7fd      	b.n	80030c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80030c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80030c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01e      	beq.n	800310a <xTaskCreateStatic+0xb2>
 80030cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d01b      	beq.n	800310a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80030dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80030e4:	2300      	movs	r3, #0
 80030e6:	9303      	str	r3, [sp, #12]
 80030e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ea:	9302      	str	r3, [sp, #8]
 80030ec:	f107 0314 	add.w	r3, r7, #20
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	68b9      	ldr	r1, [r7, #8]
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f851 	bl	80031a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003102:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003104:	f000 f8ee 	bl	80032e4 <prvAddNewTaskToReadyList>
 8003108:	e001      	b.n	800310e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800310e:	697b      	ldr	r3, [r7, #20]
	}
 8003110:	4618      	mov	r0, r3
 8003112:	3728      	adds	r7, #40	@ 0x28
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08c      	sub	sp, #48	@ 0x30
 800311c:	af04      	add	r7, sp, #16
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4618      	mov	r0, r3
 800312e:	f001 f8f5 	bl	800431c <pvPortMalloc>
 8003132:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00e      	beq.n	8003158 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800313a:	20a0      	movs	r0, #160	@ 0xa0
 800313c:	f001 f8ee 	bl	800431c <pvPortMalloc>
 8003140:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	631a      	str	r2, [r3, #48]	@ 0x30
 800314e:	e005      	b.n	800315c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003150:	6978      	ldr	r0, [r7, #20]
 8003152:	f001 f9b1 	bl	80044b8 <vPortFree>
 8003156:	e001      	b.n	800315c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d017      	beq.n	8003192 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800316a:	88fa      	ldrh	r2, [r7, #6]
 800316c:	2300      	movs	r3, #0
 800316e:	9303      	str	r3, [sp, #12]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	9302      	str	r3, [sp, #8]
 8003174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 f80f 	bl	80031a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003186:	69f8      	ldr	r0, [r7, #28]
 8003188:	f000 f8ac 	bl	80032e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800318c:	2301      	movs	r3, #1
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	e002      	b.n	8003198 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003198:	69bb      	ldr	r3, [r7, #24]
	}
 800319a:	4618      	mov	r0, r3
 800319c:	3720      	adds	r7, #32
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80031b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031bc:	3b01      	subs	r3, #1
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	f023 0307 	bic.w	r3, r3, #7
 80031ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00b      	beq.n	80031ee <prvInitialiseNewTask+0x4a>
	__asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	617b      	str	r3, [r7, #20]
}
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	e7fd      	b.n	80031ea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01f      	beq.n	8003234 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031f4:	2300      	movs	r3, #0
 80031f6:	61fb      	str	r3, [r7, #28]
 80031f8:	e012      	b.n	8003220 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	4413      	add	r3, r2
 8003200:	7819      	ldrb	r1, [r3, #0]
 8003202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	4413      	add	r3, r2
 8003208:	3334      	adds	r3, #52	@ 0x34
 800320a:	460a      	mov	r2, r1
 800320c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	4413      	add	r3, r2
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d006      	beq.n	8003228 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3301      	adds	r3, #1
 800321e:	61fb      	str	r3, [r7, #28]
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	2b0f      	cmp	r3, #15
 8003224:	d9e9      	bls.n	80031fa <prvInitialiseNewTask+0x56>
 8003226:	e000      	b.n	800322a <prvInitialiseNewTask+0x86>
			{
				break;
 8003228:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800322a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003232:	e003      	b.n	800323c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800323c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323e:	2b06      	cmp	r3, #6
 8003240:	d901      	bls.n	8003246 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003242:	2306      	movs	r3, #6
 8003244:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003248:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800324a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800324c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003250:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003254:	2200      	movs	r2, #0
 8003256:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800325a:	3304      	adds	r3, #4
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff f911 	bl	8002484 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003264:	3318      	adds	r3, #24
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff f90c 	bl	8002484 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800326c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003270:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003274:	f1c3 0207 	rsb	r2, r3, #7
 8003278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800327c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003280:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003284:	2200      	movs	r2, #0
 8003286:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800328a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328c:	2200      	movs	r2, #0
 800328e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003294:	334c      	adds	r3, #76	@ 0x4c
 8003296:	224c      	movs	r2, #76	@ 0x4c
 8003298:	2100      	movs	r1, #0
 800329a:	4618      	mov	r0, r3
 800329c:	f001 fa2c 	bl	80046f8 <memset>
 80032a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a2:	4a0d      	ldr	r2, [pc, #52]	@ (80032d8 <prvInitialiseNewTask+0x134>)
 80032a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80032a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a8:	4a0c      	ldr	r2, [pc, #48]	@ (80032dc <prvInitialiseNewTask+0x138>)
 80032aa:	655a      	str	r2, [r3, #84]	@ 0x54
 80032ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ae:	4a0c      	ldr	r2, [pc, #48]	@ (80032e0 <prvInitialiseNewTask+0x13c>)
 80032b0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	68f9      	ldr	r1, [r7, #12]
 80032b6:	69b8      	ldr	r0, [r7, #24]
 80032b8:	f000 fde0 	bl	8003e7c <pxPortInitialiseStack>
 80032bc:	4602      	mov	r2, r0
 80032be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80032c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032ce:	bf00      	nop
 80032d0:	3720      	adds	r7, #32
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	200014d4 	.word	0x200014d4
 80032dc:	2000153c 	.word	0x2000153c
 80032e0:	200015a4 	.word	0x200015a4

080032e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80032ec:	f000 fef4 	bl	80040d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80032f0:	4b2a      	ldr	r3, [pc, #168]	@ (800339c <prvAddNewTaskToReadyList+0xb8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3301      	adds	r3, #1
 80032f6:	4a29      	ldr	r2, [pc, #164]	@ (800339c <prvAddNewTaskToReadyList+0xb8>)
 80032f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80032fa:	4b29      	ldr	r3, [pc, #164]	@ (80033a0 <prvAddNewTaskToReadyList+0xbc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003302:	4a27      	ldr	r2, [pc, #156]	@ (80033a0 <prvAddNewTaskToReadyList+0xbc>)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003308:	4b24      	ldr	r3, [pc, #144]	@ (800339c <prvAddNewTaskToReadyList+0xb8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d110      	bne.n	8003332 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003310:	f000 fbe4 	bl	8003adc <prvInitialiseTaskLists>
 8003314:	e00d      	b.n	8003332 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003316:	4b23      	ldr	r3, [pc, #140]	@ (80033a4 <prvAddNewTaskToReadyList+0xc0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800331e:	4b20      	ldr	r3, [pc, #128]	@ (80033a0 <prvAddNewTaskToReadyList+0xbc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003328:	429a      	cmp	r2, r3
 800332a:	d802      	bhi.n	8003332 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800332c:	4a1c      	ldr	r2, [pc, #112]	@ (80033a0 <prvAddNewTaskToReadyList+0xbc>)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003332:	4b1d      	ldr	r3, [pc, #116]	@ (80033a8 <prvAddNewTaskToReadyList+0xc4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	3301      	adds	r3, #1
 8003338:	4a1b      	ldr	r2, [pc, #108]	@ (80033a8 <prvAddNewTaskToReadyList+0xc4>)
 800333a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003340:	2201      	movs	r2, #1
 8003342:	409a      	lsls	r2, r3
 8003344:	4b19      	ldr	r3, [pc, #100]	@ (80033ac <prvAddNewTaskToReadyList+0xc8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4313      	orrs	r3, r2
 800334a:	4a18      	ldr	r2, [pc, #96]	@ (80033ac <prvAddNewTaskToReadyList+0xc8>)
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4a15      	ldr	r2, [pc, #84]	@ (80033b0 <prvAddNewTaskToReadyList+0xcc>)
 800335c:	441a      	add	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3304      	adds	r3, #4
 8003362:	4619      	mov	r1, r3
 8003364:	4610      	mov	r0, r2
 8003366:	f7ff f89a 	bl	800249e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800336a:	f000 fee7 	bl	800413c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800336e:	4b0d      	ldr	r3, [pc, #52]	@ (80033a4 <prvAddNewTaskToReadyList+0xc0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00e      	beq.n	8003394 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003376:	4b0a      	ldr	r3, [pc, #40]	@ (80033a0 <prvAddNewTaskToReadyList+0xbc>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003380:	429a      	cmp	r2, r3
 8003382:	d207      	bcs.n	8003394 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003384:	4b0b      	ldr	r3, [pc, #44]	@ (80033b4 <prvAddNewTaskToReadyList+0xd0>)
 8003386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000480 	.word	0x20000480
 80033a0:	20000380 	.word	0x20000380
 80033a4:	2000048c 	.word	0x2000048c
 80033a8:	2000049c 	.word	0x2000049c
 80033ac:	20000488 	.word	0x20000488
 80033b0:	20000384 	.word	0x20000384
 80033b4:	e000ed04 	.word	0xe000ed04

080033b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d018      	beq.n	80033fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80033ca:	4b14      	ldr	r3, [pc, #80]	@ (800341c <vTaskDelay+0x64>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00b      	beq.n	80033ea <vTaskDelay+0x32>
	__asm volatile
 80033d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033d6:	f383 8811 	msr	BASEPRI, r3
 80033da:	f3bf 8f6f 	isb	sy
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	60bb      	str	r3, [r7, #8]
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	e7fd      	b.n	80033e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80033ea:	f000 f885 	bl	80034f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80033ee:	2100      	movs	r1, #0
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 fcdd 	bl	8003db0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80033f6:	f000 f88d 	bl	8003514 <xTaskResumeAll>
 80033fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d107      	bne.n	8003412 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003402:	4b07      	ldr	r3, [pc, #28]	@ (8003420 <vTaskDelay+0x68>)
 8003404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003412:	bf00      	nop
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	200004a8 	.word	0x200004a8
 8003420:	e000ed04 	.word	0xe000ed04

08003424 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	@ 0x28
 8003428:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800342a:	2300      	movs	r3, #0
 800342c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800342e:	2300      	movs	r3, #0
 8003430:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003432:	463a      	mov	r2, r7
 8003434:	1d39      	adds	r1, r7, #4
 8003436:	f107 0308 	add.w	r3, r7, #8
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd f866 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003440:	6839      	ldr	r1, [r7, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	9202      	str	r2, [sp, #8]
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	2300      	movs	r3, #0
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	2300      	movs	r3, #0
 8003450:	460a      	mov	r2, r1
 8003452:	4921      	ldr	r1, [pc, #132]	@ (80034d8 <vTaskStartScheduler+0xb4>)
 8003454:	4821      	ldr	r0, [pc, #132]	@ (80034dc <vTaskStartScheduler+0xb8>)
 8003456:	f7ff fdff 	bl	8003058 <xTaskCreateStatic>
 800345a:	4603      	mov	r3, r0
 800345c:	4a20      	ldr	r2, [pc, #128]	@ (80034e0 <vTaskStartScheduler+0xbc>)
 800345e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003460:	4b1f      	ldr	r3, [pc, #124]	@ (80034e0 <vTaskStartScheduler+0xbc>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003468:	2301      	movs	r3, #1
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	e001      	b.n	8003472 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d11b      	bne.n	80034b0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347c:	f383 8811 	msr	BASEPRI, r3
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	613b      	str	r3, [r7, #16]
}
 800348a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800348c:	4b15      	ldr	r3, [pc, #84]	@ (80034e4 <vTaskStartScheduler+0xc0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	334c      	adds	r3, #76	@ 0x4c
 8003492:	4a15      	ldr	r2, [pc, #84]	@ (80034e8 <vTaskStartScheduler+0xc4>)
 8003494:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003496:	4b15      	ldr	r3, [pc, #84]	@ (80034ec <vTaskStartScheduler+0xc8>)
 8003498:	f04f 32ff 	mov.w	r2, #4294967295
 800349c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800349e:	4b14      	ldr	r3, [pc, #80]	@ (80034f0 <vTaskStartScheduler+0xcc>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80034a4:	4b13      	ldr	r3, [pc, #76]	@ (80034f4 <vTaskStartScheduler+0xd0>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034aa:	f000 fd71 	bl	8003f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034ae:	e00f      	b.n	80034d0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b6:	d10b      	bne.n	80034d0 <vTaskStartScheduler+0xac>
	__asm volatile
 80034b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	60fb      	str	r3, [r7, #12]
}
 80034ca:	bf00      	nop
 80034cc:	bf00      	nop
 80034ce:	e7fd      	b.n	80034cc <vTaskStartScheduler+0xa8>
}
 80034d0:	bf00      	nop
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	08004950 	.word	0x08004950
 80034dc:	08003aad 	.word	0x08003aad
 80034e0:	200004a4 	.word	0x200004a4
 80034e4:	20000380 	.word	0x20000380
 80034e8:	20000010 	.word	0x20000010
 80034ec:	200004a0 	.word	0x200004a0
 80034f0:	2000048c 	.word	0x2000048c
 80034f4:	20000484 	.word	0x20000484

080034f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80034fc:	4b04      	ldr	r3, [pc, #16]	@ (8003510 <vTaskSuspendAll+0x18>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	3301      	adds	r3, #1
 8003502:	4a03      	ldr	r2, [pc, #12]	@ (8003510 <vTaskSuspendAll+0x18>)
 8003504:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003506:	bf00      	nop
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	200004a8 	.word	0x200004a8

08003514 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800351e:	2300      	movs	r3, #0
 8003520:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003522:	4b42      	ldr	r3, [pc, #264]	@ (800362c <xTaskResumeAll+0x118>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10b      	bne.n	8003542 <xTaskResumeAll+0x2e>
	__asm volatile
 800352a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800352e:	f383 8811 	msr	BASEPRI, r3
 8003532:	f3bf 8f6f 	isb	sy
 8003536:	f3bf 8f4f 	dsb	sy
 800353a:	603b      	str	r3, [r7, #0]
}
 800353c:	bf00      	nop
 800353e:	bf00      	nop
 8003540:	e7fd      	b.n	800353e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003542:	f000 fdc9 	bl	80040d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003546:	4b39      	ldr	r3, [pc, #228]	@ (800362c <xTaskResumeAll+0x118>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3b01      	subs	r3, #1
 800354c:	4a37      	ldr	r2, [pc, #220]	@ (800362c <xTaskResumeAll+0x118>)
 800354e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003550:	4b36      	ldr	r3, [pc, #216]	@ (800362c <xTaskResumeAll+0x118>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d161      	bne.n	800361c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003558:	4b35      	ldr	r3, [pc, #212]	@ (8003630 <xTaskResumeAll+0x11c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d05d      	beq.n	800361c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003560:	e02e      	b.n	80035c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003562:	4b34      	ldr	r3, [pc, #208]	@ (8003634 <xTaskResumeAll+0x120>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3318      	adds	r3, #24
 800356e:	4618      	mov	r0, r3
 8003570:	f7fe fff2 	bl	8002558 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	3304      	adds	r3, #4
 8003578:	4618      	mov	r0, r3
 800357a:	f7fe ffed 	bl	8002558 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003582:	2201      	movs	r2, #1
 8003584:	409a      	lsls	r2, r3
 8003586:	4b2c      	ldr	r3, [pc, #176]	@ (8003638 <xTaskResumeAll+0x124>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4313      	orrs	r3, r2
 800358c:	4a2a      	ldr	r2, [pc, #168]	@ (8003638 <xTaskResumeAll+0x124>)
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4a27      	ldr	r2, [pc, #156]	@ (800363c <xTaskResumeAll+0x128>)
 800359e:	441a      	add	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	3304      	adds	r3, #4
 80035a4:	4619      	mov	r1, r3
 80035a6:	4610      	mov	r0, r2
 80035a8:	f7fe ff79 	bl	800249e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035b0:	4b23      	ldr	r3, [pc, #140]	@ (8003640 <xTaskResumeAll+0x12c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d302      	bcc.n	80035c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80035ba:	4b22      	ldr	r3, [pc, #136]	@ (8003644 <xTaskResumeAll+0x130>)
 80035bc:	2201      	movs	r2, #1
 80035be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003634 <xTaskResumeAll+0x120>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1cc      	bne.n	8003562 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035ce:	f000 fb29 	bl	8003c24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80035d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003648 <xTaskResumeAll+0x134>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d010      	beq.n	8003600 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80035de:	f000 f837 	bl	8003650 <xTaskIncrementTick>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80035e8:	4b16      	ldr	r3, [pc, #88]	@ (8003644 <xTaskResumeAll+0x130>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f1      	bne.n	80035de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80035fa:	4b13      	ldr	r3, [pc, #76]	@ (8003648 <xTaskResumeAll+0x134>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003600:	4b10      	ldr	r3, [pc, #64]	@ (8003644 <xTaskResumeAll+0x130>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d009      	beq.n	800361c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003608:	2301      	movs	r3, #1
 800360a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800360c:	4b0f      	ldr	r3, [pc, #60]	@ (800364c <xTaskResumeAll+0x138>)
 800360e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800361c:	f000 fd8e 	bl	800413c <vPortExitCritical>

	return xAlreadyYielded;
 8003620:	68bb      	ldr	r3, [r7, #8]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	200004a8 	.word	0x200004a8
 8003630:	20000480 	.word	0x20000480
 8003634:	20000440 	.word	0x20000440
 8003638:	20000488 	.word	0x20000488
 800363c:	20000384 	.word	0x20000384
 8003640:	20000380 	.word	0x20000380
 8003644:	20000494 	.word	0x20000494
 8003648:	20000490 	.word	0x20000490
 800364c:	e000ed04 	.word	0xe000ed04

08003650 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800365a:	4b4f      	ldr	r3, [pc, #316]	@ (8003798 <xTaskIncrementTick+0x148>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	f040 808f 	bne.w	8003782 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003664:	4b4d      	ldr	r3, [pc, #308]	@ (800379c <xTaskIncrementTick+0x14c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3301      	adds	r3, #1
 800366a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800366c:	4a4b      	ldr	r2, [pc, #300]	@ (800379c <xTaskIncrementTick+0x14c>)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d121      	bne.n	80036bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003678:	4b49      	ldr	r3, [pc, #292]	@ (80037a0 <xTaskIncrementTick+0x150>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00b      	beq.n	800369a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	603b      	str	r3, [r7, #0]
}
 8003694:	bf00      	nop
 8003696:	bf00      	nop
 8003698:	e7fd      	b.n	8003696 <xTaskIncrementTick+0x46>
 800369a:	4b41      	ldr	r3, [pc, #260]	@ (80037a0 <xTaskIncrementTick+0x150>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	4b40      	ldr	r3, [pc, #256]	@ (80037a4 <xTaskIncrementTick+0x154>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a3e      	ldr	r2, [pc, #248]	@ (80037a0 <xTaskIncrementTick+0x150>)
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	4a3e      	ldr	r2, [pc, #248]	@ (80037a4 <xTaskIncrementTick+0x154>)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4b3e      	ldr	r3, [pc, #248]	@ (80037a8 <xTaskIncrementTick+0x158>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3301      	adds	r3, #1
 80036b4:	4a3c      	ldr	r2, [pc, #240]	@ (80037a8 <xTaskIncrementTick+0x158>)
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	f000 fab4 	bl	8003c24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036bc:	4b3b      	ldr	r3, [pc, #236]	@ (80037ac <xTaskIncrementTick+0x15c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d348      	bcc.n	8003758 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036c6:	4b36      	ldr	r3, [pc, #216]	@ (80037a0 <xTaskIncrementTick+0x150>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d104      	bne.n	80036da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d0:	4b36      	ldr	r3, [pc, #216]	@ (80037ac <xTaskIncrementTick+0x15c>)
 80036d2:	f04f 32ff 	mov.w	r2, #4294967295
 80036d6:	601a      	str	r2, [r3, #0]
					break;
 80036d8:	e03e      	b.n	8003758 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036da:	4b31      	ldr	r3, [pc, #196]	@ (80037a0 <xTaskIncrementTick+0x150>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d203      	bcs.n	80036fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80036f2:	4a2e      	ldr	r2, [pc, #184]	@ (80037ac <xTaskIncrementTick+0x15c>)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80036f8:	e02e      	b.n	8003758 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	3304      	adds	r3, #4
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe ff2a 	bl	8002558 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003708:	2b00      	cmp	r3, #0
 800370a:	d004      	beq.n	8003716 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	3318      	adds	r3, #24
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe ff21 	bl	8002558 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371a:	2201      	movs	r2, #1
 800371c:	409a      	lsls	r2, r3
 800371e:	4b24      	ldr	r3, [pc, #144]	@ (80037b0 <xTaskIncrementTick+0x160>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4313      	orrs	r3, r2
 8003724:	4a22      	ldr	r2, [pc, #136]	@ (80037b0 <xTaskIncrementTick+0x160>)
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4a1f      	ldr	r2, [pc, #124]	@ (80037b4 <xTaskIncrementTick+0x164>)
 8003736:	441a      	add	r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	3304      	adds	r3, #4
 800373c:	4619      	mov	r1, r3
 800373e:	4610      	mov	r0, r2
 8003740:	f7fe fead 	bl	800249e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003748:	4b1b      	ldr	r3, [pc, #108]	@ (80037b8 <xTaskIncrementTick+0x168>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374e:	429a      	cmp	r2, r3
 8003750:	d3b9      	bcc.n	80036c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003752:	2301      	movs	r3, #1
 8003754:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003756:	e7b6      	b.n	80036c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003758:	4b17      	ldr	r3, [pc, #92]	@ (80037b8 <xTaskIncrementTick+0x168>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800375e:	4915      	ldr	r1, [pc, #84]	@ (80037b4 <xTaskIncrementTick+0x164>)
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d901      	bls.n	8003774 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003770:	2301      	movs	r3, #1
 8003772:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003774:	4b11      	ldr	r3, [pc, #68]	@ (80037bc <xTaskIncrementTick+0x16c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d007      	beq.n	800378c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800377c:	2301      	movs	r3, #1
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	e004      	b.n	800378c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003782:	4b0f      	ldr	r3, [pc, #60]	@ (80037c0 <xTaskIncrementTick+0x170>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3301      	adds	r3, #1
 8003788:	4a0d      	ldr	r2, [pc, #52]	@ (80037c0 <xTaskIncrementTick+0x170>)
 800378a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800378c:	697b      	ldr	r3, [r7, #20]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	200004a8 	.word	0x200004a8
 800379c:	20000484 	.word	0x20000484
 80037a0:	20000438 	.word	0x20000438
 80037a4:	2000043c 	.word	0x2000043c
 80037a8:	20000498 	.word	0x20000498
 80037ac:	200004a0 	.word	0x200004a0
 80037b0:	20000488 	.word	0x20000488
 80037b4:	20000384 	.word	0x20000384
 80037b8:	20000380 	.word	0x20000380
 80037bc:	20000494 	.word	0x20000494
 80037c0:	20000490 	.word	0x20000490

080037c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003874 <vTaskSwitchContext+0xb0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80037d2:	4b29      	ldr	r3, [pc, #164]	@ (8003878 <vTaskSwitchContext+0xb4>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80037d8:	e045      	b.n	8003866 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80037da:	4b27      	ldr	r3, [pc, #156]	@ (8003878 <vTaskSwitchContext+0xb4>)
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037e0:	4b26      	ldr	r3, [pc, #152]	@ (800387c <vTaskSwitchContext+0xb8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	fab3 f383 	clz	r3, r3
 80037ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80037ee:	7afb      	ldrb	r3, [r7, #11]
 80037f0:	f1c3 031f 	rsb	r3, r3, #31
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	4922      	ldr	r1, [pc, #136]	@ (8003880 <vTaskSwitchContext+0xbc>)
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10b      	bne.n	8003822 <vTaskSwitchContext+0x5e>
	__asm volatile
 800380a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800380e:	f383 8811 	msr	BASEPRI, r3
 8003812:	f3bf 8f6f 	isb	sy
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	607b      	str	r3, [r7, #4]
}
 800381c:	bf00      	nop
 800381e:	bf00      	nop
 8003820:	e7fd      	b.n	800381e <vTaskSwitchContext+0x5a>
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4a14      	ldr	r2, [pc, #80]	@ (8003880 <vTaskSwitchContext+0xbc>)
 800382e:	4413      	add	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	3308      	adds	r3, #8
 8003844:	429a      	cmp	r2, r3
 8003846:	d104      	bne.n	8003852 <vTaskSwitchContext+0x8e>
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	605a      	str	r2, [r3, #4]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4a0a      	ldr	r2, [pc, #40]	@ (8003884 <vTaskSwitchContext+0xc0>)
 800385a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800385c:	4b09      	ldr	r3, [pc, #36]	@ (8003884 <vTaskSwitchContext+0xc0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	334c      	adds	r3, #76	@ 0x4c
 8003862:	4a09      	ldr	r2, [pc, #36]	@ (8003888 <vTaskSwitchContext+0xc4>)
 8003864:	6013      	str	r3, [r2, #0]
}
 8003866:	bf00      	nop
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	200004a8 	.word	0x200004a8
 8003878:	20000494 	.word	0x20000494
 800387c:	20000488 	.word	0x20000488
 8003880:	20000384 	.word	0x20000384
 8003884:	20000380 	.word	0x20000380
 8003888:	20000010 	.word	0x20000010

0800388c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10b      	bne.n	80038b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	60fb      	str	r3, [r7, #12]
}
 80038ae:	bf00      	nop
 80038b0:	bf00      	nop
 80038b2:	e7fd      	b.n	80038b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038b4:	4b07      	ldr	r3, [pc, #28]	@ (80038d4 <vTaskPlaceOnEventList+0x48>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3318      	adds	r3, #24
 80038ba:	4619      	mov	r1, r3
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7fe fe12 	bl	80024e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038c2:	2101      	movs	r1, #1
 80038c4:	6838      	ldr	r0, [r7, #0]
 80038c6:	f000 fa73 	bl	8003db0 <prvAddCurrentTaskToDelayedList>
}
 80038ca:	bf00      	nop
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000380 	.word	0x20000380

080038d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10b      	bne.n	8003906 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80038ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f2:	f383 8811 	msr	BASEPRI, r3
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	60fb      	str	r3, [r7, #12]
}
 8003900:	bf00      	nop
 8003902:	bf00      	nop
 8003904:	e7fd      	b.n	8003902 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	3318      	adds	r3, #24
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe fe24 	bl	8002558 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003910:	4b1d      	ldr	r3, [pc, #116]	@ (8003988 <xTaskRemoveFromEventList+0xb0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d11c      	bne.n	8003952 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	3304      	adds	r3, #4
 800391c:	4618      	mov	r0, r3
 800391e:	f7fe fe1b 	bl	8002558 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003926:	2201      	movs	r2, #1
 8003928:	409a      	lsls	r2, r3
 800392a:	4b18      	ldr	r3, [pc, #96]	@ (800398c <xTaskRemoveFromEventList+0xb4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4313      	orrs	r3, r2
 8003930:	4a16      	ldr	r2, [pc, #88]	@ (800398c <xTaskRemoveFromEventList+0xb4>)
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4a13      	ldr	r2, [pc, #76]	@ (8003990 <xTaskRemoveFromEventList+0xb8>)
 8003942:	441a      	add	r2, r3
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	3304      	adds	r3, #4
 8003948:	4619      	mov	r1, r3
 800394a:	4610      	mov	r0, r2
 800394c:	f7fe fda7 	bl	800249e <vListInsertEnd>
 8003950:	e005      	b.n	800395e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	3318      	adds	r3, #24
 8003956:	4619      	mov	r1, r3
 8003958:	480e      	ldr	r0, [pc, #56]	@ (8003994 <xTaskRemoveFromEventList+0xbc>)
 800395a:	f7fe fda0 	bl	800249e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003962:	4b0d      	ldr	r3, [pc, #52]	@ (8003998 <xTaskRemoveFromEventList+0xc0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003968:	429a      	cmp	r2, r3
 800396a:	d905      	bls.n	8003978 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800396c:	2301      	movs	r3, #1
 800396e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003970:	4b0a      	ldr	r3, [pc, #40]	@ (800399c <xTaskRemoveFromEventList+0xc4>)
 8003972:	2201      	movs	r2, #1
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	e001      	b.n	800397c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800397c:	697b      	ldr	r3, [r7, #20]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	200004a8 	.word	0x200004a8
 800398c:	20000488 	.word	0x20000488
 8003990:	20000384 	.word	0x20000384
 8003994:	20000440 	.word	0x20000440
 8003998:	20000380 	.word	0x20000380
 800399c:	20000494 	.word	0x20000494

080039a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039a8:	4b06      	ldr	r3, [pc, #24]	@ (80039c4 <vTaskInternalSetTimeOutState+0x24>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80039b0:	4b05      	ldr	r3, [pc, #20]	@ (80039c8 <vTaskInternalSetTimeOutState+0x28>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	605a      	str	r2, [r3, #4]
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	20000498 	.word	0x20000498
 80039c8:	20000484 	.word	0x20000484

080039cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10b      	bne.n	80039f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80039dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e0:	f383 8811 	msr	BASEPRI, r3
 80039e4:	f3bf 8f6f 	isb	sy
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	613b      	str	r3, [r7, #16]
}
 80039ee:	bf00      	nop
 80039f0:	bf00      	nop
 80039f2:	e7fd      	b.n	80039f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10b      	bne.n	8003a12 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80039fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	60fb      	str	r3, [r7, #12]
}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	e7fd      	b.n	8003a0e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003a12:	f000 fb61 	bl	80040d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a16:	4b1d      	ldr	r3, [pc, #116]	@ (8003a8c <xTaskCheckForTimeOut+0xc0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2e:	d102      	bne.n	8003a36 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	e023      	b.n	8003a7e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4b15      	ldr	r3, [pc, #84]	@ (8003a90 <xTaskCheckForTimeOut+0xc4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d007      	beq.n	8003a52 <xTaskCheckForTimeOut+0x86>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d302      	bcc.n	8003a52 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	61fb      	str	r3, [r7, #28]
 8003a50:	e015      	b.n	8003a7e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d20b      	bcs.n	8003a74 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	1ad2      	subs	r2, r2, r3
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ff99 	bl	80039a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	e004      	b.n	8003a7e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003a7e:	f000 fb5d 	bl	800413c <vPortExitCritical>

	return xReturn;
 8003a82:	69fb      	ldr	r3, [r7, #28]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20000484 	.word	0x20000484
 8003a90:	20000498 	.word	0x20000498

08003a94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a98:	4b03      	ldr	r3, [pc, #12]	@ (8003aa8 <vTaskMissedYield+0x14>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
}
 8003a9e:	bf00      	nop
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	20000494 	.word	0x20000494

08003aac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ab4:	f000 f852 	bl	8003b5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ab8:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <prvIdleTask+0x28>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d9f9      	bls.n	8003ab4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ac0:	4b05      	ldr	r3, [pc, #20]	@ (8003ad8 <prvIdleTask+0x2c>)
 8003ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ad0:	e7f0      	b.n	8003ab4 <prvIdleTask+0x8>
 8003ad2:	bf00      	nop
 8003ad4:	20000384 	.word	0x20000384
 8003ad8:	e000ed04 	.word	0xe000ed04

08003adc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	607b      	str	r3, [r7, #4]
 8003ae6:	e00c      	b.n	8003b02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4a12      	ldr	r2, [pc, #72]	@ (8003b3c <prvInitialiseTaskLists+0x60>)
 8003af4:	4413      	add	r3, r2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fe fca4 	bl	8002444 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3301      	adds	r3, #1
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b06      	cmp	r3, #6
 8003b06:	d9ef      	bls.n	8003ae8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b08:	480d      	ldr	r0, [pc, #52]	@ (8003b40 <prvInitialiseTaskLists+0x64>)
 8003b0a:	f7fe fc9b 	bl	8002444 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b0e:	480d      	ldr	r0, [pc, #52]	@ (8003b44 <prvInitialiseTaskLists+0x68>)
 8003b10:	f7fe fc98 	bl	8002444 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b14:	480c      	ldr	r0, [pc, #48]	@ (8003b48 <prvInitialiseTaskLists+0x6c>)
 8003b16:	f7fe fc95 	bl	8002444 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b1a:	480c      	ldr	r0, [pc, #48]	@ (8003b4c <prvInitialiseTaskLists+0x70>)
 8003b1c:	f7fe fc92 	bl	8002444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b20:	480b      	ldr	r0, [pc, #44]	@ (8003b50 <prvInitialiseTaskLists+0x74>)
 8003b22:	f7fe fc8f 	bl	8002444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b26:	4b0b      	ldr	r3, [pc, #44]	@ (8003b54 <prvInitialiseTaskLists+0x78>)
 8003b28:	4a05      	ldr	r2, [pc, #20]	@ (8003b40 <prvInitialiseTaskLists+0x64>)
 8003b2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b58 <prvInitialiseTaskLists+0x7c>)
 8003b2e:	4a05      	ldr	r2, [pc, #20]	@ (8003b44 <prvInitialiseTaskLists+0x68>)
 8003b30:	601a      	str	r2, [r3, #0]
}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20000384 	.word	0x20000384
 8003b40:	20000410 	.word	0x20000410
 8003b44:	20000424 	.word	0x20000424
 8003b48:	20000440 	.word	0x20000440
 8003b4c:	20000454 	.word	0x20000454
 8003b50:	2000046c 	.word	0x2000046c
 8003b54:	20000438 	.word	0x20000438
 8003b58:	2000043c 	.word	0x2000043c

08003b5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b62:	e019      	b.n	8003b98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b64:	f000 fab8 	bl	80040d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b68:	4b10      	ldr	r3, [pc, #64]	@ (8003bac <prvCheckTasksWaitingTermination+0x50>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3304      	adds	r3, #4
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fe fcef 	bl	8002558 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb0 <prvCheckTasksWaitingTermination+0x54>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	4a0b      	ldr	r2, [pc, #44]	@ (8003bb0 <prvCheckTasksWaitingTermination+0x54>)
 8003b82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b84:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb4 <prvCheckTasksWaitingTermination+0x58>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb4 <prvCheckTasksWaitingTermination+0x58>)
 8003b8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b8e:	f000 fad5 	bl	800413c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f810 	bl	8003bb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b98:	4b06      	ldr	r3, [pc, #24]	@ (8003bb4 <prvCheckTasksWaitingTermination+0x58>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e1      	bne.n	8003b64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ba0:	bf00      	nop
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000454 	.word	0x20000454
 8003bb0:	20000480 	.word	0x20000480
 8003bb4:	20000468 	.word	0x20000468

08003bb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	334c      	adds	r3, #76	@ 0x4c
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 fd9f 	bl	8004708 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d108      	bne.n	8003be6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 fc6d 	bl	80044b8 <vPortFree>
				vPortFree( pxTCB );
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fc6a 	bl	80044b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003be4:	e019      	b.n	8003c1a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d103      	bne.n	8003bf8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 fc61 	bl	80044b8 <vPortFree>
	}
 8003bf6:	e010      	b.n	8003c1a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d00b      	beq.n	8003c1a <prvDeleteTCB+0x62>
	__asm volatile
 8003c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	60fb      	str	r3, [r7, #12]
}
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop
 8003c18:	e7fd      	b.n	8003c16 <prvDeleteTCB+0x5e>
	}
 8003c1a:	bf00      	nop
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c5c <prvResetNextTaskUnblockTime+0x38>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d104      	bne.n	8003c3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c34:	4b0a      	ldr	r3, [pc, #40]	@ (8003c60 <prvResetNextTaskUnblockTime+0x3c>)
 8003c36:	f04f 32ff 	mov.w	r2, #4294967295
 8003c3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c3c:	e008      	b.n	8003c50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c3e:	4b07      	ldr	r3, [pc, #28]	@ (8003c5c <prvResetNextTaskUnblockTime+0x38>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	4a04      	ldr	r2, [pc, #16]	@ (8003c60 <prvResetNextTaskUnblockTime+0x3c>)
 8003c4e:	6013      	str	r3, [r2, #0]
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	20000438 	.word	0x20000438
 8003c60:	200004a0 	.word	0x200004a0

08003c64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c98 <xTaskGetSchedulerState+0x34>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d102      	bne.n	8003c78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c72:	2301      	movs	r3, #1
 8003c74:	607b      	str	r3, [r7, #4]
 8003c76:	e008      	b.n	8003c8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c78:	4b08      	ldr	r3, [pc, #32]	@ (8003c9c <xTaskGetSchedulerState+0x38>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d102      	bne.n	8003c86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c80:	2302      	movs	r3, #2
 8003c82:	607b      	str	r3, [r7, #4]
 8003c84:	e001      	b.n	8003c8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c86:	2300      	movs	r3, #0
 8003c88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c8a:	687b      	ldr	r3, [r7, #4]
	}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	2000048c 	.word	0x2000048c
 8003c9c:	200004a8 	.word	0x200004a8

08003ca0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d070      	beq.n	8003d98 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8003da4 <xTaskPriorityDisinherit+0x104>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d00b      	beq.n	8003cd8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	60fb      	str	r3, [r7, #12]
}
 8003cd2:	bf00      	nop
 8003cd4:	bf00      	nop
 8003cd6:	e7fd      	b.n	8003cd4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10b      	bne.n	8003cf8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	60bb      	str	r3, [r7, #8]
}
 8003cf2:	bf00      	nop
 8003cf4:	bf00      	nop
 8003cf6:	e7fd      	b.n	8003cf4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cfc:	1e5a      	subs	r2, r3, #1
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d044      	beq.n	8003d98 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d140      	bne.n	8003d98 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fe fc1c 	bl	8002558 <uxListRemove>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d115      	bne.n	8003d52 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d2a:	491f      	ldr	r1, [pc, #124]	@ (8003da8 <xTaskPriorityDisinherit+0x108>)
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10a      	bne.n	8003d52 <xTaskPriorityDisinherit+0xb2>
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d40:	2201      	movs	r2, #1
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	43da      	mvns	r2, r3
 8003d48:	4b18      	ldr	r3, [pc, #96]	@ (8003dac <xTaskPriorityDisinherit+0x10c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	4a17      	ldr	r2, [pc, #92]	@ (8003dac <xTaskPriorityDisinherit+0x10c>)
 8003d50:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5e:	f1c3 0207 	rsb	r2, r3, #7
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003dac <xTaskPriorityDisinherit+0x10c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	4a0d      	ldr	r2, [pc, #52]	@ (8003dac <xTaskPriorityDisinherit+0x10c>)
 8003d76:	6013      	str	r3, [r2, #0]
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4a08      	ldr	r2, [pc, #32]	@ (8003da8 <xTaskPriorityDisinherit+0x108>)
 8003d86:	441a      	add	r2, r3
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4610      	mov	r0, r2
 8003d90:	f7fe fb85 	bl	800249e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d94:	2301      	movs	r3, #1
 8003d96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d98:	697b      	ldr	r3, [r7, #20]
	}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000380 	.word	0x20000380
 8003da8:	20000384 	.word	0x20000384
 8003dac:	20000488 	.word	0x20000488

08003db0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003dba:	4b29      	ldr	r3, [pc, #164]	@ (8003e60 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dc0:	4b28      	ldr	r3, [pc, #160]	@ (8003e64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fe fbc6 	bl	8002558 <uxListRemove>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10b      	bne.n	8003dea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003dd2:	4b24      	ldr	r3, [pc, #144]	@ (8003e64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd8:	2201      	movs	r2, #1
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43da      	mvns	r2, r3
 8003de0:	4b21      	ldr	r3, [pc, #132]	@ (8003e68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4013      	ands	r3, r2
 8003de6:	4a20      	ldr	r2, [pc, #128]	@ (8003e68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003de8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df0:	d10a      	bne.n	8003e08 <prvAddCurrentTaskToDelayedList+0x58>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d007      	beq.n	8003e08 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003df8:	4b1a      	ldr	r3, [pc, #104]	@ (8003e64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	4619      	mov	r1, r3
 8003e00:	481a      	ldr	r0, [pc, #104]	@ (8003e6c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003e02:	f7fe fb4c 	bl	800249e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e06:	e026      	b.n	8003e56 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e10:	4b14      	ldr	r3, [pc, #80]	@ (8003e64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d209      	bcs.n	8003e34 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e20:	4b13      	ldr	r3, [pc, #76]	@ (8003e70 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b0f      	ldr	r3, [pc, #60]	@ (8003e64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	f7fe fb5a 	bl	80024e6 <vListInsert>
}
 8003e32:	e010      	b.n	8003e56 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e34:	4b0f      	ldr	r3, [pc, #60]	@ (8003e74 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b0a      	ldr	r3, [pc, #40]	@ (8003e64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4610      	mov	r0, r2
 8003e42:	f7fe fb50 	bl	80024e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e46:	4b0c      	ldr	r3, [pc, #48]	@ (8003e78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d202      	bcs.n	8003e56 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003e50:	4a09      	ldr	r2, [pc, #36]	@ (8003e78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	6013      	str	r3, [r2, #0]
}
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000484 	.word	0x20000484
 8003e64:	20000380 	.word	0x20000380
 8003e68:	20000488 	.word	0x20000488
 8003e6c:	2000046c 	.word	0x2000046c
 8003e70:	2000043c 	.word	0x2000043c
 8003e74:	20000438 	.word	0x20000438
 8003e78:	200004a0 	.word	0x200004a0

08003e7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3b04      	subs	r3, #4
 8003e8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	3b04      	subs	r3, #4
 8003e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f023 0201 	bic.w	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3b04      	subs	r3, #4
 8003eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003eac:	4a0c      	ldr	r2, [pc, #48]	@ (8003ee0 <pxPortInitialiseStack+0x64>)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	3b14      	subs	r3, #20
 8003eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	3b04      	subs	r3, #4
 8003ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f06f 0202 	mvn.w	r2, #2
 8003eca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3b20      	subs	r3, #32
 8003ed0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	08003ee5 	.word	0x08003ee5

08003ee4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003eee:	4b13      	ldr	r3, [pc, #76]	@ (8003f3c <prvTaskExitError+0x58>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef6:	d00b      	beq.n	8003f10 <prvTaskExitError+0x2c>
	__asm volatile
 8003ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	60fb      	str	r3, [r7, #12]
}
 8003f0a:	bf00      	nop
 8003f0c:	bf00      	nop
 8003f0e:	e7fd      	b.n	8003f0c <prvTaskExitError+0x28>
	__asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	60bb      	str	r3, [r7, #8]
}
 8003f22:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f24:	bf00      	nop
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0fc      	beq.n	8003f26 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f2c:	bf00      	nop
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	2000000c 	.word	0x2000000c

08003f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f40:	4b07      	ldr	r3, [pc, #28]	@ (8003f60 <pxCurrentTCBConst2>)
 8003f42:	6819      	ldr	r1, [r3, #0]
 8003f44:	6808      	ldr	r0, [r1, #0]
 8003f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f4a:	f380 8809 	msr	PSP, r0
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f04f 0000 	mov.w	r0, #0
 8003f56:	f380 8811 	msr	BASEPRI, r0
 8003f5a:	4770      	bx	lr
 8003f5c:	f3af 8000 	nop.w

08003f60 <pxCurrentTCBConst2>:
 8003f60:	20000380 	.word	0x20000380
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop

08003f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003f68:	4808      	ldr	r0, [pc, #32]	@ (8003f8c <prvPortStartFirstTask+0x24>)
 8003f6a:	6800      	ldr	r0, [r0, #0]
 8003f6c:	6800      	ldr	r0, [r0, #0]
 8003f6e:	f380 8808 	msr	MSP, r0
 8003f72:	f04f 0000 	mov.w	r0, #0
 8003f76:	f380 8814 	msr	CONTROL, r0
 8003f7a:	b662      	cpsie	i
 8003f7c:	b661      	cpsie	f
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	df00      	svc	0
 8003f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f8a:	bf00      	nop
 8003f8c:	e000ed08 	.word	0xe000ed08

08003f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f96:	4b47      	ldr	r3, [pc, #284]	@ (80040b4 <xPortStartScheduler+0x124>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a47      	ldr	r2, [pc, #284]	@ (80040b8 <xPortStartScheduler+0x128>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d10b      	bne.n	8003fb8 <xPortStartScheduler+0x28>
	__asm volatile
 8003fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	60fb      	str	r3, [r7, #12]
}
 8003fb2:	bf00      	nop
 8003fb4:	bf00      	nop
 8003fb6:	e7fd      	b.n	8003fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fb8:	4b3e      	ldr	r3, [pc, #248]	@ (80040b4 <xPortStartScheduler+0x124>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a3f      	ldr	r2, [pc, #252]	@ (80040bc <xPortStartScheduler+0x12c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d10b      	bne.n	8003fda <xPortStartScheduler+0x4a>
	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	613b      	str	r3, [r7, #16]
}
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop
 8003fd8:	e7fd      	b.n	8003fd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003fda:	4b39      	ldr	r3, [pc, #228]	@ (80040c0 <xPortStartScheduler+0x130>)
 8003fdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	22ff      	movs	r2, #255	@ 0xff
 8003fea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	4b31      	ldr	r3, [pc, #196]	@ (80040c4 <xPortStartScheduler+0x134>)
 8004000:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004002:	4b31      	ldr	r3, [pc, #196]	@ (80040c8 <xPortStartScheduler+0x138>)
 8004004:	2207      	movs	r2, #7
 8004006:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004008:	e009      	b.n	800401e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800400a:	4b2f      	ldr	r3, [pc, #188]	@ (80040c8 <xPortStartScheduler+0x138>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3b01      	subs	r3, #1
 8004010:	4a2d      	ldr	r2, [pc, #180]	@ (80040c8 <xPortStartScheduler+0x138>)
 8004012:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	b2db      	uxtb	r3, r3
 800401c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800401e:	78fb      	ldrb	r3, [r7, #3]
 8004020:	b2db      	uxtb	r3, r3
 8004022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004026:	2b80      	cmp	r3, #128	@ 0x80
 8004028:	d0ef      	beq.n	800400a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800402a:	4b27      	ldr	r3, [pc, #156]	@ (80040c8 <xPortStartScheduler+0x138>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f1c3 0307 	rsb	r3, r3, #7
 8004032:	2b04      	cmp	r3, #4
 8004034:	d00b      	beq.n	800404e <xPortStartScheduler+0xbe>
	__asm volatile
 8004036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	60bb      	str	r3, [r7, #8]
}
 8004048:	bf00      	nop
 800404a:	bf00      	nop
 800404c:	e7fd      	b.n	800404a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800404e:	4b1e      	ldr	r3, [pc, #120]	@ (80040c8 <xPortStartScheduler+0x138>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	021b      	lsls	r3, r3, #8
 8004054:	4a1c      	ldr	r2, [pc, #112]	@ (80040c8 <xPortStartScheduler+0x138>)
 8004056:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004058:	4b1b      	ldr	r3, [pc, #108]	@ (80040c8 <xPortStartScheduler+0x138>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004060:	4a19      	ldr	r2, [pc, #100]	@ (80040c8 <xPortStartScheduler+0x138>)
 8004062:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	b2da      	uxtb	r2, r3
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800406c:	4b17      	ldr	r3, [pc, #92]	@ (80040cc <xPortStartScheduler+0x13c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a16      	ldr	r2, [pc, #88]	@ (80040cc <xPortStartScheduler+0x13c>)
 8004072:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004076:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004078:	4b14      	ldr	r3, [pc, #80]	@ (80040cc <xPortStartScheduler+0x13c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a13      	ldr	r2, [pc, #76]	@ (80040cc <xPortStartScheduler+0x13c>)
 800407e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004082:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004084:	f000 f8da 	bl	800423c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004088:	4b11      	ldr	r3, [pc, #68]	@ (80040d0 <xPortStartScheduler+0x140>)
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800408e:	f000 f8f9 	bl	8004284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004092:	4b10      	ldr	r3, [pc, #64]	@ (80040d4 <xPortStartScheduler+0x144>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a0f      	ldr	r2, [pc, #60]	@ (80040d4 <xPortStartScheduler+0x144>)
 8004098:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800409c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800409e:	f7ff ff63 	bl	8003f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80040a2:	f7ff fb8f 	bl	80037c4 <vTaskSwitchContext>
	prvTaskExitError();
 80040a6:	f7ff ff1d 	bl	8003ee4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	e000ed00 	.word	0xe000ed00
 80040b8:	410fc271 	.word	0x410fc271
 80040bc:	410fc270 	.word	0x410fc270
 80040c0:	e000e400 	.word	0xe000e400
 80040c4:	200004ac 	.word	0x200004ac
 80040c8:	200004b0 	.word	0x200004b0
 80040cc:	e000ed20 	.word	0xe000ed20
 80040d0:	2000000c 	.word	0x2000000c
 80040d4:	e000ef34 	.word	0xe000ef34

080040d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	607b      	str	r3, [r7, #4]
}
 80040f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80040f2:	4b10      	ldr	r3, [pc, #64]	@ (8004134 <vPortEnterCritical+0x5c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3301      	adds	r3, #1
 80040f8:	4a0e      	ldr	r2, [pc, #56]	@ (8004134 <vPortEnterCritical+0x5c>)
 80040fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80040fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004134 <vPortEnterCritical+0x5c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d110      	bne.n	8004126 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004104:	4b0c      	ldr	r3, [pc, #48]	@ (8004138 <vPortEnterCritical+0x60>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00b      	beq.n	8004126 <vPortEnterCritical+0x4e>
	__asm volatile
 800410e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	603b      	str	r3, [r7, #0]
}
 8004120:	bf00      	nop
 8004122:	bf00      	nop
 8004124:	e7fd      	b.n	8004122 <vPortEnterCritical+0x4a>
	}
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	2000000c 	.word	0x2000000c
 8004138:	e000ed04 	.word	0xe000ed04

0800413c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004142:	4b12      	ldr	r3, [pc, #72]	@ (800418c <vPortExitCritical+0x50>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10b      	bne.n	8004162 <vPortExitCritical+0x26>
	__asm volatile
 800414a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	607b      	str	r3, [r7, #4]
}
 800415c:	bf00      	nop
 800415e:	bf00      	nop
 8004160:	e7fd      	b.n	800415e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004162:	4b0a      	ldr	r3, [pc, #40]	@ (800418c <vPortExitCritical+0x50>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3b01      	subs	r3, #1
 8004168:	4a08      	ldr	r2, [pc, #32]	@ (800418c <vPortExitCritical+0x50>)
 800416a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800416c:	4b07      	ldr	r3, [pc, #28]	@ (800418c <vPortExitCritical+0x50>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d105      	bne.n	8004180 <vPortExitCritical+0x44>
 8004174:	2300      	movs	r3, #0
 8004176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	f383 8811 	msr	BASEPRI, r3
}
 800417e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	2000000c 	.word	0x2000000c

08004190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004190:	f3ef 8009 	mrs	r0, PSP
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	4b15      	ldr	r3, [pc, #84]	@ (80041f0 <pxCurrentTCBConst>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	f01e 0f10 	tst.w	lr, #16
 80041a0:	bf08      	it	eq
 80041a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80041a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041aa:	6010      	str	r0, [r2, #0]
 80041ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80041b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80041b4:	f380 8811 	msr	BASEPRI, r0
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f7ff fb00 	bl	80037c4 <vTaskSwitchContext>
 80041c4:	f04f 0000 	mov.w	r0, #0
 80041c8:	f380 8811 	msr	BASEPRI, r0
 80041cc:	bc09      	pop	{r0, r3}
 80041ce:	6819      	ldr	r1, [r3, #0]
 80041d0:	6808      	ldr	r0, [r1, #0]
 80041d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d6:	f01e 0f10 	tst.w	lr, #16
 80041da:	bf08      	it	eq
 80041dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80041e0:	f380 8809 	msr	PSP, r0
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	f3af 8000 	nop.w

080041f0 <pxCurrentTCBConst>:
 80041f0:	20000380 	.word	0x20000380
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop

080041f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
	__asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	607b      	str	r3, [r7, #4]
}
 8004210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004212:	f7ff fa1d 	bl	8003650 <xTaskIncrementTick>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800421c:	4b06      	ldr	r3, [pc, #24]	@ (8004238 <SysTick_Handler+0x40>)
 800421e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	2300      	movs	r3, #0
 8004226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	f383 8811 	msr	BASEPRI, r3
}
 800422e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004230:	bf00      	nop
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	e000ed04 	.word	0xe000ed04

0800423c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004240:	4b0b      	ldr	r3, [pc, #44]	@ (8004270 <vPortSetupTimerInterrupt+0x34>)
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004246:	4b0b      	ldr	r3, [pc, #44]	@ (8004274 <vPortSetupTimerInterrupt+0x38>)
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800424c:	4b0a      	ldr	r3, [pc, #40]	@ (8004278 <vPortSetupTimerInterrupt+0x3c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a0a      	ldr	r2, [pc, #40]	@ (800427c <vPortSetupTimerInterrupt+0x40>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	099b      	lsrs	r3, r3, #6
 8004258:	4a09      	ldr	r2, [pc, #36]	@ (8004280 <vPortSetupTimerInterrupt+0x44>)
 800425a:	3b01      	subs	r3, #1
 800425c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800425e:	4b04      	ldr	r3, [pc, #16]	@ (8004270 <vPortSetupTimerInterrupt+0x34>)
 8004260:	2207      	movs	r2, #7
 8004262:	601a      	str	r2, [r3, #0]
}
 8004264:	bf00      	nop
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	e000e010 	.word	0xe000e010
 8004274:	e000e018 	.word	0xe000e018
 8004278:	20000000 	.word	0x20000000
 800427c:	10624dd3 	.word	0x10624dd3
 8004280:	e000e014 	.word	0xe000e014

08004284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004284:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004294 <vPortEnableVFP+0x10>
 8004288:	6801      	ldr	r1, [r0, #0]
 800428a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800428e:	6001      	str	r1, [r0, #0]
 8004290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004292:	bf00      	nop
 8004294:	e000ed88 	.word	0xe000ed88

08004298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800429e:	f3ef 8305 	mrs	r3, IPSR
 80042a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b0f      	cmp	r3, #15
 80042a8:	d915      	bls.n	80042d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80042aa:	4a18      	ldr	r2, [pc, #96]	@ (800430c <vPortValidateInterruptPriority+0x74>)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80042b4:	4b16      	ldr	r3, [pc, #88]	@ (8004310 <vPortValidateInterruptPriority+0x78>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	7afa      	ldrb	r2, [r7, #11]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d20b      	bcs.n	80042d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	607b      	str	r3, [r7, #4]
}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
 80042d4:	e7fd      	b.n	80042d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80042d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004314 <vPortValidateInterruptPriority+0x7c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80042de:	4b0e      	ldr	r3, [pc, #56]	@ (8004318 <vPortValidateInterruptPriority+0x80>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d90b      	bls.n	80042fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80042e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	603b      	str	r3, [r7, #0]
}
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop
 80042fc:	e7fd      	b.n	80042fa <vPortValidateInterruptPriority+0x62>
	}
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	e000e3f0 	.word	0xe000e3f0
 8004310:	200004ac 	.word	0x200004ac
 8004314:	e000ed0c 	.word	0xe000ed0c
 8004318:	200004b0 	.word	0x200004b0

0800431c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	@ 0x28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004328:	f7ff f8e6 	bl	80034f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800432c:	4b5c      	ldr	r3, [pc, #368]	@ (80044a0 <pvPortMalloc+0x184>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004334:	f000 f924 	bl	8004580 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004338:	4b5a      	ldr	r3, [pc, #360]	@ (80044a4 <pvPortMalloc+0x188>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4013      	ands	r3, r2
 8004340:	2b00      	cmp	r3, #0
 8004342:	f040 8095 	bne.w	8004470 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d01e      	beq.n	800438a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800434c:	2208      	movs	r2, #8
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4413      	add	r3, r2
 8004352:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	2b00      	cmp	r3, #0
 800435c:	d015      	beq.n	800438a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f023 0307 	bic.w	r3, r3, #7
 8004364:	3308      	adds	r3, #8
 8004366:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00b      	beq.n	800438a <pvPortMalloc+0x6e>
	__asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	617b      	str	r3, [r7, #20]
}
 8004384:	bf00      	nop
 8004386:	bf00      	nop
 8004388:	e7fd      	b.n	8004386 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d06f      	beq.n	8004470 <pvPortMalloc+0x154>
 8004390:	4b45      	ldr	r3, [pc, #276]	@ (80044a8 <pvPortMalloc+0x18c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	429a      	cmp	r2, r3
 8004398:	d86a      	bhi.n	8004470 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800439a:	4b44      	ldr	r3, [pc, #272]	@ (80044ac <pvPortMalloc+0x190>)
 800439c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800439e:	4b43      	ldr	r3, [pc, #268]	@ (80044ac <pvPortMalloc+0x190>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043a4:	e004      	b.n	80043b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d903      	bls.n	80043c2 <pvPortMalloc+0xa6>
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f1      	bne.n	80043a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80043c2:	4b37      	ldr	r3, [pc, #220]	@ (80044a0 <pvPortMalloc+0x184>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d051      	beq.n	8004470 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2208      	movs	r2, #8
 80043d2:	4413      	add	r3, r2
 80043d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	1ad2      	subs	r2, r2, r3
 80043e6:	2308      	movs	r3, #8
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d920      	bls.n	8004430 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4413      	add	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00b      	beq.n	8004418 <pvPortMalloc+0xfc>
	__asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	613b      	str	r3, [r7, #16]
}
 8004412:	bf00      	nop
 8004414:	bf00      	nop
 8004416:	e7fd      	b.n	8004414 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	1ad2      	subs	r2, r2, r3
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800442a:	69b8      	ldr	r0, [r7, #24]
 800442c:	f000 f90a 	bl	8004644 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004430:	4b1d      	ldr	r3, [pc, #116]	@ (80044a8 <pvPortMalloc+0x18c>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	4a1b      	ldr	r2, [pc, #108]	@ (80044a8 <pvPortMalloc+0x18c>)
 800443c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800443e:	4b1a      	ldr	r3, [pc, #104]	@ (80044a8 <pvPortMalloc+0x18c>)
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	4b1b      	ldr	r3, [pc, #108]	@ (80044b0 <pvPortMalloc+0x194>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d203      	bcs.n	8004452 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800444a:	4b17      	ldr	r3, [pc, #92]	@ (80044a8 <pvPortMalloc+0x18c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a18      	ldr	r2, [pc, #96]	@ (80044b0 <pvPortMalloc+0x194>)
 8004450:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	4b13      	ldr	r3, [pc, #76]	@ (80044a4 <pvPortMalloc+0x188>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	431a      	orrs	r2, r3
 800445c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004466:	4b13      	ldr	r3, [pc, #76]	@ (80044b4 <pvPortMalloc+0x198>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3301      	adds	r3, #1
 800446c:	4a11      	ldr	r2, [pc, #68]	@ (80044b4 <pvPortMalloc+0x198>)
 800446e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004470:	f7ff f850 	bl	8003514 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00b      	beq.n	8004496 <pvPortMalloc+0x17a>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	60fb      	str	r3, [r7, #12]
}
 8004490:	bf00      	nop
 8004492:	bf00      	nop
 8004494:	e7fd      	b.n	8004492 <pvPortMalloc+0x176>
	return pvReturn;
 8004496:	69fb      	ldr	r3, [r7, #28]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3728      	adds	r7, #40	@ 0x28
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	200014bc 	.word	0x200014bc
 80044a4:	200014d0 	.word	0x200014d0
 80044a8:	200014c0 	.word	0x200014c0
 80044ac:	200014b4 	.word	0x200014b4
 80044b0:	200014c4 	.word	0x200014c4
 80044b4:	200014c8 	.word	0x200014c8

080044b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d04f      	beq.n	800456a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80044ca:	2308      	movs	r3, #8
 80044cc:	425b      	negs	r3, r3
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4413      	add	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	4b25      	ldr	r3, [pc, #148]	@ (8004574 <vPortFree+0xbc>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10b      	bne.n	80044fe <vPortFree+0x46>
	__asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	60fb      	str	r3, [r7, #12]
}
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop
 80044fc:	e7fd      	b.n	80044fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00b      	beq.n	800451e <vPortFree+0x66>
	__asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	60bb      	str	r3, [r7, #8]
}
 8004518:	bf00      	nop
 800451a:	bf00      	nop
 800451c:	e7fd      	b.n	800451a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	4b14      	ldr	r3, [pc, #80]	@ (8004574 <vPortFree+0xbc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4013      	ands	r3, r2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d01e      	beq.n	800456a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d11a      	bne.n	800456a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	4b0e      	ldr	r3, [pc, #56]	@ (8004574 <vPortFree+0xbc>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	43db      	mvns	r3, r3
 800453e:	401a      	ands	r2, r3
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004544:	f7fe ffd8 	bl	80034f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	4b0a      	ldr	r3, [pc, #40]	@ (8004578 <vPortFree+0xc0>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4413      	add	r3, r2
 8004552:	4a09      	ldr	r2, [pc, #36]	@ (8004578 <vPortFree+0xc0>)
 8004554:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004556:	6938      	ldr	r0, [r7, #16]
 8004558:	f000 f874 	bl	8004644 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800455c:	4b07      	ldr	r3, [pc, #28]	@ (800457c <vPortFree+0xc4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3301      	adds	r3, #1
 8004562:	4a06      	ldr	r2, [pc, #24]	@ (800457c <vPortFree+0xc4>)
 8004564:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004566:	f7fe ffd5 	bl	8003514 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800456a:	bf00      	nop
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	200014d0 	.word	0x200014d0
 8004578:	200014c0 	.word	0x200014c0
 800457c:	200014cc 	.word	0x200014cc

08004580 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004586:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800458a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800458c:	4b27      	ldr	r3, [pc, #156]	@ (800462c <prvHeapInit+0xac>)
 800458e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00c      	beq.n	80045b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3307      	adds	r3, #7
 800459e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0307 	bic.w	r3, r3, #7
 80045a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	4a1f      	ldr	r2, [pc, #124]	@ (800462c <prvHeapInit+0xac>)
 80045b0:	4413      	add	r3, r2
 80045b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004630 <prvHeapInit+0xb0>)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80045be:	4b1c      	ldr	r3, [pc, #112]	@ (8004630 <prvHeapInit+0xb0>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	4413      	add	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80045cc:	2208      	movs	r2, #8
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0307 	bic.w	r3, r3, #7
 80045da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4a15      	ldr	r2, [pc, #84]	@ (8004634 <prvHeapInit+0xb4>)
 80045e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80045e2:	4b14      	ldr	r3, [pc, #80]	@ (8004634 <prvHeapInit+0xb4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2200      	movs	r2, #0
 80045e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80045ea:	4b12      	ldr	r3, [pc, #72]	@ (8004634 <prvHeapInit+0xb4>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	1ad2      	subs	r2, r2, r3
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004600:	4b0c      	ldr	r3, [pc, #48]	@ (8004634 <prvHeapInit+0xb4>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	4a0a      	ldr	r2, [pc, #40]	@ (8004638 <prvHeapInit+0xb8>)
 800460e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	4a09      	ldr	r2, [pc, #36]	@ (800463c <prvHeapInit+0xbc>)
 8004616:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004618:	4b09      	ldr	r3, [pc, #36]	@ (8004640 <prvHeapInit+0xc0>)
 800461a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800461e:	601a      	str	r2, [r3, #0]
}
 8004620:	bf00      	nop
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	200004b4 	.word	0x200004b4
 8004630:	200014b4 	.word	0x200014b4
 8004634:	200014bc 	.word	0x200014bc
 8004638:	200014c4 	.word	0x200014c4
 800463c:	200014c0 	.word	0x200014c0
 8004640:	200014d0 	.word	0x200014d0

08004644 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800464c:	4b28      	ldr	r3, [pc, #160]	@ (80046f0 <prvInsertBlockIntoFreeList+0xac>)
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	e002      	b.n	8004658 <prvInsertBlockIntoFreeList+0x14>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	429a      	cmp	r2, r3
 8004660:	d8f7      	bhi.n	8004652 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	4413      	add	r3, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	429a      	cmp	r2, r3
 8004672:	d108      	bne.n	8004686 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	441a      	add	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	441a      	add	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d118      	bne.n	80046cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	4b15      	ldr	r3, [pc, #84]	@ (80046f4 <prvInsertBlockIntoFreeList+0xb0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d00d      	beq.n	80046c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	441a      	add	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	e008      	b.n	80046d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046c2:	4b0c      	ldr	r3, [pc, #48]	@ (80046f4 <prvInsertBlockIntoFreeList+0xb0>)
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	e003      	b.n	80046d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d002      	beq.n	80046e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046e2:	bf00      	nop
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	200014b4 	.word	0x200014b4
 80046f4:	200014bc 	.word	0x200014bc

080046f8 <memset>:
 80046f8:	4402      	add	r2, r0
 80046fa:	4603      	mov	r3, r0
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d100      	bne.n	8004702 <memset+0xa>
 8004700:	4770      	bx	lr
 8004702:	f803 1b01 	strb.w	r1, [r3], #1
 8004706:	e7f9      	b.n	80046fc <memset+0x4>

08004708 <_reclaim_reent>:
 8004708:	4b2d      	ldr	r3, [pc, #180]	@ (80047c0 <_reclaim_reent+0xb8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4283      	cmp	r3, r0
 800470e:	b570      	push	{r4, r5, r6, lr}
 8004710:	4604      	mov	r4, r0
 8004712:	d053      	beq.n	80047bc <_reclaim_reent+0xb4>
 8004714:	69c3      	ldr	r3, [r0, #28]
 8004716:	b31b      	cbz	r3, 8004760 <_reclaim_reent+0x58>
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	b163      	cbz	r3, 8004736 <_reclaim_reent+0x2e>
 800471c:	2500      	movs	r5, #0
 800471e:	69e3      	ldr	r3, [r4, #28]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	5959      	ldr	r1, [r3, r5]
 8004724:	b9b1      	cbnz	r1, 8004754 <_reclaim_reent+0x4c>
 8004726:	3504      	adds	r5, #4
 8004728:	2d80      	cmp	r5, #128	@ 0x80
 800472a:	d1f8      	bne.n	800471e <_reclaim_reent+0x16>
 800472c:	69e3      	ldr	r3, [r4, #28]
 800472e:	4620      	mov	r0, r4
 8004730:	68d9      	ldr	r1, [r3, #12]
 8004732:	f000 f87b 	bl	800482c <_free_r>
 8004736:	69e3      	ldr	r3, [r4, #28]
 8004738:	6819      	ldr	r1, [r3, #0]
 800473a:	b111      	cbz	r1, 8004742 <_reclaim_reent+0x3a>
 800473c:	4620      	mov	r0, r4
 800473e:	f000 f875 	bl	800482c <_free_r>
 8004742:	69e3      	ldr	r3, [r4, #28]
 8004744:	689d      	ldr	r5, [r3, #8]
 8004746:	b15d      	cbz	r5, 8004760 <_reclaim_reent+0x58>
 8004748:	4629      	mov	r1, r5
 800474a:	4620      	mov	r0, r4
 800474c:	682d      	ldr	r5, [r5, #0]
 800474e:	f000 f86d 	bl	800482c <_free_r>
 8004752:	e7f8      	b.n	8004746 <_reclaim_reent+0x3e>
 8004754:	680e      	ldr	r6, [r1, #0]
 8004756:	4620      	mov	r0, r4
 8004758:	f000 f868 	bl	800482c <_free_r>
 800475c:	4631      	mov	r1, r6
 800475e:	e7e1      	b.n	8004724 <_reclaim_reent+0x1c>
 8004760:	6961      	ldr	r1, [r4, #20]
 8004762:	b111      	cbz	r1, 800476a <_reclaim_reent+0x62>
 8004764:	4620      	mov	r0, r4
 8004766:	f000 f861 	bl	800482c <_free_r>
 800476a:	69e1      	ldr	r1, [r4, #28]
 800476c:	b111      	cbz	r1, 8004774 <_reclaim_reent+0x6c>
 800476e:	4620      	mov	r0, r4
 8004770:	f000 f85c 	bl	800482c <_free_r>
 8004774:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004776:	b111      	cbz	r1, 800477e <_reclaim_reent+0x76>
 8004778:	4620      	mov	r0, r4
 800477a:	f000 f857 	bl	800482c <_free_r>
 800477e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004780:	b111      	cbz	r1, 8004788 <_reclaim_reent+0x80>
 8004782:	4620      	mov	r0, r4
 8004784:	f000 f852 	bl	800482c <_free_r>
 8004788:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800478a:	b111      	cbz	r1, 8004792 <_reclaim_reent+0x8a>
 800478c:	4620      	mov	r0, r4
 800478e:	f000 f84d 	bl	800482c <_free_r>
 8004792:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004794:	b111      	cbz	r1, 800479c <_reclaim_reent+0x94>
 8004796:	4620      	mov	r0, r4
 8004798:	f000 f848 	bl	800482c <_free_r>
 800479c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800479e:	b111      	cbz	r1, 80047a6 <_reclaim_reent+0x9e>
 80047a0:	4620      	mov	r0, r4
 80047a2:	f000 f843 	bl	800482c <_free_r>
 80047a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80047a8:	b111      	cbz	r1, 80047b0 <_reclaim_reent+0xa8>
 80047aa:	4620      	mov	r0, r4
 80047ac:	f000 f83e 	bl	800482c <_free_r>
 80047b0:	6a23      	ldr	r3, [r4, #32]
 80047b2:	b11b      	cbz	r3, 80047bc <_reclaim_reent+0xb4>
 80047b4:	4620      	mov	r0, r4
 80047b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80047ba:	4718      	bx	r3
 80047bc:	bd70      	pop	{r4, r5, r6, pc}
 80047be:	bf00      	nop
 80047c0:	20000010 	.word	0x20000010

080047c4 <__libc_init_array>:
 80047c4:	b570      	push	{r4, r5, r6, lr}
 80047c6:	4d0d      	ldr	r5, [pc, #52]	@ (80047fc <__libc_init_array+0x38>)
 80047c8:	4c0d      	ldr	r4, [pc, #52]	@ (8004800 <__libc_init_array+0x3c>)
 80047ca:	1b64      	subs	r4, r4, r5
 80047cc:	10a4      	asrs	r4, r4, #2
 80047ce:	2600      	movs	r6, #0
 80047d0:	42a6      	cmp	r6, r4
 80047d2:	d109      	bne.n	80047e8 <__libc_init_array+0x24>
 80047d4:	4d0b      	ldr	r5, [pc, #44]	@ (8004804 <__libc_init_array+0x40>)
 80047d6:	4c0c      	ldr	r4, [pc, #48]	@ (8004808 <__libc_init_array+0x44>)
 80047d8:	f000 f87e 	bl	80048d8 <_init>
 80047dc:	1b64      	subs	r4, r4, r5
 80047de:	10a4      	asrs	r4, r4, #2
 80047e0:	2600      	movs	r6, #0
 80047e2:	42a6      	cmp	r6, r4
 80047e4:	d105      	bne.n	80047f2 <__libc_init_array+0x2e>
 80047e6:	bd70      	pop	{r4, r5, r6, pc}
 80047e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ec:	4798      	blx	r3
 80047ee:	3601      	adds	r6, #1
 80047f0:	e7ee      	b.n	80047d0 <__libc_init_array+0xc>
 80047f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047f6:	4798      	blx	r3
 80047f8:	3601      	adds	r6, #1
 80047fa:	e7f2      	b.n	80047e2 <__libc_init_array+0x1e>
 80047fc:	08004978 	.word	0x08004978
 8004800:	08004978 	.word	0x08004978
 8004804:	08004978 	.word	0x08004978
 8004808:	0800497c 	.word	0x0800497c

0800480c <__retarget_lock_acquire_recursive>:
 800480c:	4770      	bx	lr

0800480e <__retarget_lock_release_recursive>:
 800480e:	4770      	bx	lr

08004810 <memcpy>:
 8004810:	440a      	add	r2, r1
 8004812:	4291      	cmp	r1, r2
 8004814:	f100 33ff 	add.w	r3, r0, #4294967295
 8004818:	d100      	bne.n	800481c <memcpy+0xc>
 800481a:	4770      	bx	lr
 800481c:	b510      	push	{r4, lr}
 800481e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004822:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004826:	4291      	cmp	r1, r2
 8004828:	d1f9      	bne.n	800481e <memcpy+0xe>
 800482a:	bd10      	pop	{r4, pc}

0800482c <_free_r>:
 800482c:	b538      	push	{r3, r4, r5, lr}
 800482e:	4605      	mov	r5, r0
 8004830:	2900      	cmp	r1, #0
 8004832:	d041      	beq.n	80048b8 <_free_r+0x8c>
 8004834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004838:	1f0c      	subs	r4, r1, #4
 800483a:	2b00      	cmp	r3, #0
 800483c:	bfb8      	it	lt
 800483e:	18e4      	addlt	r4, r4, r3
 8004840:	f000 f83e 	bl	80048c0 <__malloc_lock>
 8004844:	4a1d      	ldr	r2, [pc, #116]	@ (80048bc <_free_r+0x90>)
 8004846:	6813      	ldr	r3, [r2, #0]
 8004848:	b933      	cbnz	r3, 8004858 <_free_r+0x2c>
 800484a:	6063      	str	r3, [r4, #4]
 800484c:	6014      	str	r4, [r2, #0]
 800484e:	4628      	mov	r0, r5
 8004850:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004854:	f000 b83a 	b.w	80048cc <__malloc_unlock>
 8004858:	42a3      	cmp	r3, r4
 800485a:	d908      	bls.n	800486e <_free_r+0x42>
 800485c:	6820      	ldr	r0, [r4, #0]
 800485e:	1821      	adds	r1, r4, r0
 8004860:	428b      	cmp	r3, r1
 8004862:	bf01      	itttt	eq
 8004864:	6819      	ldreq	r1, [r3, #0]
 8004866:	685b      	ldreq	r3, [r3, #4]
 8004868:	1809      	addeq	r1, r1, r0
 800486a:	6021      	streq	r1, [r4, #0]
 800486c:	e7ed      	b.n	800484a <_free_r+0x1e>
 800486e:	461a      	mov	r2, r3
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	b10b      	cbz	r3, 8004878 <_free_r+0x4c>
 8004874:	42a3      	cmp	r3, r4
 8004876:	d9fa      	bls.n	800486e <_free_r+0x42>
 8004878:	6811      	ldr	r1, [r2, #0]
 800487a:	1850      	adds	r0, r2, r1
 800487c:	42a0      	cmp	r0, r4
 800487e:	d10b      	bne.n	8004898 <_free_r+0x6c>
 8004880:	6820      	ldr	r0, [r4, #0]
 8004882:	4401      	add	r1, r0
 8004884:	1850      	adds	r0, r2, r1
 8004886:	4283      	cmp	r3, r0
 8004888:	6011      	str	r1, [r2, #0]
 800488a:	d1e0      	bne.n	800484e <_free_r+0x22>
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	6053      	str	r3, [r2, #4]
 8004892:	4408      	add	r0, r1
 8004894:	6010      	str	r0, [r2, #0]
 8004896:	e7da      	b.n	800484e <_free_r+0x22>
 8004898:	d902      	bls.n	80048a0 <_free_r+0x74>
 800489a:	230c      	movs	r3, #12
 800489c:	602b      	str	r3, [r5, #0]
 800489e:	e7d6      	b.n	800484e <_free_r+0x22>
 80048a0:	6820      	ldr	r0, [r4, #0]
 80048a2:	1821      	adds	r1, r4, r0
 80048a4:	428b      	cmp	r3, r1
 80048a6:	bf04      	itt	eq
 80048a8:	6819      	ldreq	r1, [r3, #0]
 80048aa:	685b      	ldreq	r3, [r3, #4]
 80048ac:	6063      	str	r3, [r4, #4]
 80048ae:	bf04      	itt	eq
 80048b0:	1809      	addeq	r1, r1, r0
 80048b2:	6021      	streq	r1, [r4, #0]
 80048b4:	6054      	str	r4, [r2, #4]
 80048b6:	e7ca      	b.n	800484e <_free_r+0x22>
 80048b8:	bd38      	pop	{r3, r4, r5, pc}
 80048ba:	bf00      	nop
 80048bc:	20001610 	.word	0x20001610

080048c0 <__malloc_lock>:
 80048c0:	4801      	ldr	r0, [pc, #4]	@ (80048c8 <__malloc_lock+0x8>)
 80048c2:	f7ff bfa3 	b.w	800480c <__retarget_lock_acquire_recursive>
 80048c6:	bf00      	nop
 80048c8:	2000160c 	.word	0x2000160c

080048cc <__malloc_unlock>:
 80048cc:	4801      	ldr	r0, [pc, #4]	@ (80048d4 <__malloc_unlock+0x8>)
 80048ce:	f7ff bf9e 	b.w	800480e <__retarget_lock_release_recursive>
 80048d2:	bf00      	nop
 80048d4:	2000160c 	.word	0x2000160c

080048d8 <_init>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	bf00      	nop
 80048dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048de:	bc08      	pop	{r3}
 80048e0:	469e      	mov	lr, r3
 80048e2:	4770      	bx	lr

080048e4 <_fini>:
 80048e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e6:	bf00      	nop
 80048e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ea:	bc08      	pop	{r3}
 80048ec:	469e      	mov	lr, r3
 80048ee:	4770      	bx	lr
