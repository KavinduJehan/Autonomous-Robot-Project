
motor controller with uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a70  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08005c10  08005c10  00006c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cbc  08005cbc  00007064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005cbc  08005cbc  00006cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cc4  08005cc4  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cc4  08005cc4  00006cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cc8  08005cc8  00006cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005ccc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001608  20000064  08005d30  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000166c  08005d30  0000766c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119b9  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c1d  00000000  00000000  00018a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  0001b670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c49  00000000  00000000  0001c668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b9e  00000000  00000000  0001d2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116ff  00000000  00000000  00034e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000943b9  00000000  00000000  0004654e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da907  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044ec  00000000  00000000  000da94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000dee38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005bf8 	.word	0x08005bf8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08005bf8 	.word	0x08005bf8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	@ (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000080 	.word	0x20000080
 800053c:	20000120 	.word	0x20000120

08000540 <DWT_Delay_Init>:
/* USER CODE BEGIN 0 */

#if ULTRASONIC_ENABLED
/* DWT-based microsecond timing utilities */
static inline void DWT_Delay_Init(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
    /* Enable TRC */
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000544:	4b09      	ldr	r3, [pc, #36]	@ (800056c <DWT_Delay_Init+0x2c>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	4a08      	ldr	r2, [pc, #32]	@ (800056c <DWT_Delay_Init+0x2c>)
 800054a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800054e:	60d3      	str	r3, [r2, #12]
    /* Reset the cycle counter */
    DWT->CYCCNT = 0;
 8000550:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <DWT_Delay_Init+0x30>)
 8000552:	2200      	movs	r2, #0
 8000554:	605a      	str	r2, [r3, #4]
    /* Enable the cycle counter */
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000556:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <DWT_Delay_Init+0x30>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a05      	ldr	r2, [pc, #20]	@ (8000570 <DWT_Delay_Init+0x30>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6013      	str	r3, [r2, #0]
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	e000edf0 	.word	0xe000edf0
 8000570:	e0001000 	.word	0xe0001000

08000574 <delay_us>:
{
    return (uint32_t)(DWT->CYCCNT / (SystemCoreClock / 1000000U));
}

static inline void delay_us(uint32_t us)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 800057c:	4b0e      	ldr	r3, [pc, #56]	@ (80005b8 <delay_us+0x44>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (SystemCoreClock / 1000000U);
 8000582:	4b0e      	ldr	r3, [pc, #56]	@ (80005bc <delay_us+0x48>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a0e      	ldr	r2, [pc, #56]	@ (80005c0 <delay_us+0x4c>)
 8000588:	fba2 2303 	umull	r2, r3, r2, r3
 800058c:	0c9a      	lsrs	r2, r3, #18
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	fb02 f303 	mul.w	r3, r2, r3
 8000594:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks) { __NOP(); }
 8000596:	e000      	b.n	800059a <delay_us+0x26>
 8000598:	bf00      	nop
 800059a:	4b07      	ldr	r3, [pc, #28]	@ (80005b8 <delay_us+0x44>)
 800059c:	685a      	ldr	r2, [r3, #4]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	68ba      	ldr	r2, [r7, #8]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d8f7      	bhi.n	8000598 <delay_us+0x24>
}
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e0001000 	.word	0xe0001000
 80005bc:	20000004 	.word	0x20000004
 80005c0:	431bde83 	.word	0x431bde83

080005c4 <Ultrasonic_Measure_Pin>:

static uint16_t Ultrasonic_Measure_Pin(GPIO_TypeDef* trig_port, uint16_t trig_pin,
                                       GPIO_TypeDef* echo_port, uint16_t echo_pin)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08c      	sub	sp, #48	@ 0x30
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	607a      	str	r2, [r7, #4]
 80005ce:	461a      	mov	r2, r3
 80005d0:	460b      	mov	r3, r1
 80005d2:	817b      	strh	r3, [r7, #10]
 80005d4:	4613      	mov	r3, r2
 80005d6:	813b      	strh	r3, [r7, #8]
    /* Ensure trigger low */
    HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_RESET);
 80005d8:	897b      	ldrh	r3, [r7, #10]
 80005da:	2200      	movs	r2, #0
 80005dc:	4619      	mov	r1, r3
 80005de:	68f8      	ldr	r0, [r7, #12]
 80005e0:	f001 fcb8 	bl	8001f54 <HAL_GPIO_WritePin>
    delay_us(2);
 80005e4:	2002      	movs	r0, #2
 80005e6:	f7ff ffc5 	bl	8000574 <delay_us>

    /* 10us trigger pulse */
    HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_SET);
 80005ea:	897b      	ldrh	r3, [r7, #10]
 80005ec:	2201      	movs	r2, #1
 80005ee:	4619      	mov	r1, r3
 80005f0:	68f8      	ldr	r0, [r7, #12]
 80005f2:	f001 fcaf 	bl	8001f54 <HAL_GPIO_WritePin>
    delay_us(ULTRASONIC_TRIGGER_US);
 80005f6:	200a      	movs	r0, #10
 80005f8:	f7ff ffbc 	bl	8000574 <delay_us>
    HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_RESET);
 80005fc:	897b      	ldrh	r3, [r7, #10]
 80005fe:	2200      	movs	r2, #0
 8000600:	4619      	mov	r1, r3
 8000602:	68f8      	ldr	r0, [r7, #12]
 8000604:	f001 fca6 	bl	8001f54 <HAL_GPIO_WritePin>

    uint32_t timeout_ticks = (ULTRASONIC_TIMEOUT_US * (SystemCoreClock / 1000000U));
 8000608:	4b2c      	ldr	r3, [pc, #176]	@ (80006bc <Ultrasonic_Measure_Pin+0xf8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a2c      	ldr	r2, [pc, #176]	@ (80006c0 <Ultrasonic_Measure_Pin+0xfc>)
 800060e:	fba2 2303 	umull	r2, r3, r2, r3
 8000612:	0c9b      	lsrs	r3, r3, #18
 8000614:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000618:	fb02 f303 	mul.w	r3, r2, r3
 800061c:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t tstart, tend;

    /* Wait for echo rising edge */
    uint32_t start_wait = DWT->CYCCNT;
 800061e:	4b29      	ldr	r3, [pc, #164]	@ (80006c4 <Ultrasonic_Measure_Pin+0x100>)
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	627b      	str	r3, [r7, #36]	@ 0x24
    while (HAL_GPIO_ReadPin(echo_port, echo_pin) == GPIO_PIN_RESET)
 8000624:	e008      	b.n	8000638 <Ultrasonic_Measure_Pin+0x74>
    {
        if ((DWT->CYCCNT - start_wait) > timeout_ticks) return 0; // timeout
 8000626:	4b27      	ldr	r3, [pc, #156]	@ (80006c4 <Ultrasonic_Measure_Pin+0x100>)
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000630:	429a      	cmp	r2, r3
 8000632:	d201      	bcs.n	8000638 <Ultrasonic_Measure_Pin+0x74>
 8000634:	2300      	movs	r3, #0
 8000636:	e03c      	b.n	80006b2 <Ultrasonic_Measure_Pin+0xee>
    while (HAL_GPIO_ReadPin(echo_port, echo_pin) == GPIO_PIN_RESET)
 8000638:	893b      	ldrh	r3, [r7, #8]
 800063a:	4619      	mov	r1, r3
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f001 fc71 	bl	8001f24 <HAL_GPIO_ReadPin>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d0ee      	beq.n	8000626 <Ultrasonic_Measure_Pin+0x62>
    }
    tstart = DWT->CYCCNT;
 8000648:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <Ultrasonic_Measure_Pin+0x100>)
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	623b      	str	r3, [r7, #32]

    /* Wait for echo falling edge */
    while (HAL_GPIO_ReadPin(echo_port, echo_pin) == GPIO_PIN_SET)
 800064e:	e008      	b.n	8000662 <Ultrasonic_Measure_Pin+0x9e>
    {
        if ((DWT->CYCCNT - tstart) > timeout_ticks) return 0; // timeout
 8000650:	4b1c      	ldr	r3, [pc, #112]	@ (80006c4 <Ultrasonic_Measure_Pin+0x100>)
 8000652:	685a      	ldr	r2, [r3, #4]
 8000654:	6a3b      	ldr	r3, [r7, #32]
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800065a:	429a      	cmp	r2, r3
 800065c:	d201      	bcs.n	8000662 <Ultrasonic_Measure_Pin+0x9e>
 800065e:	2300      	movs	r3, #0
 8000660:	e027      	b.n	80006b2 <Ultrasonic_Measure_Pin+0xee>
    while (HAL_GPIO_ReadPin(echo_port, echo_pin) == GPIO_PIN_SET)
 8000662:	893b      	ldrh	r3, [r7, #8]
 8000664:	4619      	mov	r1, r3
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f001 fc5c 	bl	8001f24 <HAL_GPIO_ReadPin>
 800066c:	4603      	mov	r3, r0
 800066e:	2b01      	cmp	r3, #1
 8000670:	d0ee      	beq.n	8000650 <Ultrasonic_Measure_Pin+0x8c>
    }
    tend = DWT->CYCCNT;
 8000672:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <Ultrasonic_Measure_Pin+0x100>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	61fb      	str	r3, [r7, #28]

    uint32_t pulse_ticks = (tend - tstart);
 8000678:	69fa      	ldr	r2, [r7, #28]
 800067a:	6a3b      	ldr	r3, [r7, #32]
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	61bb      	str	r3, [r7, #24]
    uint32_t pulse_us = pulse_ticks / (SystemCoreClock / 1000000U);
 8000680:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <Ultrasonic_Measure_Pin+0xf8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a0e      	ldr	r2, [pc, #56]	@ (80006c0 <Ultrasonic_Measure_Pin+0xfc>)
 8000686:	fba2 2303 	umull	r2, r3, r2, r3
 800068a:	0c9b      	lsrs	r3, r3, #18
 800068c:	69ba      	ldr	r2, [r7, #24]
 800068e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000692:	617b      	str	r3, [r7, #20]

    /* Convert to centimeters: distance (cm) = pulse_us / 58 */
    uint32_t dist_cm = pulse_us / 58U;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	4a0c      	ldr	r2, [pc, #48]	@ (80006c8 <Ultrasonic_Measure_Pin+0x104>)
 8000698:	fba2 2303 	umull	r2, r3, r2, r3
 800069c:	095b      	lsrs	r3, r3, #5
 800069e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dist_cm > 400) dist_cm = 400; // clamp to sensor max
 80006a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006a2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80006a6:	d902      	bls.n	80006ae <Ultrasonic_Measure_Pin+0xea>
 80006a8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80006ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return (uint16_t)dist_cm;
 80006ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006b0:	b29b      	uxth	r3, r3
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3730      	adds	r7, #48	@ 0x30
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000004 	.word	0x20000004
 80006c0:	431bde83 	.word	0x431bde83
 80006c4:	e0001000 	.word	0xe0001000
 80006c8:	8d3dcb09 	.word	0x8d3dcb09

080006cc <Ultrasonic_Init>:

/* Public Ultrasonic API implementations */
void Ultrasonic_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
    DWT_Delay_Init();
 80006d0:	f7ff ff36 	bl	8000540 <DWT_Delay_Init>
    /* Triggers already configured in GPIO_Init; ensure low */
    HAL_GPIO_WritePin(US_GPIO_PORT, US_TRIG_A_PIN | US_TRIG_B_PIN, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2103      	movs	r1, #3
 80006d8:	4802      	ldr	r0, [pc, #8]	@ (80006e4 <Ultrasonic_Init+0x18>)
 80006da:	f001 fc3b 	bl	8001f54 <HAL_GPIO_WritePin>
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40020400 	.word	0x40020400

080006e8 <Ultrasonic_MeasureA>:

uint16_t Ultrasonic_MeasureA(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
    return Ultrasonic_Measure_Pin(US_GPIO_PORT, US_TRIG_A_PIN, US_GPIO_PORT, US_ECHO_A_PIN);
 80006ec:	2340      	movs	r3, #64	@ 0x40
 80006ee:	4a04      	ldr	r2, [pc, #16]	@ (8000700 <Ultrasonic_MeasureA+0x18>)
 80006f0:	2101      	movs	r1, #1
 80006f2:	4803      	ldr	r0, [pc, #12]	@ (8000700 <Ultrasonic_MeasureA+0x18>)
 80006f4:	f7ff ff66 	bl	80005c4 <Ultrasonic_Measure_Pin>
 80006f8:	4603      	mov	r3, r0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40020400 	.word	0x40020400

08000704 <Ultrasonic_MeasureB>:

uint16_t Ultrasonic_MeasureB(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
    return Ultrasonic_Measure_Pin(US_GPIO_PORT, US_TRIG_B_PIN, US_GPIO_PORT, US_ECHO_B_PIN);
 8000708:	2380      	movs	r3, #128	@ 0x80
 800070a:	4a04      	ldr	r2, [pc, #16]	@ (800071c <Ultrasonic_MeasureB+0x18>)
 800070c:	2102      	movs	r1, #2
 800070e:	4803      	ldr	r0, [pc, #12]	@ (800071c <Ultrasonic_MeasureB+0x18>)
 8000710:	f7ff ff58 	bl	80005c4 <Ultrasonic_Measure_Pin>
 8000714:	4603      	mov	r3, r0
}
 8000716:	4618      	mov	r0, r3
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40020400 	.word	0x40020400

08000720 <GPIO_Init>:
 * @brief  Initialize GPIO pins for motor control
 * @note   Configures PA0-PA3 as PWM output pins (TIM3 alternate function)
 * @retval None
 */
void GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
    
  /* Enable GPIOA, GPIOB and GPIOC clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	4b4f      	ldr	r3, [pc, #316]	@ (8000878 <GPIO_Init+0x158>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a4e      	ldr	r2, [pc, #312]	@ (8000878 <GPIO_Init+0x158>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b4c      	ldr	r3, [pc, #304]	@ (8000878 <GPIO_Init+0x158>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b48      	ldr	r3, [pc, #288]	@ (8000878 <GPIO_Init+0x158>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a47      	ldr	r2, [pc, #284]	@ (8000878 <GPIO_Init+0x158>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b45      	ldr	r3, [pc, #276]	@ (8000878 <GPIO_Init+0x158>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b41      	ldr	r3, [pc, #260]	@ (8000878 <GPIO_Init+0x158>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a40      	ldr	r2, [pc, #256]	@ (8000878 <GPIO_Init+0x158>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b3e      	ldr	r3, [pc, #248]	@ (8000878 <GPIO_Init+0x158>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
    
    /* Configure Motor Control Pins (PA0-PA3) as TIM5 PWM Output (AF2) */
    GPIO_InitStruct.Pin = MOTOR1_IN1_PIN | MOTOR1_IN2_PIN | MOTOR2_IN3_PIN | MOTOR2_IN4_PIN;
 800078a:	230f      	movs	r3, #15
 800078c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;          // Alternate Function Push-Pull
 800078e:	2302      	movs	r3, #2
 8000790:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000796:	2302      	movs	r3, #2
 8000798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;       // TIM5 Alternate Function
 800079a:	2302      	movs	r3, #2
 800079c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PORT, &GPIO_InitStruct);
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	4619      	mov	r1, r3
 80007a4:	4835      	ldr	r0, [pc, #212]	@ (800087c <GPIO_Init+0x15c>)
 80007a6:	f001 fa39 	bl	8001c1c <HAL_GPIO_Init>
    
    /* Configure LED Indicator Pins (PC13, PC14) as Output */
    GPIO_InitStruct.Pin = LED_RX_PIN | LED_TX_PIN;
 80007aa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80007ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	4619      	mov	r1, r3
 80007c2:	482f      	ldr	r0, [pc, #188]	@ (8000880 <GPIO_Init+0x160>)
 80007c4:	f001 fa2a 	bl	8001c1c <HAL_GPIO_Init>
    
    /* Initialize LED pins to OFF */
    HAL_GPIO_WritePin(LED_PORT, LED_RX_PIN, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ce:	482c      	ldr	r0, [pc, #176]	@ (8000880 <GPIO_Init+0x160>)
 80007d0:	f001 fbc0 	bl	8001f54 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_PORT, LED_TX_PIN, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007da:	4829      	ldr	r0, [pc, #164]	@ (8000880 <GPIO_Init+0x160>)
 80007dc:	f001 fbba 	bl	8001f54 <HAL_GPIO_WritePin>

  /* Configure Heartbeat LED (PB12) as Output */
  GPIO_InitStruct.Pin = HEARTBEAT_LED_PIN;
 80007e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HEARTBEAT_LED_PORT, &GPIO_InitStruct);
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	4619      	mov	r1, r3
 80007f8:	4822      	ldr	r0, [pc, #136]	@ (8000884 <GPIO_Init+0x164>)
 80007fa:	f001 fa0f 	bl	8001c1c <HAL_GPIO_Init>

  /* Initialize Heartbeat LED to OFF */
  HAL_GPIO_WritePin(HEARTBEAT_LED_PORT, HEARTBEAT_LED_PIN, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000804:	481f      	ldr	r0, [pc, #124]	@ (8000884 <GPIO_Init+0x164>)
 8000806:	f001 fba5 	bl	8001f54 <HAL_GPIO_WritePin>
    
    /* Configure UART Pins (PA9-TX, PA10-RX) */
    GPIO_InitStruct.Pin = UART_TX_PIN | UART_RX_PIN;
 800080a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800080e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000814:	2301      	movs	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000818:	2302      	movs	r3, #2
 800081a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = UART_AF;
 800081c:	2307      	movs	r3, #7
 800081e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(UART_PORT, &GPIO_InitStruct);
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	4619      	mov	r1, r3
 8000826:	4815      	ldr	r0, [pc, #84]	@ (800087c <GPIO_Init+0x15c>)
 8000828:	f001 f9f8 	bl	8001c1c <HAL_GPIO_Init>

#if ULTRASONIC_ENABLED
    /* Configure Ultrasonic Trigger pins (PB0, PB1) as Output */
    GPIO_InitStruct.Pin = US_TRIG_A_PIN | US_TRIG_B_PIN;
 800082c:	2303      	movs	r3, #3
 800082e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000838:	2302      	movs	r3, #2
 800083a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(US_GPIO_PORT, &GPIO_InitStruct);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4619      	mov	r1, r3
 8000842:	4810      	ldr	r0, [pc, #64]	@ (8000884 <GPIO_Init+0x164>)
 8000844:	f001 f9ea 	bl	8001c1c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(US_GPIO_PORT, US_TRIG_A_PIN | US_TRIG_B_PIN, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2103      	movs	r1, #3
 800084c:	480d      	ldr	r0, [pc, #52]	@ (8000884 <GPIO_Init+0x164>)
 800084e:	f001 fb81 	bl	8001f54 <HAL_GPIO_WritePin>

    /* Configure Ultrasonic Echo pins (PB6, PB7) as Input with pulldown */
    GPIO_InitStruct.Pin = US_ECHO_A_PIN | US_ECHO_B_PIN;
 8000852:	23c0      	movs	r3, #192	@ 0xc0
 8000854:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800085a:	2302      	movs	r3, #2
 800085c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(US_GPIO_PORT, &GPIO_InitStruct);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4619      	mov	r1, r3
 8000868:	4806      	ldr	r0, [pc, #24]	@ (8000884 <GPIO_Init+0x164>)
 800086a:	f001 f9d7 	bl	8001c1c <HAL_GPIO_Init>
#endif
}
 800086e:	bf00      	nop
 8000870:	3720      	adds	r7, #32
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40020000 	.word	0x40020000
 8000880:	40020800 	.word	0x40020800
 8000884:	40020400 	.word	0x40020400

08000888 <TIM5_PWM_Init>:
 *         TIM5_CH4 -> PA3 (Motor2_IN4)
 *         PWM Frequency: 1 kHz
 * @retval None
 */
void TIM5_PWM_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
    TIM_OC_InitTypeDef sConfigOC = {0};
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
 800089c:	615a      	str	r2, [r3, #20]
 800089e:	619a      	str	r2, [r3, #24]
    
    /* Enable TIM5 clock */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80008a0:	2300      	movs	r3, #0
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	4b37      	ldr	r3, [pc, #220]	@ (8000984 <TIM5_PWM_Init+0xfc>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a8:	4a36      	ldr	r2, [pc, #216]	@ (8000984 <TIM5_PWM_Init+0xfc>)
 80008aa:	f043 0308 	orr.w	r3, r3, #8
 80008ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b0:	4b34      	ldr	r3, [pc, #208]	@ (8000984 <TIM5_PWM_Init+0xfc>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b4:	f003 0308 	and.w	r3, r3, #8
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	683b      	ldr	r3, [r7, #0]
    
    /* Configure TIM5 Base */
    htim5.Instance = TIM5;
 80008bc:	4b32      	ldr	r3, [pc, #200]	@ (8000988 <TIM5_PWM_Init+0x100>)
 80008be:	4a33      	ldr	r2, [pc, #204]	@ (800098c <TIM5_PWM_Init+0x104>)
 80008c0:	601a      	str	r2, [r3, #0]
    htim5.Init.Prescaler = PWM_PRESCALER;              // 16MHz / (15+1) = 1MHz
 80008c2:	4b31      	ldr	r3, [pc, #196]	@ (8000988 <TIM5_PWM_Init+0x100>)
 80008c4:	220f      	movs	r2, #15
 80008c6:	605a      	str	r2, [r3, #4]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000988 <TIM5_PWM_Init+0x100>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
    htim5.Init.Period = PWM_PERIOD;                    // 1MHz / (999+1) = 1kHz PWM
 80008ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000988 <TIM5_PWM_Init+0x100>)
 80008d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008d4:	60da      	str	r2, [r3, #12]
    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000988 <TIM5_PWM_Init+0x100>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
    htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000988 <TIM5_PWM_Init+0x100>)
 80008de:	2280      	movs	r2, #128	@ 0x80
 80008e0:	619a      	str	r2, [r3, #24]
    
    if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80008e2:	4829      	ldr	r0, [pc, #164]	@ (8000988 <TIM5_PWM_Init+0x100>)
 80008e4:	f002 f89c 	bl	8002a20 <HAL_TIM_PWM_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <TIM5_PWM_Init+0x6a>
    {
        Error_Handler();
 80008ee:	f000 ff60 	bl	80017b2 <Error_Handler>
    }
    
    /* Configure PWM channels */
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f2:	2360      	movs	r3, #96	@ 0x60
 80008f4:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;                               // Start with 0% duty cycle
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
    
    /* Channel 1 - PA0 (Motor1_IN1) */
    if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2200      	movs	r2, #0
 8000906:	4619      	mov	r1, r3
 8000908:	481f      	ldr	r0, [pc, #124]	@ (8000988 <TIM5_PWM_Init+0x100>)
 800090a:	f002 fa83 	bl	8002e14 <HAL_TIM_PWM_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <TIM5_PWM_Init+0x90>
    {
        Error_Handler();
 8000914:	f000 ff4d 	bl	80017b2 <Error_Handler>
    }
    
    /* Channel 2 - PA1 (Motor1_IN2) */
    if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2204      	movs	r2, #4
 800091c:	4619      	mov	r1, r3
 800091e:	481a      	ldr	r0, [pc, #104]	@ (8000988 <TIM5_PWM_Init+0x100>)
 8000920:	f002 fa78 	bl	8002e14 <HAL_TIM_PWM_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <TIM5_PWM_Init+0xa6>
    {
        Error_Handler();
 800092a:	f000 ff42 	bl	80017b2 <Error_Handler>
    }
    
    /* Channel 3 - PA2 (Motor2_IN3) */
    if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2208      	movs	r2, #8
 8000932:	4619      	mov	r1, r3
 8000934:	4814      	ldr	r0, [pc, #80]	@ (8000988 <TIM5_PWM_Init+0x100>)
 8000936:	f002 fa6d 	bl	8002e14 <HAL_TIM_PWM_ConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <TIM5_PWM_Init+0xbc>
    {
        Error_Handler();
 8000940:	f000 ff37 	bl	80017b2 <Error_Handler>
    }
    
    /* Channel 4 - PA3 (Motor2_IN4) */
    if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	220c      	movs	r2, #12
 8000948:	4619      	mov	r1, r3
 800094a:	480f      	ldr	r0, [pc, #60]	@ (8000988 <TIM5_PWM_Init+0x100>)
 800094c:	f002 fa62 	bl	8002e14 <HAL_TIM_PWM_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <TIM5_PWM_Init+0xd2>
    {
        Error_Handler();
 8000956:	f000 ff2c 	bl	80017b2 <Error_Handler>
    }
    
    /* Start PWM on all channels */
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800095a:	2100      	movs	r1, #0
 800095c:	480a      	ldr	r0, [pc, #40]	@ (8000988 <TIM5_PWM_Init+0x100>)
 800095e:	f002 f8b9 	bl	8002ad4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000962:	2104      	movs	r1, #4
 8000964:	4808      	ldr	r0, [pc, #32]	@ (8000988 <TIM5_PWM_Init+0x100>)
 8000966:	f002 f8b5 	bl	8002ad4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800096a:	2108      	movs	r1, #8
 800096c:	4806      	ldr	r0, [pc, #24]	@ (8000988 <TIM5_PWM_Init+0x100>)
 800096e:	f002 f8b1 	bl	8002ad4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8000972:	210c      	movs	r1, #12
 8000974:	4804      	ldr	r0, [pc, #16]	@ (8000988 <TIM5_PWM_Init+0x100>)
 8000976:	f002 f8ad 	bl	8002ad4 <HAL_TIM_PWM_Start>
}
 800097a:	bf00      	nop
 800097c:	3720      	adds	r7, #32
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	20000320 	.word	0x20000320
 800098c:	40000c00 	.word	0x40000c00

08000990 <USART1_Init>:
 *         APB2 Clock = 16 MHz, Baud = 9600
 *         BRR = 16000000 / 9600 = 1666.67 ≈ 0x0682
 * @retval None
 */
void USART1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
    /* Enable USART1 clock (on APB2) */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b24      	ldr	r3, [pc, #144]	@ (8000a2c <USART1_Init+0x9c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	4a23      	ldr	r2, [pc, #140]	@ (8000a2c <USART1_Init+0x9c>)
 80009a0:	f043 0310 	orr.w	r3, r3, #16
 80009a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a6:	4b21      	ldr	r3, [pc, #132]	@ (8000a2c <USART1_Init+0x9c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	f003 0310 	and.w	r3, r3, #16
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
    
    /* Disable USART1 before configuration */
    USART1->CR1 &= ~USART_CR1_UE;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a30 <USART1_Init+0xa0>)
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a30 <USART1_Init+0xa0>)
 80009b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80009bc:	60d3      	str	r3, [r2, #12]
    
    /* Configure USART1 Control Register 1 (CR1) */
    USART1->CR1 = 0;  // Clear register
 80009be:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <USART1_Init+0xa0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
    USART1->CR1 |= USART_CR1_RE;      // Receiver enable
 80009c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a30 <USART1_Init+0xa0>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	4a19      	ldr	r2, [pc, #100]	@ (8000a30 <USART1_Init+0xa0>)
 80009ca:	f043 0304 	orr.w	r3, r3, #4
 80009ce:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_TE;      // Transmitter enable
 80009d0:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <USART1_Init+0xa0>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	4a16      	ldr	r2, [pc, #88]	@ (8000a30 <USART1_Init+0xa0>)
 80009d6:	f043 0308 	orr.w	r3, r3, #8
 80009da:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_RXNEIE;  // RXNE interrupt enable
 80009dc:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <USART1_Init+0xa0>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	4a13      	ldr	r2, [pc, #76]	@ (8000a30 <USART1_Init+0xa0>)
 80009e2:	f043 0320 	orr.w	r3, r3, #32
 80009e6:	60d3      	str	r3, [r2, #12]
    // Word length = 8 bits (M bit = 0)
    // Parity control disabled (PCE bit = 0)
    
    /* Configure USART1 Control Register 2 (CR2) */
    USART1->CR2 = 0;  // Clear register
 80009e8:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <USART1_Init+0xa0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
    // 1 Stop bit (STOP[1:0] = 00)
    
    /* Configure USART1 Control Register 3 (CR3) */
    USART1->CR3 = 0;  // Clear register
 80009ee:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <USART1_Init+0xa0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
    USART1->CR3 |= USART_CR3_EIE;  // Error interrupt enable
 80009f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <USART1_Init+0xa0>)
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a30 <USART1_Init+0xa0>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6153      	str	r3, [r2, #20]
     * BRR = 16000000 / 9600 = 1666.67
     * BRR (hex) = 0x0682
     * 
     * Actual baud = 16000000 / 1666 = 9603.84 (0.04% error - acceptable)
     */
    USART1->BRR = 0x0682;  // For 9600 baud at 16MHz APB2 clock
 8000a00:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <USART1_Init+0xa0>)
 8000a02:	f240 6282 	movw	r2, #1666	@ 0x682
 8000a06:	609a      	str	r2, [r3, #8]
    
    /* Enable USART1 */
    USART1->CR1 |= USART_CR1_UE;
 8000a08:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <USART1_Init+0xa0>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	4a08      	ldr	r2, [pc, #32]	@ (8000a30 <USART1_Init+0xa0>)
 8000a0e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a12:	60d3      	str	r3, [r2, #12]
    
    /* Configure NVIC for USART1 interrupt */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2105      	movs	r1, #5
 8000a18:	2025      	movs	r0, #37	@ 0x25
 8000a1a:	f001 f8d5 	bl	8001bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a1e:	2025      	movs	r0, #37	@ 0x25
 8000a20:	f001 f8ee 	bl	8001c00 <HAL_NVIC_EnableIRQ>
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40011000 	.word	0x40011000

08000a34 <Motor_SetSpeed>:
 * @param  motor2_in3: PWM duty cycle for Motor 2 Forward (0-100%)
 * @param  motor2_in4: PWM duty cycle for Motor 2 Reverse (0-100%)
 * @retval None
 */
void Motor_SetSpeed(uint8_t motor1_in1, uint8_t motor1_in2, uint8_t motor2_in3, uint8_t motor2_in4)
{
 8000a34:	b490      	push	{r4, r7}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	4608      	mov	r0, r1
 8000a3e:	4611      	mov	r1, r2
 8000a40:	461a      	mov	r2, r3
 8000a42:	4623      	mov	r3, r4
 8000a44:	71fb      	strb	r3, [r7, #7]
 8000a46:	4603      	mov	r3, r0
 8000a48:	71bb      	strb	r3, [r7, #6]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	717b      	strb	r3, [r7, #5]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	713b      	strb	r3, [r7, #4]
    // Convert percentage (0-100) to PWM value (0-PWM_PERIOD)
    uint32_t pwm1_in1 = (motor1_in1 * PWM_PERIOD) / 100;
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a58:	fb02 f303 	mul.w	r3, r2, r3
 8000a5c:	4a25      	ldr	r2, [pc, #148]	@ (8000af4 <Motor_SetSpeed+0xc0>)
 8000a5e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a62:	1152      	asrs	r2, r2, #5
 8000a64:	17db      	asrs	r3, r3, #31
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	617b      	str	r3, [r7, #20]
    uint32_t pwm1_in2 = (motor1_in2 * PWM_PERIOD) / 100;
 8000a6a:	79bb      	ldrb	r3, [r7, #6]
 8000a6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a70:	fb02 f303 	mul.w	r3, r2, r3
 8000a74:	4a1f      	ldr	r2, [pc, #124]	@ (8000af4 <Motor_SetSpeed+0xc0>)
 8000a76:	fb82 1203 	smull	r1, r2, r2, r3
 8000a7a:	1152      	asrs	r2, r2, #5
 8000a7c:	17db      	asrs	r3, r3, #31
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	613b      	str	r3, [r7, #16]
    uint32_t pwm2_in3 = (motor2_in3 * PWM_PERIOD) / 100;
 8000a82:	797b      	ldrb	r3, [r7, #5]
 8000a84:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a88:	fb02 f303 	mul.w	r3, r2, r3
 8000a8c:	4a19      	ldr	r2, [pc, #100]	@ (8000af4 <Motor_SetSpeed+0xc0>)
 8000a8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a92:	1152      	asrs	r2, r2, #5
 8000a94:	17db      	asrs	r3, r3, #31
 8000a96:	1ad3      	subs	r3, r2, r3
 8000a98:	60fb      	str	r3, [r7, #12]
    uint32_t pwm2_in4 = (motor2_in4 * PWM_PERIOD) / 100;
 8000a9a:	793b      	ldrb	r3, [r7, #4]
 8000a9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000aa0:	fb02 f303 	mul.w	r3, r2, r3
 8000aa4:	4a13      	ldr	r2, [pc, #76]	@ (8000af4 <Motor_SetSpeed+0xc0>)
 8000aa6:	fb82 1203 	smull	r1, r2, r2, r3
 8000aaa:	1152      	asrs	r2, r2, #5
 8000aac:	17db      	asrs	r3, r3, #31
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	60bb      	str	r3, [r7, #8]
    
    // Set PWM duty cycles
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, pwm1_in1);  // Motor1 IN1
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <Motor_SetSpeed+0xc4>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	697a      	ldr	r2, [r7, #20]
 8000ab8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, pwm1_in2);  // Motor1 IN2
 8000aba:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <Motor_SetSpeed+0xc4>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, pwm2_in3);  // Motor2 IN3
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8000af8 <Motor_SetSpeed+0xc4>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, pwm2_in4);  // Motor2 IN4
 8000aca:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <Motor_SetSpeed+0xc4>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    // Update current values
    current_m1_in1 = motor1_in1;
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <Motor_SetSpeed+0xc8>)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	7013      	strb	r3, [r2, #0]
    current_m1_in2 = motor1_in2;
 8000ad8:	4a09      	ldr	r2, [pc, #36]	@ (8000b00 <Motor_SetSpeed+0xcc>)
 8000ada:	79bb      	ldrb	r3, [r7, #6]
 8000adc:	7013      	strb	r3, [r2, #0]
    current_m2_in3 = motor2_in3;
 8000ade:	4a09      	ldr	r2, [pc, #36]	@ (8000b04 <Motor_SetSpeed+0xd0>)
 8000ae0:	797b      	ldrb	r3, [r7, #5]
 8000ae2:	7013      	strb	r3, [r2, #0]
    current_m2_in4 = motor2_in4;
 8000ae4:	4a08      	ldr	r2, [pc, #32]	@ (8000b08 <Motor_SetSpeed+0xd4>)
 8000ae6:	793b      	ldrb	r3, [r7, #4]
 8000ae8:	7013      	strb	r3, [r2, #0]
}
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc90      	pop	{r4, r7}
 8000af2:	4770      	bx	lr
 8000af4:	51eb851f 	.word	0x51eb851f
 8000af8:	20000320 	.word	0x20000320
 8000afc:	20000381 	.word	0x20000381
 8000b00:	20000382 	.word	0x20000382
 8000b04:	20000383 	.word	0x20000383
 8000b08:	20000384 	.word	0x20000384

08000b0c <Motor_SetSpeed_Smooth>:
 * @param  target_m2_in4: Target PWM duty cycle for Motor 2 Reverse (0-100%)
 * @note   Gradually ramps from current speed to target speed
 * @retval None
 */
void Motor_SetSpeed_Smooth(uint8_t target_m1_in1, uint8_t target_m1_in2, uint8_t target_m2_in3, uint8_t target_m2_in4)
{
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b087      	sub	sp, #28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4604      	mov	r4, r0
 8000b14:	4608      	mov	r0, r1
 8000b16:	4611      	mov	r1, r2
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4623      	mov	r3, r4
 8000b1c:	71fb      	strb	r3, [r7, #7]
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71bb      	strb	r3, [r7, #6]
 8000b22:	460b      	mov	r3, r1
 8000b24:	717b      	strb	r3, [r7, #5]
 8000b26:	4613      	mov	r3, r2
 8000b28:	713b      	strb	r3, [r7, #4]
    // Check if motors are currently stopped and target is low speed -> apply kick-start
    bool currently_stopped = (current_m1_in1 == 0 && current_m1_in2 == 0 && 
 8000b2a:	4b95      	ldr	r3, [pc, #596]	@ (8000d80 <Motor_SetSpeed_Smooth+0x274>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b2db      	uxtb	r3, r3
                             current_m2_in3 == 0 && current_m2_in4 == 0);
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d110      	bne.n	8000b56 <Motor_SetSpeed_Smooth+0x4a>
    bool currently_stopped = (current_m1_in1 == 0 && current_m1_in2 == 0 && 
 8000b34:	4b93      	ldr	r3, [pc, #588]	@ (8000d84 <Motor_SetSpeed_Smooth+0x278>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d10b      	bne.n	8000b56 <Motor_SetSpeed_Smooth+0x4a>
                             current_m2_in3 == 0 && current_m2_in4 == 0);
 8000b3e:	4b92      	ldr	r3, [pc, #584]	@ (8000d88 <Motor_SetSpeed_Smooth+0x27c>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	b2db      	uxtb	r3, r3
    bool currently_stopped = (current_m1_in1 == 0 && current_m1_in2 == 0 && 
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d106      	bne.n	8000b56 <Motor_SetSpeed_Smooth+0x4a>
                             current_m2_in3 == 0 && current_m2_in4 == 0);
 8000b48:	4b90      	ldr	r3, [pc, #576]	@ (8000d8c <Motor_SetSpeed_Smooth+0x280>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d101      	bne.n	8000b56 <Motor_SetSpeed_Smooth+0x4a>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <Motor_SetSpeed_Smooth+0x4c>
 8000b56:	2300      	movs	r3, #0
    bool currently_stopped = (current_m1_in1 == 0 && current_m1_in2 == 0 && 
 8000b58:	75fb      	strb	r3, [r7, #23]
 8000b5a:	7dfb      	ldrb	r3, [r7, #23]
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	75fb      	strb	r3, [r7, #23]
    uint8_t target_total = target_m1_in1 + target_m1_in2 + target_m2_in3 + target_m2_in4;
 8000b62:	79fa      	ldrb	r2, [r7, #7]
 8000b64:	79bb      	ldrb	r3, [r7, #6]
 8000b66:	4413      	add	r3, r2
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	797b      	ldrb	r3, [r7, #5]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	793b      	ldrb	r3, [r7, #4]
 8000b72:	4413      	add	r3, r2
 8000b74:	75bb      	strb	r3, [r7, #22]
    bool needs_kickstart = (currently_stopped && target_total > 0 && target_total <= (SPEED_SLOW * 2) && KICKSTART_ENABLED);
 8000b76:	7dfb      	ldrb	r3, [r7, #23]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d007      	beq.n	8000b8c <Motor_SetSpeed_Smooth+0x80>
 8000b7c:	7dbb      	ldrb	r3, [r7, #22]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d004      	beq.n	8000b8c <Motor_SetSpeed_Smooth+0x80>
 8000b82:	7dbb      	ldrb	r3, [r7, #22]
 8000b84:	2b50      	cmp	r3, #80	@ 0x50
 8000b86:	d801      	bhi.n	8000b8c <Motor_SetSpeed_Smooth+0x80>
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e000      	b.n	8000b8e <Motor_SetSpeed_Smooth+0x82>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	757b      	strb	r3, [r7, #21]
 8000b90:	7d7b      	ldrb	r3, [r7, #21]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	757b      	strb	r3, [r7, #21]
    
    // Apply kick-start pulse to overcome static friction
    if (needs_kickstart)
 8000b98:	7d7b      	ldrb	r3, [r7, #21]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d024      	beq.n	8000be8 <Motor_SetSpeed_Smooth+0xdc>
    {
        // Brief high-power pulse to break static friction
        uint8_t kick_m1_in1 = (target_m1_in1 > 0) ? KICKSTART_DUTY : 0;
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <Motor_SetSpeed_Smooth+0x9c>
 8000ba4:	2350      	movs	r3, #80	@ 0x50
 8000ba6:	e000      	b.n	8000baa <Motor_SetSpeed_Smooth+0x9e>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	753b      	strb	r3, [r7, #20]
        uint8_t kick_m1_in2 = (target_m1_in2 > 0) ? KICKSTART_DUTY : 0;
 8000bac:	79bb      	ldrb	r3, [r7, #6]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <Motor_SetSpeed_Smooth+0xaa>
 8000bb2:	2350      	movs	r3, #80	@ 0x50
 8000bb4:	e000      	b.n	8000bb8 <Motor_SetSpeed_Smooth+0xac>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	74fb      	strb	r3, [r7, #19]
        uint8_t kick_m2_in3 = (target_m2_in3 > 0) ? KICKSTART_DUTY : 0;
 8000bba:	797b      	ldrb	r3, [r7, #5]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <Motor_SetSpeed_Smooth+0xb8>
 8000bc0:	2350      	movs	r3, #80	@ 0x50
 8000bc2:	e000      	b.n	8000bc6 <Motor_SetSpeed_Smooth+0xba>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	74bb      	strb	r3, [r7, #18]
        uint8_t kick_m2_in4 = (target_m2_in4 > 0) ? KICKSTART_DUTY : 0;
 8000bc8:	793b      	ldrb	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <Motor_SetSpeed_Smooth+0xc6>
 8000bce:	2350      	movs	r3, #80	@ 0x50
 8000bd0:	e000      	b.n	8000bd4 <Motor_SetSpeed_Smooth+0xc8>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	747b      	strb	r3, [r7, #17]
        
        Motor_SetSpeed(kick_m1_in1, kick_m1_in2, kick_m2_in3, kick_m2_in4);
 8000bd6:	7c7b      	ldrb	r3, [r7, #17]
 8000bd8:	7cba      	ldrb	r2, [r7, #18]
 8000bda:	7cf9      	ldrb	r1, [r7, #19]
 8000bdc:	7d38      	ldrb	r0, [r7, #20]
 8000bde:	f7ff ff29 	bl	8000a34 <Motor_SetSpeed>
        osDelay(KICKSTART_DURATION);
 8000be2:	2096      	movs	r0, #150	@ 0x96
 8000be4:	f002 fcc8 	bl	8003578 <osDelay>
    }
    
    // If acceleration is disabled, set speed instantly
    if (!accel_enabled)
 8000be8:	4b69      	ldr	r3, [pc, #420]	@ (8000d90 <Motor_SetSpeed_Smooth+0x284>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	f083 0301 	eor.w	r3, r3, #1
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d00e      	beq.n	8000c16 <Motor_SetSpeed_Smooth+0x10a>
    {
        Motor_SetSpeed(target_m1_in1, target_m1_in2, target_m2_in3, target_m2_in4);
 8000bf8:	793b      	ldrb	r3, [r7, #4]
 8000bfa:	797a      	ldrb	r2, [r7, #5]
 8000bfc:	79b9      	ldrb	r1, [r7, #6]
 8000bfe:	79f8      	ldrb	r0, [r7, #7]
 8000c00:	f7ff ff18 	bl	8000a34 <Motor_SetSpeed>
        motors_moving = (target_total > 0);
 8000c04:	7dbb      	ldrb	r3, [r7, #22]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	bf14      	ite	ne
 8000c0a:	2301      	movne	r3, #1
 8000c0c:	2300      	moveq	r3, #0
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	4b60      	ldr	r3, [pc, #384]	@ (8000d94 <Motor_SetSpeed_Smooth+0x288>)
 8000c12:	701a      	strb	r2, [r3, #0]
        return;
 8000c14:	e14e      	b.n	8000eb4 <Motor_SetSpeed_Smooth+0x3a8>
    }
    
    // Determine if we're accelerating or decelerating
    uint8_t current_total = current_m1_in1 + current_m1_in2 + current_m2_in3 + current_m2_in4;
 8000c16:	4b5a      	ldr	r3, [pc, #360]	@ (8000d80 <Motor_SetSpeed_Smooth+0x274>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	4b59      	ldr	r3, [pc, #356]	@ (8000d84 <Motor_SetSpeed_Smooth+0x278>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	4413      	add	r3, r2
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4b58      	ldr	r3, [pc, #352]	@ (8000d88 <Motor_SetSpeed_Smooth+0x27c>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	4413      	add	r3, r2
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	4b56      	ldr	r3, [pc, #344]	@ (8000d8c <Motor_SetSpeed_Smooth+0x280>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	4413      	add	r3, r2
 8000c38:	743b      	strb	r3, [r7, #16]
    
    bool is_accelerating = (target_total > current_total);
 8000c3a:	7dba      	ldrb	r2, [r7, #22]
 8000c3c:	7c3b      	ldrb	r3, [r7, #16]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	bf8c      	ite	hi
 8000c42:	2301      	movhi	r3, #1
 8000c44:	2300      	movls	r3, #0
 8000c46:	73fb      	strb	r3, [r7, #15]
    uint8_t step = is_accelerating ? ACCEL_STEP : DECEL_STEP;
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <Motor_SetSpeed_Smooth+0x146>
 8000c4e:	2305      	movs	r3, #5
 8000c50:	e000      	b.n	8000c54 <Motor_SetSpeed_Smooth+0x148>
 8000c52:	230a      	movs	r3, #10
 8000c54:	73bb      	strb	r3, [r7, #14]
    uint16_t delay_ms = is_accelerating ? ACCEL_DELAY_MS : DECEL_DELAY_MS;
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <Motor_SetSpeed_Smooth+0x154>
 8000c5c:	2314      	movs	r3, #20
 8000c5e:	e000      	b.n	8000c62 <Motor_SetSpeed_Smooth+0x156>
 8000c60:	230f      	movs	r3, #15
 8000c62:	81bb      	strh	r3, [r7, #12]
    
    // Ramp up/down gradually
    while (current_m1_in1 != target_m1_in1 || current_m1_in2 != target_m1_in2 ||
 8000c64:	e102      	b.n	8000e6c <Motor_SetSpeed_Smooth+0x360>
           current_m2_in3 != target_m2_in3 || current_m2_in4 != target_m2_in4)
    {
        // Ramp motor 1 IN1
        if (current_m1_in1 < target_m1_in1)
 8000c66:	4b46      	ldr	r3, [pc, #280]	@ (8000d80 <Motor_SetSpeed_Smooth+0x274>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	79fa      	ldrb	r2, [r7, #7]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d913      	bls.n	8000c9a <Motor_SetSpeed_Smooth+0x18e>
            current_m1_in1 = (current_m1_in1 + step > target_m1_in1) ? target_m1_in1 : current_m1_in1 + step;
 8000c72:	4b43      	ldr	r3, [pc, #268]	@ (8000d80 <Motor_SetSpeed_Smooth+0x274>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	461a      	mov	r2, r3
 8000c7a:	7bbb      	ldrb	r3, [r7, #14]
 8000c7c:	441a      	add	r2, r3
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dc06      	bgt.n	8000c92 <Motor_SetSpeed_Smooth+0x186>
 8000c84:	4b3e      	ldr	r3, [pc, #248]	@ (8000d80 <Motor_SetSpeed_Smooth+0x274>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	7bbb      	ldrb	r3, [r7, #14]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	e000      	b.n	8000c94 <Motor_SetSpeed_Smooth+0x188>
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	4a3a      	ldr	r2, [pc, #232]	@ (8000d80 <Motor_SetSpeed_Smooth+0x274>)
 8000c96:	7013      	strb	r3, [r2, #0]
 8000c98:	e01e      	b.n	8000cd8 <Motor_SetSpeed_Smooth+0x1cc>
        else if (current_m1_in1 > target_m1_in1)
 8000c9a:	4b39      	ldr	r3, [pc, #228]	@ (8000d80 <Motor_SetSpeed_Smooth+0x274>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	79fa      	ldrb	r2, [r7, #7]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d218      	bcs.n	8000cd8 <Motor_SetSpeed_Smooth+0x1cc>
            current_m1_in1 = (current_m1_in1 < step || current_m1_in1 - step < target_m1_in1) ? target_m1_in1 : current_m1_in1 - step;
 8000ca6:	4b36      	ldr	r3, [pc, #216]	@ (8000d80 <Motor_SetSpeed_Smooth+0x274>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	7bba      	ldrb	r2, [r7, #14]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d80f      	bhi.n	8000cd2 <Motor_SetSpeed_Smooth+0x1c6>
 8000cb2:	4b33      	ldr	r3, [pc, #204]	@ (8000d80 <Motor_SetSpeed_Smooth+0x274>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	461a      	mov	r2, r3
 8000cba:	7bbb      	ldrb	r3, [r7, #14]
 8000cbc:	1ad2      	subs	r2, r2, r3
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	db06      	blt.n	8000cd2 <Motor_SetSpeed_Smooth+0x1c6>
 8000cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8000d80 <Motor_SetSpeed_Smooth+0x274>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	7bbb      	ldrb	r3, [r7, #14]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	e000      	b.n	8000cd4 <Motor_SetSpeed_Smooth+0x1c8>
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8000d80 <Motor_SetSpeed_Smooth+0x274>)
 8000cd6:	7013      	strb	r3, [r2, #0]
        
        // Ramp motor 1 IN2
        if (current_m1_in2 < target_m1_in2)
 8000cd8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d84 <Motor_SetSpeed_Smooth+0x278>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	79ba      	ldrb	r2, [r7, #6]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d913      	bls.n	8000d0c <Motor_SetSpeed_Smooth+0x200>
            current_m1_in2 = (current_m1_in2 + step > target_m1_in2) ? target_m1_in2 : current_m1_in2 + step;
 8000ce4:	4b27      	ldr	r3, [pc, #156]	@ (8000d84 <Motor_SetSpeed_Smooth+0x278>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	461a      	mov	r2, r3
 8000cec:	7bbb      	ldrb	r3, [r7, #14]
 8000cee:	441a      	add	r2, r3
 8000cf0:	79bb      	ldrb	r3, [r7, #6]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	dc06      	bgt.n	8000d04 <Motor_SetSpeed_Smooth+0x1f8>
 8000cf6:	4b23      	ldr	r3, [pc, #140]	@ (8000d84 <Motor_SetSpeed_Smooth+0x278>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	7bbb      	ldrb	r3, [r7, #14]
 8000cfe:	4413      	add	r3, r2
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	e000      	b.n	8000d06 <Motor_SetSpeed_Smooth+0x1fa>
 8000d04:	79bb      	ldrb	r3, [r7, #6]
 8000d06:	4a1f      	ldr	r2, [pc, #124]	@ (8000d84 <Motor_SetSpeed_Smooth+0x278>)
 8000d08:	7013      	strb	r3, [r2, #0]
 8000d0a:	e01e      	b.n	8000d4a <Motor_SetSpeed_Smooth+0x23e>
        else if (current_m1_in2 > target_m1_in2)
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <Motor_SetSpeed_Smooth+0x278>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	79ba      	ldrb	r2, [r7, #6]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d218      	bcs.n	8000d4a <Motor_SetSpeed_Smooth+0x23e>
            current_m1_in2 = (current_m1_in2 < step || current_m1_in2 - step < target_m1_in2) ? target_m1_in2 : current_m1_in2 - step;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <Motor_SetSpeed_Smooth+0x278>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	7bba      	ldrb	r2, [r7, #14]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d80f      	bhi.n	8000d44 <Motor_SetSpeed_Smooth+0x238>
 8000d24:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <Motor_SetSpeed_Smooth+0x278>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	7bbb      	ldrb	r3, [r7, #14]
 8000d2e:	1ad2      	subs	r2, r2, r3
 8000d30:	79bb      	ldrb	r3, [r7, #6]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	db06      	blt.n	8000d44 <Motor_SetSpeed_Smooth+0x238>
 8000d36:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <Motor_SetSpeed_Smooth+0x278>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	7bbb      	ldrb	r3, [r7, #14]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	e000      	b.n	8000d46 <Motor_SetSpeed_Smooth+0x23a>
 8000d44:	79bb      	ldrb	r3, [r7, #6]
 8000d46:	4a0f      	ldr	r2, [pc, #60]	@ (8000d84 <Motor_SetSpeed_Smooth+0x278>)
 8000d48:	7013      	strb	r3, [r2, #0]
        
        // Ramp motor 2 IN3
        if (current_m2_in3 < target_m2_in3)
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <Motor_SetSpeed_Smooth+0x27c>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	797a      	ldrb	r2, [r7, #5]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d920      	bls.n	8000d98 <Motor_SetSpeed_Smooth+0x28c>
            current_m2_in3 = (current_m2_in3 + step > target_m2_in3) ? target_m2_in3 : current_m2_in3 + step;
 8000d56:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <Motor_SetSpeed_Smooth+0x27c>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	7bbb      	ldrb	r3, [r7, #14]
 8000d60:	441a      	add	r2, r3
 8000d62:	797b      	ldrb	r3, [r7, #5]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dc06      	bgt.n	8000d76 <Motor_SetSpeed_Smooth+0x26a>
 8000d68:	4b07      	ldr	r3, [pc, #28]	@ (8000d88 <Motor_SetSpeed_Smooth+0x27c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	7bbb      	ldrb	r3, [r7, #14]
 8000d70:	4413      	add	r3, r2
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	e000      	b.n	8000d78 <Motor_SetSpeed_Smooth+0x26c>
 8000d76:	797b      	ldrb	r3, [r7, #5]
 8000d78:	4a03      	ldr	r2, [pc, #12]	@ (8000d88 <Motor_SetSpeed_Smooth+0x27c>)
 8000d7a:	7013      	strb	r3, [r2, #0]
 8000d7c:	e02b      	b.n	8000dd6 <Motor_SetSpeed_Smooth+0x2ca>
 8000d7e:	bf00      	nop
 8000d80:	20000381 	.word	0x20000381
 8000d84:	20000382 	.word	0x20000382
 8000d88:	20000383 	.word	0x20000383
 8000d8c:	20000384 	.word	0x20000384
 8000d90:	20000001 	.word	0x20000001
 8000d94:	20000385 	.word	0x20000385
        else if (current_m2_in3 > target_m2_in3)
 8000d98:	4b48      	ldr	r3, [pc, #288]	@ (8000ebc <Motor_SetSpeed_Smooth+0x3b0>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	797a      	ldrb	r2, [r7, #5]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d218      	bcs.n	8000dd6 <Motor_SetSpeed_Smooth+0x2ca>
            current_m2_in3 = (current_m2_in3 < step || current_m2_in3 - step < target_m2_in3) ? target_m2_in3 : current_m2_in3 - step;
 8000da4:	4b45      	ldr	r3, [pc, #276]	@ (8000ebc <Motor_SetSpeed_Smooth+0x3b0>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	7bba      	ldrb	r2, [r7, #14]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d80f      	bhi.n	8000dd0 <Motor_SetSpeed_Smooth+0x2c4>
 8000db0:	4b42      	ldr	r3, [pc, #264]	@ (8000ebc <Motor_SetSpeed_Smooth+0x3b0>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	461a      	mov	r2, r3
 8000db8:	7bbb      	ldrb	r3, [r7, #14]
 8000dba:	1ad2      	subs	r2, r2, r3
 8000dbc:	797b      	ldrb	r3, [r7, #5]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	db06      	blt.n	8000dd0 <Motor_SetSpeed_Smooth+0x2c4>
 8000dc2:	4b3e      	ldr	r3, [pc, #248]	@ (8000ebc <Motor_SetSpeed_Smooth+0x3b0>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	7bbb      	ldrb	r3, [r7, #14]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	e000      	b.n	8000dd2 <Motor_SetSpeed_Smooth+0x2c6>
 8000dd0:	797b      	ldrb	r3, [r7, #5]
 8000dd2:	4a3a      	ldr	r2, [pc, #232]	@ (8000ebc <Motor_SetSpeed_Smooth+0x3b0>)
 8000dd4:	7013      	strb	r3, [r2, #0]
        
        // Ramp motor 2 IN4
        if (current_m2_in4 < target_m2_in4)
 8000dd6:	4b3a      	ldr	r3, [pc, #232]	@ (8000ec0 <Motor_SetSpeed_Smooth+0x3b4>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	793a      	ldrb	r2, [r7, #4]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d913      	bls.n	8000e0a <Motor_SetSpeed_Smooth+0x2fe>
            current_m2_in4 = (current_m2_in4 + step > target_m2_in4) ? target_m2_in4 : current_m2_in4 + step;
 8000de2:	4b37      	ldr	r3, [pc, #220]	@ (8000ec0 <Motor_SetSpeed_Smooth+0x3b4>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	461a      	mov	r2, r3
 8000dea:	7bbb      	ldrb	r3, [r7, #14]
 8000dec:	441a      	add	r2, r3
 8000dee:	793b      	ldrb	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dc06      	bgt.n	8000e02 <Motor_SetSpeed_Smooth+0x2f6>
 8000df4:	4b32      	ldr	r3, [pc, #200]	@ (8000ec0 <Motor_SetSpeed_Smooth+0x3b4>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	e000      	b.n	8000e04 <Motor_SetSpeed_Smooth+0x2f8>
 8000e02:	793b      	ldrb	r3, [r7, #4]
 8000e04:	4a2e      	ldr	r2, [pc, #184]	@ (8000ec0 <Motor_SetSpeed_Smooth+0x3b4>)
 8000e06:	7013      	strb	r3, [r2, #0]
 8000e08:	e01e      	b.n	8000e48 <Motor_SetSpeed_Smooth+0x33c>
        else if (current_m2_in4 > target_m2_in4)
 8000e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec0 <Motor_SetSpeed_Smooth+0x3b4>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	793a      	ldrb	r2, [r7, #4]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d218      	bcs.n	8000e48 <Motor_SetSpeed_Smooth+0x33c>
            current_m2_in4 = (current_m2_in4 < step || current_m2_in4 - step < target_m2_in4) ? target_m2_in4 : current_m2_in4 - step;
 8000e16:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec0 <Motor_SetSpeed_Smooth+0x3b4>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	7bba      	ldrb	r2, [r7, #14]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d80f      	bhi.n	8000e42 <Motor_SetSpeed_Smooth+0x336>
 8000e22:	4b27      	ldr	r3, [pc, #156]	@ (8000ec0 <Motor_SetSpeed_Smooth+0x3b4>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	461a      	mov	r2, r3
 8000e2a:	7bbb      	ldrb	r3, [r7, #14]
 8000e2c:	1ad2      	subs	r2, r2, r3
 8000e2e:	793b      	ldrb	r3, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	db06      	blt.n	8000e42 <Motor_SetSpeed_Smooth+0x336>
 8000e34:	4b22      	ldr	r3, [pc, #136]	@ (8000ec0 <Motor_SetSpeed_Smooth+0x3b4>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	7bbb      	ldrb	r3, [r7, #14]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	e000      	b.n	8000e44 <Motor_SetSpeed_Smooth+0x338>
 8000e42:	793b      	ldrb	r3, [r7, #4]
 8000e44:	4a1e      	ldr	r2, [pc, #120]	@ (8000ec0 <Motor_SetSpeed_Smooth+0x3b4>)
 8000e46:	7013      	strb	r3, [r2, #0]
        
        // Apply current values
        Motor_SetSpeed(current_m1_in1, current_m1_in2, current_m2_in3, current_m2_in4);
 8000e48:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec4 <Motor_SetSpeed_Smooth+0x3b8>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b2d8      	uxtb	r0, r3
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec8 <Motor_SetSpeed_Smooth+0x3bc>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b2d9      	uxtb	r1, r3
 8000e54:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <Motor_SetSpeed_Smooth+0x3b0>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <Motor_SetSpeed_Smooth+0x3b4>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	f7ff fde8 	bl	8000a34 <Motor_SetSpeed>
        
        // Delay for smooth ramping
        osDelay(delay_ms);
 8000e64:	89bb      	ldrh	r3, [r7, #12]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f002 fb86 	bl	8003578 <osDelay>
    while (current_m1_in1 != target_m1_in1 || current_m1_in2 != target_m1_in2 ||
 8000e6c:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <Motor_SetSpeed_Smooth+0x3b8>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b2db      	uxtb	r3, r3
           current_m2_in3 != target_m2_in3 || current_m2_in4 != target_m2_in4)
 8000e72:	79fa      	ldrb	r2, [r7, #7]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	f47f aef6 	bne.w	8000c66 <Motor_SetSpeed_Smooth+0x15a>
    while (current_m1_in1 != target_m1_in1 || current_m1_in2 != target_m1_in2 ||
 8000e7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <Motor_SetSpeed_Smooth+0x3bc>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	79ba      	ldrb	r2, [r7, #6]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	f47f aeef 	bne.w	8000c66 <Motor_SetSpeed_Smooth+0x15a>
           current_m2_in3 != target_m2_in3 || current_m2_in4 != target_m2_in4)
 8000e88:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <Motor_SetSpeed_Smooth+0x3b0>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	b2db      	uxtb	r3, r3
    while (current_m1_in1 != target_m1_in1 || current_m1_in2 != target_m1_in2 ||
 8000e8e:	797a      	ldrb	r2, [r7, #5]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	f47f aee8 	bne.w	8000c66 <Motor_SetSpeed_Smooth+0x15a>
           current_m2_in3 != target_m2_in3 || current_m2_in4 != target_m2_in4)
 8000e96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <Motor_SetSpeed_Smooth+0x3b4>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	793a      	ldrb	r2, [r7, #4]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	f47f aee1 	bne.w	8000c66 <Motor_SetSpeed_Smooth+0x15a>
    }
    
    // Update moving state
    motors_moving = (target_total > 0);
 8000ea4:	7dbb      	ldrb	r3, [r7, #22]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	bf14      	ite	ne
 8000eaa:	2301      	movne	r3, #1
 8000eac:	2300      	moveq	r3, #0
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <Motor_SetSpeed_Smooth+0x3c0>)
 8000eb2:	701a      	strb	r2, [r3, #0]
}
 8000eb4:	371c      	adds	r7, #28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd90      	pop	{r4, r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000383 	.word	0x20000383
 8000ec0:	20000384 	.word	0x20000384
 8000ec4:	20000381 	.word	0x20000381
 8000ec8:	20000382 	.word	0x20000382
 8000ecc:	20000385 	.word	0x20000385

08000ed0 <Motor_Forward>:
 * @brief  Motor Forward - Both motors forward at specified speed
 * @param  speed: Motor speed (0-100%)
 * @retval None
 */
void Motor_Forward(uint8_t speed)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
    Motor_SetSpeed_Smooth(speed, 0, speed, 0);
 8000eda:	79fa      	ldrb	r2, [r7, #7]
 8000edc:	79f8      	ldrb	r0, [r7, #7]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	f7ff fe13 	bl	8000b0c <Motor_SetSpeed_Smooth>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <Motor_Reverse>:
 * @brief  Motor Reverse - Both motors backward at specified speed
 * @param  speed: Motor speed (0-100%)
 * @retval None
 */
void Motor_Reverse(uint8_t speed)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	71fb      	strb	r3, [r7, #7]
    Motor_SetSpeed_Smooth(0, speed, 0, speed);
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	79f9      	ldrb	r1, [r7, #7]
 8000efc:	2200      	movs	r2, #0
 8000efe:	2000      	movs	r0, #0
 8000f00:	f7ff fe04 	bl	8000b0c <Motor_SetSpeed_Smooth>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <Motor_Left>:
 * @brief  Motor Left - Left motor reverse, right motor forward (spot turn)
 * @param  speed: Motor speed (0-100%)
 * @retval None
 */
void Motor_Left(uint8_t speed)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
    Motor_SetSpeed_Smooth(0, speed, speed, 0);
 8000f16:	79fa      	ldrb	r2, [r7, #7]
 8000f18:	79f9      	ldrb	r1, [r7, #7]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f7ff fdf5 	bl	8000b0c <Motor_SetSpeed_Smooth>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <Motor_Right>:
 * @brief  Motor Right - Left motor forward, right motor reverse (spot turn)
 * @param  speed: Motor speed (0-100%)
 * @retval None
 */
void Motor_Right(uint8_t speed)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	71fb      	strb	r3, [r7, #7]
    Motor_SetSpeed_Smooth(speed, 0, 0, speed);
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	79f8      	ldrb	r0, [r7, #7]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	f7ff fde6 	bl	8000b0c <Motor_SetSpeed_Smooth>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <Motor_ForwardDifferential>:
 * @brief  Forward with differential wheel speeds (arc steering)
 * @param  left_speed: Left wheel forward PWM (0-100)
 * @param  right_speed: Right wheel forward PWM (0-100)
 */
void Motor_ForwardDifferential(uint8_t left_speed, uint8_t right_speed)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	460a      	mov	r2, r1
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	4613      	mov	r3, r2
 8000f56:	71bb      	strb	r3, [r7, #6]
    Motor_SetSpeed_Smooth(left_speed, 0, right_speed, 0);
 8000f58:	79ba      	ldrb	r2, [r7, #6]
 8000f5a:	79f8      	ldrb	r0, [r7, #7]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	f7ff fdd4 	bl	8000b0c <Motor_SetSpeed_Smooth>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <Motor_Stop>:
/**
 * @brief  Motor Stop - All motors off (instant stop)
 * @retval None
 */
void Motor_Stop(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
    Motor_SetSpeed(0, 0, 0, 0);
 8000f70:	2300      	movs	r3, #0
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff fd5c 	bl	8000a34 <Motor_SetSpeed>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <Motor_Stop_Smooth>:
/**
 * @brief  Motor Stop - All motors off with smooth deceleration
 * @retval None
 */
void Motor_Stop_Smooth(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    Motor_SetSpeed_Smooth(0, 0, 0, 0);
 8000f84:	2300      	movs	r3, #0
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f7ff fdbe 	bl	8000b0c <Motor_SetSpeed_Smooth>
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <Process_Command>:
 * @brief  Process received command
 * @param  cmd: Command character received via UART
 * @retval None
 */
void Process_Command(uint8_t cmd)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
    switch(cmd)
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	3b31      	subs	r3, #49	@ 0x31
 8000fa2:	2b29      	cmp	r3, #41	@ 0x29
 8000fa4:	f200 81b8 	bhi.w	8001318 <Process_Command+0x384>
 8000fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8000fb0 <Process_Command+0x1c>)
 8000faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fae:	bf00      	nop
 8000fb0:	080010d1 	.word	0x080010d1
 8000fb4:	0800117b 	.word	0x0800117b
 8000fb8:	08001223 	.word	0x08001223
 8000fbc:	08001319 	.word	0x08001319
 8000fc0:	08001319 	.word	0x08001319
 8000fc4:	08001319 	.word	0x08001319
 8000fc8:	08001319 	.word	0x08001319
 8000fcc:	08001319 	.word	0x08001319
 8000fd0:	08001319 	.word	0x08001319
 8000fd4:	08001319 	.word	0x08001319
 8000fd8:	08001319 	.word	0x08001319
 8000fdc:	08001319 	.word	0x08001319
 8000fe0:	08001319 	.word	0x08001319
 8000fe4:	08001319 	.word	0x08001319
 8000fe8:	08001319 	.word	0x08001319
 8000fec:	08001319 	.word	0x08001319
 8000ff0:	08001319 	.word	0x08001319
 8000ff4:	08001319 	.word	0x08001319
 8000ff8:	08001319 	.word	0x08001319
 8000ffc:	080012cf 	.word	0x080012cf
 8001000:	080010c5 	.word	0x080010c5
 8001004:	08001059 	.word	0x08001059
 8001008:	08001319 	.word	0x08001319
 800100c:	08001319 	.word	0x08001319
 8001010:	08001319 	.word	0x08001319
 8001014:	08001319 	.word	0x08001319
 8001018:	08001319 	.word	0x08001319
 800101c:	08001081 	.word	0x08001081
 8001020:	080012c7 	.word	0x080012c7
 8001024:	08001319 	.word	0x08001319
 8001028:	08001319 	.word	0x08001319
 800102c:	08001319 	.word	0x08001319
 8001030:	08001319 	.word	0x08001319
 8001034:	0800106d 	.word	0x0800106d
 8001038:	080010a9 	.word	0x080010a9
 800103c:	08001095 	.word	0x08001095
 8001040:	08001319 	.word	0x08001319
 8001044:	08001319 	.word	0x08001319
 8001048:	08001319 	.word	0x08001319
 800104c:	080012d7 	.word	0x080012d7
 8001050:	08001319 	.word	0x08001319
 8001054:	080012cf 	.word	0x080012cf
    {
        case CMD_FORWARD:
            Motor_Forward(current_speed);
 8001058:	4bb9      	ldr	r3, [pc, #740]	@ (8001340 <Process_Command+0x3ac>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff36 	bl	8000ed0 <Motor_Forward>
            last_movement_cmd = CMD_FORWARD;
 8001064:	4bb7      	ldr	r3, [pc, #732]	@ (8001344 <Process_Command+0x3b0>)
 8001066:	2246      	movs	r2, #70	@ 0x46
 8001068:	701a      	strb	r2, [r3, #0]
            break;
 800106a:	e160      	b.n	800132e <Process_Command+0x39a>
            
        case CMD_REVERSE:
            Motor_Reverse(current_speed);
 800106c:	4bb4      	ldr	r3, [pc, #720]	@ (8001340 <Process_Command+0x3ac>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff3b 	bl	8000eee <Motor_Reverse>
            last_movement_cmd = CMD_REVERSE;
 8001078:	4bb2      	ldr	r3, [pc, #712]	@ (8001344 <Process_Command+0x3b0>)
 800107a:	2252      	movs	r2, #82	@ 0x52
 800107c:	701a      	strb	r2, [r3, #0]
            break;
 800107e:	e156      	b.n	800132e <Process_Command+0x39a>
            
        case CMD_LEFT:
            Motor_Left(current_speed);
 8001080:	4baf      	ldr	r3, [pc, #700]	@ (8001340 <Process_Command+0x3ac>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff40 	bl	8000f0c <Motor_Left>
            last_movement_cmd = CMD_LEFT;
 800108c:	4bad      	ldr	r3, [pc, #692]	@ (8001344 <Process_Command+0x3b0>)
 800108e:	224c      	movs	r2, #76	@ 0x4c
 8001090:	701a      	strb	r2, [r3, #0]
            break;
 8001092:	e14c      	b.n	800132e <Process_Command+0x39a>
            
        case CMD_RIGHT:
            Motor_Right(current_speed);
 8001094:	4baa      	ldr	r3, [pc, #680]	@ (8001340 <Process_Command+0x3ac>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff45 	bl	8000f2a <Motor_Right>
            last_movement_cmd = CMD_RIGHT;
 80010a0:	4ba8      	ldr	r3, [pc, #672]	@ (8001344 <Process_Command+0x3b0>)
 80010a2:	2254      	movs	r2, #84	@ 0x54
 80010a4:	701a      	strb	r2, [r3, #0]
            break;
 80010a6:	e142      	b.n	800132e <Process_Command+0x39a>
            
        case CMD_STOP:
            if (accel_enabled)
 80010a8:	4ba7      	ldr	r3, [pc, #668]	@ (8001348 <Process_Command+0x3b4>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d002      	beq.n	80010b8 <Process_Command+0x124>
                Motor_Stop_Smooth();  // Smooth stop if accel enabled
 80010b2:	f7ff ff65 	bl	8000f80 <Motor_Stop_Smooth>
 80010b6:	e001      	b.n	80010bc <Process_Command+0x128>
            else
                Motor_Stop();         // Instant stop if accel disabled
 80010b8:	f7ff ff58 	bl	8000f6c <Motor_Stop>
            last_movement_cmd = CMD_STOP;
 80010bc:	4ba1      	ldr	r3, [pc, #644]	@ (8001344 <Process_Command+0x3b0>)
 80010be:	2253      	movs	r2, #83	@ 0x53
 80010c0:	701a      	strb	r2, [r3, #0]
            break;
 80010c2:	e134      	b.n	800132e <Process_Command+0x39a>
        
        case 'E': // Emergency stop alias from UI
            Motor_Stop();
 80010c4:	f7ff ff52 	bl	8000f6c <Motor_Stop>
            last_movement_cmd = CMD_STOP;
 80010c8:	4b9e      	ldr	r3, [pc, #632]	@ (8001344 <Process_Command+0x3b0>)
 80010ca:	2253      	movs	r2, #83	@ 0x53
 80010cc:	701a      	strb	r2, [r3, #0]
            break;
 80010ce:	e12e      	b.n	800132e <Process_Command+0x39a>
            
        case CMD_SPEED_SLOW:
            current_speed = SPEED_SLOW;
 80010d0:	4b9b      	ldr	r3, [pc, #620]	@ (8001340 <Process_Command+0x3ac>)
 80010d2:	2228      	movs	r2, #40	@ 0x28
 80010d4:	701a      	strb	r2, [r3, #0]
            // If motors are moving, ramp to new speed smoothly
            if (motors_moving && last_movement_cmd != CMD_STOP)
 80010d6:	4b9d      	ldr	r3, [pc, #628]	@ (800134c <Process_Command+0x3b8>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 8121 	beq.w	8001324 <Process_Command+0x390>
 80010e2:	4b98      	ldr	r3, [pc, #608]	@ (8001344 <Process_Command+0x3b0>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b53      	cmp	r3, #83	@ 0x53
 80010ea:	f000 811b 	beq.w	8001324 <Process_Command+0x390>
            {
                // Re-issue last movement command with new speed
                switch(last_movement_cmd)
 80010ee:	4b95      	ldr	r3, [pc, #596]	@ (8001344 <Process_Command+0x3b0>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	3b46      	subs	r3, #70	@ 0x46
 80010f6:	2b0e      	cmp	r3, #14
 80010f8:	f200 8114 	bhi.w	8001324 <Process_Command+0x390>
 80010fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001104 <Process_Command+0x170>)
 80010fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001102:	bf00      	nop
 8001104:	08001141 	.word	0x08001141
 8001108:	08001325 	.word	0x08001325
 800110c:	08001325 	.word	0x08001325
 8001110:	08001325 	.word	0x08001325
 8001114:	08001325 	.word	0x08001325
 8001118:	08001325 	.word	0x08001325
 800111c:	0800115d 	.word	0x0800115d
 8001120:	08001325 	.word	0x08001325
 8001124:	08001325 	.word	0x08001325
 8001128:	08001325 	.word	0x08001325
 800112c:	08001325 	.word	0x08001325
 8001130:	08001325 	.word	0x08001325
 8001134:	0800114f 	.word	0x0800114f
 8001138:	08001325 	.word	0x08001325
 800113c:	0800116b 	.word	0x0800116b
                {
                    case CMD_FORWARD:
                        Motor_Forward(current_speed);
 8001140:	4b7f      	ldr	r3, [pc, #508]	@ (8001340 <Process_Command+0x3ac>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fec2 	bl	8000ed0 <Motor_Forward>
                        break;
 800114c:	e014      	b.n	8001178 <Process_Command+0x1e4>
                    case CMD_REVERSE:
                        Motor_Reverse(current_speed);
 800114e:	4b7c      	ldr	r3, [pc, #496]	@ (8001340 <Process_Command+0x3ac>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff feca 	bl	8000eee <Motor_Reverse>
                        break;
 800115a:	e00d      	b.n	8001178 <Process_Command+0x1e4>
                    case CMD_LEFT:
                        Motor_Left(current_speed);
 800115c:	4b78      	ldr	r3, [pc, #480]	@ (8001340 <Process_Command+0x3ac>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fed2 	bl	8000f0c <Motor_Left>
                        break;
 8001168:	e006      	b.n	8001178 <Process_Command+0x1e4>
                    case CMD_RIGHT:
                        Motor_Right(current_speed);
 800116a:	4b75      	ldr	r3, [pc, #468]	@ (8001340 <Process_Command+0x3ac>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff feda 	bl	8000f2a <Motor_Right>
                        break;
 8001176:	bf00      	nop
                }
            }
            break;
 8001178:	e0d4      	b.n	8001324 <Process_Command+0x390>
            
        case CMD_SPEED_MEDIUM:
            current_speed = SPEED_MEDIUM;
 800117a:	4b71      	ldr	r3, [pc, #452]	@ (8001340 <Process_Command+0x3ac>)
 800117c:	2246      	movs	r2, #70	@ 0x46
 800117e:	701a      	strb	r2, [r3, #0]
            // If motors are moving, ramp to new speed smoothly
            if (motors_moving && last_movement_cmd != CMD_STOP)
 8001180:	4b72      	ldr	r3, [pc, #456]	@ (800134c <Process_Command+0x3b8>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80ce 	beq.w	8001328 <Process_Command+0x394>
 800118c:	4b6d      	ldr	r3, [pc, #436]	@ (8001344 <Process_Command+0x3b0>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b53      	cmp	r3, #83	@ 0x53
 8001194:	f000 80c8 	beq.w	8001328 <Process_Command+0x394>
            {
                // Re-issue last movement command with new speed
                switch(last_movement_cmd)
 8001198:	4b6a      	ldr	r3, [pc, #424]	@ (8001344 <Process_Command+0x3b0>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	3b46      	subs	r3, #70	@ 0x46
 80011a0:	2b0e      	cmp	r3, #14
 80011a2:	f200 80c1 	bhi.w	8001328 <Process_Command+0x394>
 80011a6:	a201      	add	r2, pc, #4	@ (adr r2, 80011ac <Process_Command+0x218>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	080011e9 	.word	0x080011e9
 80011b0:	08001329 	.word	0x08001329
 80011b4:	08001329 	.word	0x08001329
 80011b8:	08001329 	.word	0x08001329
 80011bc:	08001329 	.word	0x08001329
 80011c0:	08001329 	.word	0x08001329
 80011c4:	08001205 	.word	0x08001205
 80011c8:	08001329 	.word	0x08001329
 80011cc:	08001329 	.word	0x08001329
 80011d0:	08001329 	.word	0x08001329
 80011d4:	08001329 	.word	0x08001329
 80011d8:	08001329 	.word	0x08001329
 80011dc:	080011f7 	.word	0x080011f7
 80011e0:	08001329 	.word	0x08001329
 80011e4:	08001213 	.word	0x08001213
                {
                    case CMD_FORWARD:
                        Motor_Forward(current_speed);
 80011e8:	4b55      	ldr	r3, [pc, #340]	@ (8001340 <Process_Command+0x3ac>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fe6e 	bl	8000ed0 <Motor_Forward>
                        break;
 80011f4:	e014      	b.n	8001220 <Process_Command+0x28c>
                    case CMD_REVERSE:
                        Motor_Reverse(current_speed);
 80011f6:	4b52      	ldr	r3, [pc, #328]	@ (8001340 <Process_Command+0x3ac>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fe76 	bl	8000eee <Motor_Reverse>
                        break;
 8001202:	e00d      	b.n	8001220 <Process_Command+0x28c>
                    case CMD_LEFT:
                        Motor_Left(current_speed);
 8001204:	4b4e      	ldr	r3, [pc, #312]	@ (8001340 <Process_Command+0x3ac>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fe7e 	bl	8000f0c <Motor_Left>
                        break;
 8001210:	e006      	b.n	8001220 <Process_Command+0x28c>
                    case CMD_RIGHT:
                        Motor_Right(current_speed);
 8001212:	4b4b      	ldr	r3, [pc, #300]	@ (8001340 <Process_Command+0x3ac>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fe86 	bl	8000f2a <Motor_Right>
                        break;
 800121e:	bf00      	nop
                }
            }
            break;
 8001220:	e082      	b.n	8001328 <Process_Command+0x394>
            
        case CMD_SPEED_FAST:
            current_speed = SPEED_FAST;
 8001222:	4b47      	ldr	r3, [pc, #284]	@ (8001340 <Process_Command+0x3ac>)
 8001224:	2264      	movs	r2, #100	@ 0x64
 8001226:	701a      	strb	r2, [r3, #0]
            // If motors are moving, ramp to new speed smoothly
            if (motors_moving && last_movement_cmd != CMD_STOP)
 8001228:	4b48      	ldr	r3, [pc, #288]	@ (800134c <Process_Command+0x3b8>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d07c      	beq.n	800132c <Process_Command+0x398>
 8001232:	4b44      	ldr	r3, [pc, #272]	@ (8001344 <Process_Command+0x3b0>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b53      	cmp	r3, #83	@ 0x53
 800123a:	d077      	beq.n	800132c <Process_Command+0x398>
            {
                // Re-issue last movement command with new speed
                switch(last_movement_cmd)
 800123c:	4b41      	ldr	r3, [pc, #260]	@ (8001344 <Process_Command+0x3b0>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	3b46      	subs	r3, #70	@ 0x46
 8001244:	2b0e      	cmp	r3, #14
 8001246:	d871      	bhi.n	800132c <Process_Command+0x398>
 8001248:	a201      	add	r2, pc, #4	@ (adr r2, 8001250 <Process_Command+0x2bc>)
 800124a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124e:	bf00      	nop
 8001250:	0800128d 	.word	0x0800128d
 8001254:	0800132d 	.word	0x0800132d
 8001258:	0800132d 	.word	0x0800132d
 800125c:	0800132d 	.word	0x0800132d
 8001260:	0800132d 	.word	0x0800132d
 8001264:	0800132d 	.word	0x0800132d
 8001268:	080012a9 	.word	0x080012a9
 800126c:	0800132d 	.word	0x0800132d
 8001270:	0800132d 	.word	0x0800132d
 8001274:	0800132d 	.word	0x0800132d
 8001278:	0800132d 	.word	0x0800132d
 800127c:	0800132d 	.word	0x0800132d
 8001280:	0800129b 	.word	0x0800129b
 8001284:	0800132d 	.word	0x0800132d
 8001288:	080012b7 	.word	0x080012b7
                {
                    case CMD_FORWARD:
                        Motor_Forward(current_speed);
 800128c:	4b2c      	ldr	r3, [pc, #176]	@ (8001340 <Process_Command+0x3ac>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fe1c 	bl	8000ed0 <Motor_Forward>
                        break;
 8001298:	e014      	b.n	80012c4 <Process_Command+0x330>
                    case CMD_REVERSE:
                        Motor_Reverse(current_speed);
 800129a:	4b29      	ldr	r3, [pc, #164]	@ (8001340 <Process_Command+0x3ac>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fe24 	bl	8000eee <Motor_Reverse>
                        break;
 80012a6:	e00d      	b.n	80012c4 <Process_Command+0x330>
                    case CMD_LEFT:
                        Motor_Left(current_speed);
 80012a8:	4b25      	ldr	r3, [pc, #148]	@ (8001340 <Process_Command+0x3ac>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fe2c 	bl	8000f0c <Motor_Left>
                        break;
 80012b4:	e006      	b.n	80012c4 <Process_Command+0x330>
                    case CMD_RIGHT:
                        Motor_Right(current_speed);
 80012b6:	4b22      	ldr	r3, [pc, #136]	@ (8001340 <Process_Command+0x3ac>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fe34 	bl	8000f2a <Motor_Right>
                        break;
 80012c2:	bf00      	nop
                }
            }
            break;
 80012c4:	e032      	b.n	800132c <Process_Command+0x398>
            
        case CMD_ACCEL_ENABLE:
            accel_enabled = true;
 80012c6:	4b20      	ldr	r3, [pc, #128]	@ (8001348 <Process_Command+0x3b4>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
            break;
 80012cc:	e02f      	b.n	800132e <Process_Command+0x39a>
            
        case CMD_ACCEL_DISABLE:
        case CMD_ACCEL_DISABLE_ALT: // 'Z' and 'D' both disable
            accel_enabled = false;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001348 <Process_Command+0x3b4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
            break;
 80012d4:	e02b      	b.n	800132e <Process_Command+0x39a>
        
        case CMD_SELF_TEST: // now 'X'
        {
            bool prev_accel = accel_enabled;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001348 <Process_Command+0x3b4>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	73fb      	strb	r3, [r7, #15]
            accel_enabled = false; // instant steps during test
 80012dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001348 <Process_Command+0x3b4>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
            /* Simple on-demand test: forward 40/70/100%, then stop */
            Motor_Forward(40); osDelay(1000);
 80012e2:	2028      	movs	r0, #40	@ 0x28
 80012e4:	f7ff fdf4 	bl	8000ed0 <Motor_Forward>
 80012e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012ec:	f002 f944 	bl	8003578 <osDelay>
            Motor_Forward(70); osDelay(1000);
 80012f0:	2046      	movs	r0, #70	@ 0x46
 80012f2:	f7ff fded 	bl	8000ed0 <Motor_Forward>
 80012f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012fa:	f002 f93d 	bl	8003578 <osDelay>
            Motor_Forward(100); osDelay(1000);
 80012fe:	2064      	movs	r0, #100	@ 0x64
 8001300:	f7ff fde6 	bl	8000ed0 <Motor_Forward>
 8001304:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001308:	f002 f936 	bl	8003578 <osDelay>
            Motor_Stop();
 800130c:	f7ff fe2e 	bl	8000f6c <Motor_Stop>
            accel_enabled = prev_accel;
 8001310:	4a0d      	ldr	r2, [pc, #52]	@ (8001348 <Process_Command+0x3b4>)
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	7013      	strb	r3, [r2, #0]
            break;
 8001316:	e00a      	b.n	800132e <Process_Command+0x39a>
        }
            
        default:
            // Invalid command - do nothing or stop for safety
            Motor_Stop();
 8001318:	f7ff fe28 	bl	8000f6c <Motor_Stop>
            last_movement_cmd = CMD_STOP;
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <Process_Command+0x3b0>)
 800131e:	2253      	movs	r2, #83	@ 0x53
 8001320:	701a      	strb	r2, [r3, #0]
            break;
 8001322:	e004      	b.n	800132e <Process_Command+0x39a>
            break;
 8001324:	bf00      	nop
 8001326:	e002      	b.n	800132e <Process_Command+0x39a>
            break;
 8001328:	bf00      	nop
 800132a:	e000      	b.n	800132e <Process_Command+0x39a>
            break;
 800132c:	bf00      	nop
    }
    
    // Update last command time
    last_command_time = HAL_GetTick();
 800132e:	f000 fb87 	bl	8001a40 <HAL_GetTick>
 8001332:	4603      	mov	r3, r0
 8001334:	4a06      	ldr	r2, [pc, #24]	@ (8001350 <Process_Command+0x3bc>)
 8001336:	6013      	str	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000000 	.word	0x20000000
 8001344:	20000002 	.word	0x20000002
 8001348:	20000001 	.word	0x20000001
 800134c:	20000385 	.word	0x20000385
 8001350:	2000037c 	.word	0x2000037c

08001354 <Safety_Check>:
/**
 * @brief  Safety check - emergency stop if no command received
 * @retval None
 */
void Safety_Check(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
    if ((HAL_GetTick() - last_command_time) > SAFETY_TIMEOUT_MS)
 8001358:	f000 fb72 	bl	8001a40 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <Safety_Check+0x20>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001368:	d901      	bls.n	800136e <Safety_Check+0x1a>
    {
        Motor_Stop();
 800136a:	f7ff fdff 	bl	8000f6c <Motor_Stop>
    }
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000037c 	.word	0x2000037c

08001378 <USART1_IRQHandler>:
 * @brief  USART1 Interrupt Handler
 * @note   Handles received data and errors
 * @retval None
 */
void USART1_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
    /* Check for RXNE (Receive Data Register Not Empty) */
    if (USART1->SR & USART_SR_RXNE)
 800137e:	4b30      	ldr	r3, [pc, #192]	@ (8001440 <USART1_IRQHandler+0xc8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0320 	and.w	r3, r3, #32
 8001386:	2b00      	cmp	r3, #0
 8001388:	d017      	beq.n	80013ba <USART1_IRQHandler+0x42>
    {
        /* Toggle RX LED to indicate activity */
        HAL_GPIO_TogglePin(LED_PORT, LED_RX_PIN);
 800138a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800138e:	482d      	ldr	r0, [pc, #180]	@ (8001444 <USART1_IRQHandler+0xcc>)
 8001390:	f000 fdf9 	bl	8001f86 <HAL_GPIO_TogglePin>
        
        /* Read data register (clears RXNE flag) */
    rx_data = (uint8_t)(USART1->DR & 0xFF);
 8001394:	4b2a      	ldr	r3, [pc, #168]	@ (8001440 <USART1_IRQHandler+0xc8>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4b2b      	ldr	r3, [pc, #172]	@ (8001448 <USART1_IRQHandler+0xd0>)
 800139c:	701a      	strb	r2, [r3, #0]
    /* Push received byte into the UART command queue (ISR-safe) */
    if (uartCmdQueueHandle != NULL)
 800139e:	4b2b      	ldr	r3, [pc, #172]	@ (800144c <USART1_IRQHandler+0xd4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d009      	beq.n	80013ba <USART1_IRQHandler+0x42>
    {
      osMessagePut(uartCmdQueueHandle, rx_data, 0);
 80013a6:	4b29      	ldr	r3, [pc, #164]	@ (800144c <USART1_IRQHandler+0xd4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a27      	ldr	r2, [pc, #156]	@ (8001448 <USART1_IRQHandler+0xd0>)
 80013ac:	7812      	ldrb	r2, [r2, #0]
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	4611      	mov	r1, r2
 80013b2:	2200      	movs	r2, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 f91b 	bl	80035f0 <osMessagePut>
    }
    }
    
    /* Check for TXE (Transmit Data Register Empty) - indicates TX activity */
    if (USART1->SR & USART_SR_TXE)
 80013ba:	4b21      	ldr	r3, [pc, #132]	@ (8001440 <USART1_IRQHandler+0xc8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d004      	beq.n	80013d0 <USART1_IRQHandler+0x58>
    {
        /* Toggle TX LED to indicate activity (optional) */
        HAL_GPIO_TogglePin(LED_PORT, LED_TX_PIN);
 80013c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013ca:	481e      	ldr	r0, [pc, #120]	@ (8001444 <USART1_IRQHandler+0xcc>)
 80013cc:	f000 fddb 	bl	8001f86 <HAL_GPIO_TogglePin>
    }
    
    /* Check for errors */
    if (USART1->SR & USART_SR_ORE)  // Overrun error
 80013d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <USART1_IRQHandler+0xc8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0308 	and.w	r3, r3, #8
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <USART1_IRQHandler+0x72>
    {
        uart_error = true;
 80013dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001450 <USART1_IRQHandler+0xd8>)
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]
        volatile uint32_t dummy = USART1->DR;  // Clear ORE flag
 80013e2:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <USART1_IRQHandler+0xc8>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	60fb      	str	r3, [r7, #12]
        (void)dummy;  // Avoid unused variable warning
 80013e8:	68fb      	ldr	r3, [r7, #12]
    }
    
    if (USART1->SR & USART_SR_FE)   // Framing error
 80013ea:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <USART1_IRQHandler+0xc8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <USART1_IRQHandler+0x8c>
    {
        uart_error = true;
 80013f6:	4b16      	ldr	r3, [pc, #88]	@ (8001450 <USART1_IRQHandler+0xd8>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	701a      	strb	r2, [r3, #0]
        volatile uint32_t dummy = USART1->DR;  // Clear FE flag
 80013fc:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <USART1_IRQHandler+0xc8>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	60bb      	str	r3, [r7, #8]
        (void)dummy;
 8001402:	68bb      	ldr	r3, [r7, #8]
    }
    
    if (USART1->SR & USART_SR_NE)   // Noise error
 8001404:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <USART1_IRQHandler+0xc8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b00      	cmp	r3, #0
 800140e:	d006      	beq.n	800141e <USART1_IRQHandler+0xa6>
    {
        uart_error = true;
 8001410:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <USART1_IRQHandler+0xd8>)
 8001412:	2201      	movs	r2, #1
 8001414:	701a      	strb	r2, [r3, #0]
        volatile uint32_t dummy = USART1->DR;  // Clear NE flag
 8001416:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <USART1_IRQHandler+0xc8>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	607b      	str	r3, [r7, #4]
        (void)dummy;
 800141c:	687b      	ldr	r3, [r7, #4]
    }
    
    if (USART1->SR & USART_SR_PE)   // Parity error
 800141e:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <USART1_IRQHandler+0xc8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d006      	beq.n	8001438 <USART1_IRQHandler+0xc0>
    {
        uart_error = true;
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <USART1_IRQHandler+0xd8>)
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
        volatile uint32_t dummy = USART1->DR;  // Clear PE flag
 8001430:	4b03      	ldr	r3, [pc, #12]	@ (8001440 <USART1_IRQHandler+0xc8>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	603b      	str	r3, [r7, #0]
        (void)dummy;
 8001436:	683b      	ldr	r3, [r7, #0]
    }
}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40011000 	.word	0x40011000
 8001444:	40020800 	.word	0x40020800
 8001448:	20000378 	.word	0x20000378
 800144c:	20000374 	.word	0x20000374
 8001450:	20000380 	.word	0x20000380

08001454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001454:	b5b0      	push	{r4, r5, r7, lr}
 8001456:	b09a      	sub	sp, #104	@ 0x68
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145a:	f000 fabb 	bl	80019d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800145e:	f000 f86f 	bl	8001540 <SystemClock_Config>

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  
  /* Initialize GPIO for motor control and UART */
  GPIO_Init();
 8001462:	f7ff f95d 	bl	8000720 <GPIO_Init>
  
    /* Initialize TIM5 for PWM motor control */
    TIM5_PWM_Init();
 8001466:	f7ff fa0f 	bl	8000888 <TIM5_PWM_Init>
  
  /* Initialize USART1 for command reception */
  USART1_Init();
 800146a:	f7ff fa91 	bl	8000990 <USART1_Init>

#if ULTRASONIC_ENABLED
    /* Initialize Ultrasonic sensors */
    Ultrasonic_Init();
 800146e:	f7ff f92d 	bl	80006cc <Ultrasonic_Init>
#endif
  
  /* Initialize safety timer */
  last_command_time = HAL_GetTick();
 8001472:	f000 fae5 	bl	8001a40 <HAL_GetTick>
 8001476:	4603      	mov	r3, r0
 8001478:	4a28      	ldr	r2, [pc, #160]	@ (800151c <main+0xc8>)
 800147a:	6013      	str	r3, [r2, #0]
  
  /* Start with motors stopped */
  Motor_Stop();
 800147c:	f7ff fd76 	bl	8000f6c <Motor_Stop>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* Create UART command queue (stores command bytes) */
  osMessageQDef(uartCmdQueue, 32, uint16_t);
 8001480:	4b27      	ldr	r3, [pc, #156]	@ (8001520 <main+0xcc>)
 8001482:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001486:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uartCmdQueueHandle = osMessageCreate(osMessageQ(uartCmdQueue), NULL);
 800148c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f002 f884 	bl	80035a0 <osMessageCreate>
 8001498:	4603      	mov	r3, r0
 800149a:	4a22      	ldr	r2, [pc, #136]	@ (8001524 <main+0xd0>)
 800149c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800149e:	4b22      	ldr	r3, [pc, #136]	@ (8001528 <main+0xd4>)
 80014a0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80014a4:	461d      	mov	r5, r3
 80014a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80014b2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 f811 	bl	80034e0 <osThreadCreate>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a1a      	ldr	r2, [pc, #104]	@ (800152c <main+0xd8>)
 80014c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorTask */
  osThreadDef(motorTask, StartMotorTask, osPriorityAboveNormal, 0, 256);
 80014c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <main+0xdc>)
 80014c6:	f107 0420 	add.w	r4, r7, #32
 80014ca:	461d      	mov	r5, r3
 80014cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 80014d8:	f107 0320 	add.w	r3, r7, #32
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 fffe 	bl	80034e0 <osThreadCreate>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a13      	ldr	r2, [pc, #76]	@ (8001534 <main+0xe0>)
 80014e8:	6013      	str	r3, [r2, #0]

#if ULTRASONIC_ENABLED
    /* definition and creation of ultrasonicTask */
    osThreadDef(ultrasonicTask, StartUltrasonicTask, osPriorityNormal, 0, 256);
 80014ea:	4b13      	ldr	r3, [pc, #76]	@ (8001538 <main+0xe4>)
 80014ec:	1d3c      	adds	r4, r7, #4
 80014ee:	461d      	mov	r5, r3
 80014f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ultrasonicTaskHandle = osThreadCreate(osThread(ultrasonicTask), NULL);
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f001 ffed 	bl	80034e0 <osThreadCreate>
 8001506:	4603      	mov	r3, r0
 8001508:	4a0c      	ldr	r2, [pc, #48]	@ (800153c <main+0xe8>)
 800150a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800150c:	f001 ffe1 	bl	80034d2 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
    // Main loop is now managed by FreeRTOS tasks
    osDelay(1000); // Idle loop, should never reach here
 8001510:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001514:	f002 f830 	bl	8003578 <osDelay>
 8001518:	e7fa      	b.n	8001510 <main+0xbc>
 800151a:	bf00      	nop
 800151c:	2000037c 	.word	0x2000037c
 8001520:	08005c10 	.word	0x08005c10
 8001524:	20000374 	.word	0x20000374
 8001528:	08005c2c 	.word	0x08005c2c
 800152c:	20000368 	.word	0x20000368
 8001530:	08005c54 	.word	0x08005c54
 8001534:	2000036c 	.word	0x2000036c
 8001538:	08005c80 	.word	0x08005c80
 800153c:	20000370 	.word	0x20000370

08001540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b094      	sub	sp, #80	@ 0x50
 8001544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001546:	f107 0320 	add.w	r3, r7, #32
 800154a:	2230      	movs	r2, #48	@ 0x30
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f004 fa62 	bl	8005a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	4b23      	ldr	r3, [pc, #140]	@ (80015f8 <SystemClock_Config+0xb8>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	4a22      	ldr	r2, [pc, #136]	@ (80015f8 <SystemClock_Config+0xb8>)
 800156e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001572:	6413      	str	r3, [r2, #64]	@ 0x40
 8001574:	4b20      	ldr	r3, [pc, #128]	@ (80015f8 <SystemClock_Config+0xb8>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001580:	2300      	movs	r3, #0
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	4b1d      	ldr	r3, [pc, #116]	@ (80015fc <SystemClock_Config+0xbc>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800158c:	4a1b      	ldr	r2, [pc, #108]	@ (80015fc <SystemClock_Config+0xbc>)
 800158e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <SystemClock_Config+0xbc>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a0:	2302      	movs	r3, #2
 80015a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a4:	2301      	movs	r3, #1
 80015a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015a8:	2310      	movs	r3, #16
 80015aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b0:	f107 0320 	add.w	r3, r7, #32
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 fd01 	bl	8001fbc <HAL_RCC_OscConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80015c0:	f000 f8f7 	bl	80017b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c4:	230f      	movs	r3, #15
 80015c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 ff64 	bl	80024ac <HAL_RCC_ClockConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80015ea:	f000 f8e2 	bl	80017b2 <Error_Handler>
  }
}
 80015ee:	bf00      	nop
 80015f0:	3750      	adds	r7, #80	@ 0x50
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40007000 	.word	0x40007000

08001600 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Housekeeping/idle task */
  for(;;)
  {
  /* Blink a heartbeat so you can see the RTOS is running */
  HAL_GPIO_TogglePin(HEARTBEAT_LED_PORT, HEARTBEAT_LED_PIN);
 8001608:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800160c:	4803      	ldr	r0, [pc, #12]	@ (800161c <StartDefaultTask+0x1c>)
 800160e:	f000 fcba 	bl	8001f86 <HAL_GPIO_TogglePin>
    osDelay(250);
 8001612:	20fa      	movs	r0, #250	@ 0xfa
 8001614:	f001 ffb0 	bl	8003578 <osDelay>
  HAL_GPIO_TogglePin(HEARTBEAT_LED_PORT, HEARTBEAT_LED_PIN);
 8001618:	bf00      	nop
 800161a:	e7f5      	b.n	8001608 <StartDefaultTask+0x8>
 800161c:	40020400 	.word	0x40020400

08001620 <StartMotorTask>:
/**
  * @brief  Function implementing the motorTask thread.
  *         Receives UART bytes from queue and drives motors.
  */
void StartMotorTask(void const * argument)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
            Motor_Stop();
            accel_enabled = prev_accel;
            self_test_done = true;
        }
    /* Wait up to 10ms for a new command */
    osEvent evt = osMessageGet(uartCmdQueueHandle, 10);
 8001628:	4b10      	ldr	r3, [pc, #64]	@ (800166c <StartMotorTask+0x4c>)
 800162a:	6819      	ldr	r1, [r3, #0]
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	220a      	movs	r2, #10
 8001632:	4618      	mov	r0, r3
 8001634:	f002 f81c 	bl	8003670 <osMessageGet>
    if (evt.status == osEventMessage)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2b10      	cmp	r3, #16
 800163c:	d108      	bne.n	8001650 <StartMotorTask+0x30>
    {
        uint8_t cmd = (uint8_t)(evt.value.v & 0xFF);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	75fb      	strb	r3, [r7, #23]
        Process_Command(cmd);
 8001642:	7dfb      	ldrb	r3, [r7, #23]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fca5 	bl	8000f94 <Process_Command>
        uart_error = false; // Clear error on good cmd
 800164a:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <StartMotorTask+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
    }

    /* Periodic safety check */
    Safety_Check();
 8001650:	f7ff fe80 	bl	8001354 <Safety_Check>

    /* If an error was flagged by IRQ, react safely */
    if (uart_error)
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <StartMotorTask+0x50>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0e4      	beq.n	8001628 <StartMotorTask+0x8>
    {
        Motor_Stop();
 800165e:	f7ff fc85 	bl	8000f6c <Motor_Stop>
        uart_error = false;
 8001662:	4b03      	ldr	r3, [pc, #12]	@ (8001670 <StartMotorTask+0x50>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
  {
 8001668:	e7de      	b.n	8001628 <StartMotorTask+0x8>
 800166a:	bf00      	nop
 800166c:	20000374 	.word	0x20000374
 8001670:	20000380 	.word	0x20000380

08001674 <StartUltrasonicTask>:
    * @brief  Function implementing the ultrasonicTask thread.
    *         Continuously measures side distances and applies wall avoidance.
    */
/* USER CODE END Header_StartUltrasonicTask */
void StartUltrasonicTask(void const * argument)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	@ 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
    for(;;)
    {
        /* Measure left (A) and right (B) distances */
        uint16_t left = Ultrasonic_MeasureA();
 800167c:	f7ff f834 	bl	80006e8 <Ultrasonic_MeasureA>
 8001680:	4603      	mov	r3, r0
 8001682:	83fb      	strh	r3, [r7, #30]
        uint16_t right = Ultrasonic_MeasureB();
 8001684:	f7ff f83e 	bl	8000704 <Ultrasonic_MeasureB>
 8001688:	4603      	mov	r3, r0
 800168a:	83bb      	strh	r3, [r7, #28]
        ultrasonic_left_cm = left;
 800168c:	4a3c      	ldr	r2, [pc, #240]	@ (8001780 <StartUltrasonicTask+0x10c>)
 800168e:	8bfb      	ldrh	r3, [r7, #30]
 8001690:	8013      	strh	r3, [r2, #0]
        ultrasonic_right_cm = right;
 8001692:	4a3c      	ldr	r2, [pc, #240]	@ (8001784 <StartUltrasonicTask+0x110>)
 8001694:	8bbb      	ldrh	r3, [r7, #28]
 8001696:	8013      	strh	r3, [r2, #0]

        /* Emergency stop if any side is dangerously close */
        if ((left > 0 && left <= COLLISION_DISTANCE_STOP) ||
 8001698:	8bfb      	ldrh	r3, [r7, #30]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d002      	beq.n	80016a4 <StartUltrasonicTask+0x30>
 800169e:	8bfb      	ldrh	r3, [r7, #30]
 80016a0:	2b0f      	cmp	r3, #15
 80016a2:	d905      	bls.n	80016b0 <StartUltrasonicTask+0x3c>
 80016a4:	8bbb      	ldrh	r3, [r7, #28]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00e      	beq.n	80016c8 <StartUltrasonicTask+0x54>
                (right > 0 && right <= COLLISION_DISTANCE_STOP))
 80016aa:	8bbb      	ldrh	r3, [r7, #28]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d80b      	bhi.n	80016c8 <StartUltrasonicTask+0x54>
        {
                Motor_Stop();
 80016b0:	f7ff fc5c 	bl	8000f6c <Motor_Stop>
                last_movement_cmd = CMD_STOP;
 80016b4:	4b34      	ldr	r3, [pc, #208]	@ (8001788 <StartUltrasonicTask+0x114>)
 80016b6:	2253      	movs	r2, #83	@ 0x53
 80016b8:	701a      	strb	r2, [r3, #0]
                motors_moving = false;
 80016ba:	4b34      	ldr	r3, [pc, #208]	@ (800178c <StartUltrasonicTask+0x118>)
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
                osDelay(ULTRASONIC_MEASURE_INTERVAL_MS);
 80016c0:	2032      	movs	r0, #50	@ 0x32
 80016c2:	f001 ff59 	bl	8003578 <osDelay>
                continue;
 80016c6:	e05a      	b.n	800177e <StartUltrasonicTask+0x10a>
        }

        /* Apply gentle steering only when moving forward */
        if (last_movement_cmd == CMD_FORWARD && motors_moving)
 80016c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001788 <StartUltrasonicTask+0x114>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b46      	cmp	r3, #70	@ 0x46
 80016d0:	d152      	bne.n	8001778 <StartUltrasonicTask+0x104>
 80016d2:	4b2e      	ldr	r3, [pc, #184]	@ (800178c <StartUltrasonicTask+0x118>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d04d      	beq.n	8001778 <StartUltrasonicTask+0x104>
        {
                int base = (int)current_speed;
 80016dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001790 <StartUltrasonicTask+0x11c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	61bb      	str	r3, [r7, #24]
                int left_cmd = base;
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
                int right_cmd = base;
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	623b      	str	r3, [r7, #32]

                /* If left wall too close, reduce left speed to steer right */
                if (left > 0 && left < COLLISION_DISTANCE_SLOW)
 80016ec:	8bfb      	ldrh	r3, [r7, #30]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00d      	beq.n	800170e <StartUltrasonicTask+0x9a>
 80016f2:	8bfb      	ldrh	r3, [r7, #30]
 80016f4:	2b1d      	cmp	r3, #29
 80016f6:	d80a      	bhi.n	800170e <StartUltrasonicTask+0x9a>
                {
                        int delta_cm = (int)COLLISION_DISTANCE_SLOW - (int)left; // positive inside zone
 80016f8:	8bfb      	ldrh	r3, [r7, #30]
 80016fa:	f1c3 031e 	rsb	r3, r3, #30
 80016fe:	617b      	str	r3, [r7, #20]
                        int corr = delta_cm * WALL_CORR_GAIN_PCT_PER_CM; // % reduction
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	613b      	str	r3, [r7, #16]
                        left_cmd -= corr;
 8001706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* If right wall too close, reduce right speed to steer left */
                if (right > 0 && right < COLLISION_DISTANCE_SLOW)
 800170e:	8bbb      	ldrh	r3, [r7, #28]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00d      	beq.n	8001730 <StartUltrasonicTask+0xbc>
 8001714:	8bbb      	ldrh	r3, [r7, #28]
 8001716:	2b1d      	cmp	r3, #29
 8001718:	d80a      	bhi.n	8001730 <StartUltrasonicTask+0xbc>
                {
                        int delta_cm = (int)COLLISION_DISTANCE_SLOW - (int)right;
 800171a:	8bbb      	ldrh	r3, [r7, #28]
 800171c:	f1c3 031e 	rsb	r3, r3, #30
 8001720:	60fb      	str	r3, [r7, #12]
                        int corr = delta_cm * WALL_CORR_GAIN_PCT_PER_CM;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
                        right_cmd -= corr;
 8001728:	6a3a      	ldr	r2, [r7, #32]
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	623b      	str	r3, [r7, #32]
                }

        /* Clamp speeds */
        if (left_cmd < 0) {
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	2b00      	cmp	r3, #0
 8001734:	da01      	bge.n	800173a <StartUltrasonicTask+0xc6>
            left_cmd = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        if (left_cmd > 100) {
 800173a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173c:	2b64      	cmp	r3, #100	@ 0x64
 800173e:	dd01      	ble.n	8001744 <StartUltrasonicTask+0xd0>
            left_cmd = 100;
 8001740:	2364      	movs	r3, #100	@ 0x64
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        if (right_cmd < 0) {
 8001744:	6a3b      	ldr	r3, [r7, #32]
 8001746:	2b00      	cmp	r3, #0
 8001748:	da01      	bge.n	800174e <StartUltrasonicTask+0xda>
            right_cmd = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
        }
        if (right_cmd > 100) {
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	2b64      	cmp	r3, #100	@ 0x64
 8001752:	dd01      	ble.n	8001758 <StartUltrasonicTask+0xe4>
            right_cmd = 100;
 8001754:	2364      	movs	r3, #100	@ 0x64
 8001756:	623b      	str	r3, [r7, #32]
        }

                /* Only update if any correction applied */
                if (left_cmd != base || right_cmd != base)
 8001758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	429a      	cmp	r2, r3
 800175e:	d103      	bne.n	8001768 <StartUltrasonicTask+0xf4>
 8001760:	6a3a      	ldr	r2, [r7, #32]
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	429a      	cmp	r2, r3
 8001766:	d007      	beq.n	8001778 <StartUltrasonicTask+0x104>
                {
                        Motor_ForwardDifferential((uint8_t)left_cmd, (uint8_t)right_cmd);
 8001768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176a:	b2db      	uxtb	r3, r3
 800176c:	6a3a      	ldr	r2, [r7, #32]
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	4611      	mov	r1, r2
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fbe8 	bl	8000f48 <Motor_ForwardDifferential>
                }
        }

        osDelay(ULTRASONIC_MEASURE_INTERVAL_MS);
 8001778:	2032      	movs	r0, #50	@ 0x32
 800177a:	f001 fefd 	bl	8003578 <osDelay>
    {
 800177e:	e77d      	b.n	800167c <StartUltrasonicTask+0x8>
 8001780:	20000386 	.word	0x20000386
 8001784:	20000388 	.word	0x20000388
 8001788:	20000002 	.word	0x20000002
 800178c:	20000385 	.word	0x20000385
 8001790:	20000000 	.word	0x20000000

08001794 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017a4:	d101      	bne.n	80017aa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80017a6:	f000 f937 	bl	8001a18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b6:	b672      	cpsid	i
}
 80017b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ba:	bf00      	nop
 80017bc:	e7fd      	b.n	80017ba <Error_Handler+0x8>
	...

080017c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <HAL_MspInit+0x54>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	4a11      	ldr	r2, [pc, #68]	@ (8001814 <HAL_MspInit+0x54>)
 80017d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <HAL_MspInit+0x54>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <HAL_MspInit+0x54>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <HAL_MspInit+0x54>)
 80017ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017f2:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <HAL_MspInit+0x54>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	210f      	movs	r1, #15
 8001802:	f06f 0001 	mvn.w	r0, #1
 8001806:	f000 f9df 	bl	8001bc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800

08001818 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08e      	sub	sp, #56	@ 0x38
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	4b34      	ldr	r3, [pc, #208]	@ (8001900 <HAL_InitTick+0xe8>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001830:	4a33      	ldr	r2, [pc, #204]	@ (8001900 <HAL_InitTick+0xe8>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6413      	str	r3, [r2, #64]	@ 0x40
 8001838:	4b31      	ldr	r3, [pc, #196]	@ (8001900 <HAL_InitTick+0xe8>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001844:	f107 0210 	add.w	r2, r7, #16
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f000 fff8 	bl	8002844 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800185a:	2b00      	cmp	r3, #0
 800185c:	d103      	bne.n	8001866 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800185e:	f000 ffdd 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8001862:	6378      	str	r0, [r7, #52]	@ 0x34
 8001864:	e004      	b.n	8001870 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001866:	f000 ffd9 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 800186a:	4603      	mov	r3, r0
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001872:	4a24      	ldr	r2, [pc, #144]	@ (8001904 <HAL_InitTick+0xec>)
 8001874:	fba2 2303 	umull	r2, r3, r2, r3
 8001878:	0c9b      	lsrs	r3, r3, #18
 800187a:	3b01      	subs	r3, #1
 800187c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800187e:	4b22      	ldr	r3, [pc, #136]	@ (8001908 <HAL_InitTick+0xf0>)
 8001880:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001884:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001886:	4b20      	ldr	r3, [pc, #128]	@ (8001908 <HAL_InitTick+0xf0>)
 8001888:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800188c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800188e:	4a1e      	ldr	r2, [pc, #120]	@ (8001908 <HAL_InitTick+0xf0>)
 8001890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001892:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001894:	4b1c      	ldr	r3, [pc, #112]	@ (8001908 <HAL_InitTick+0xf0>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189a:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <HAL_InitTick+0xf0>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a0:	4b19      	ldr	r3, [pc, #100]	@ (8001908 <HAL_InitTick+0xf0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80018a6:	4818      	ldr	r0, [pc, #96]	@ (8001908 <HAL_InitTick+0xf0>)
 80018a8:	f000 fffe 	bl	80028a8 <HAL_TIM_Base_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80018b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d11b      	bne.n	80018f2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80018ba:	4813      	ldr	r0, [pc, #76]	@ (8001908 <HAL_InitTick+0xf0>)
 80018bc:	f001 f84e 	bl	800295c <HAL_TIM_Base_Start_IT>
 80018c0:	4603      	mov	r3, r0
 80018c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80018c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d111      	bne.n	80018f2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018ce:	201c      	movs	r0, #28
 80018d0:	f000 f996 	bl	8001c00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b0f      	cmp	r3, #15
 80018d8:	d808      	bhi.n	80018ec <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80018da:	2200      	movs	r2, #0
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	201c      	movs	r0, #28
 80018e0:	f000 f972 	bl	8001bc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018e4:	4a09      	ldr	r2, [pc, #36]	@ (800190c <HAL_InitTick+0xf4>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e002      	b.n	80018f2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018f2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3738      	adds	r7, #56	@ 0x38
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	431bde83 	.word	0x431bde83
 8001908:	2000038c 	.word	0x2000038c
 800190c:	20000008 	.word	0x20000008

08001910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <NMI_Handler+0x4>

08001918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <HardFault_Handler+0x4>

08001920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <MemManage_Handler+0x4>

08001928 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <UsageFault_Handler+0x4>

08001938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <TIM2_IRQHandler+0x10>)
 800194e:	f001 f971 	bl	8002c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000038c 	.word	0x2000038c

0800195c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <SystemInit+0x20>)
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001966:	4a05      	ldr	r2, [pc, #20]	@ (800197c <SystemInit+0x20>)
 8001968:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800196c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001984:	f7ff ffea 	bl	800195c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001988:	480c      	ldr	r0, [pc, #48]	@ (80019bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800198a:	490d      	ldr	r1, [pc, #52]	@ (80019c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800198c:	4a0d      	ldr	r2, [pc, #52]	@ (80019c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001990:	e002      	b.n	8001998 <LoopCopyDataInit>

08001992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001996:	3304      	adds	r3, #4

08001998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800199c:	d3f9      	bcc.n	8001992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199e:	4a0a      	ldr	r2, [pc, #40]	@ (80019c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019a0:	4c0a      	ldr	r4, [pc, #40]	@ (80019cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a4:	e001      	b.n	80019aa <LoopFillZerobss>

080019a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a8:	3204      	adds	r2, #4

080019aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ac:	d3fb      	bcc.n	80019a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ae:	f004 f899 	bl	8005ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b2:	f7ff fd4f 	bl	8001454 <main>
  bx  lr    
 80019b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80019c4:	08005ccc 	.word	0x08005ccc
  ldr r2, =_sbss
 80019c8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80019cc:	2000166c 	.word	0x2000166c

080019d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC_IRQHandler>
	...

080019d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a14 <HAL_Init+0x40>)
 80019de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001a14 <HAL_Init+0x40>)
 80019ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f0:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a07      	ldr	r2, [pc, #28]	@ (8001a14 <HAL_Init+0x40>)
 80019f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fc:	2003      	movs	r0, #3
 80019fe:	f000 f8d8 	bl	8001bb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a02:	200f      	movs	r0, #15
 8001a04:	f7ff ff08 	bl	8001818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a08:	f7ff feda 	bl	80017c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023c00 	.word	0x40023c00

08001a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <HAL_IncTick+0x20>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_IncTick+0x24>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	4a04      	ldr	r2, [pc, #16]	@ (8001a3c <HAL_IncTick+0x24>)
 8001a2a:	6013      	str	r3, [r2, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	2000000c 	.word	0x2000000c
 8001a3c:	200003d4 	.word	0x200003d4

08001a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return uwTick;
 8001a44:	4b03      	ldr	r3, [pc, #12]	@ (8001a54 <HAL_GetTick+0x14>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	200003d4 	.word	0x200003d4

08001a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a68:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a74:	4013      	ands	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8a:	4a04      	ldr	r2, [pc, #16]	@ (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	60d3      	str	r3, [r2, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa4:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	f003 0307 	and.w	r3, r3, #7
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	db0b      	blt.n	8001ae6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	f003 021f 	and.w	r2, r3, #31
 8001ad4:	4907      	ldr	r1, [pc, #28]	@ (8001af4 <__NVIC_EnableIRQ+0x38>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	2001      	movs	r0, #1
 8001ade:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e100 	.word	0xe000e100

08001af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	db0a      	blt.n	8001b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	490c      	ldr	r1, [pc, #48]	@ (8001b44 <__NVIC_SetPriority+0x4c>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	0112      	lsls	r2, r2, #4
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b20:	e00a      	b.n	8001b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4908      	ldr	r1, [pc, #32]	@ (8001b48 <__NVIC_SetPriority+0x50>)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	3b04      	subs	r3, #4
 8001b30:	0112      	lsls	r2, r2, #4
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	440b      	add	r3, r1
 8001b36:	761a      	strb	r2, [r3, #24]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000e100 	.word	0xe000e100
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	@ 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f1c3 0307 	rsb	r3, r3, #7
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	bf28      	it	cs
 8001b6a:	2304      	movcs	r3, #4
 8001b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3304      	adds	r3, #4
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d902      	bls.n	8001b7c <NVIC_EncodePriority+0x30>
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3b03      	subs	r3, #3
 8001b7a:	e000      	b.n	8001b7e <NVIC_EncodePriority+0x32>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	401a      	ands	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b94:	f04f 31ff 	mov.w	r1, #4294967295
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	43d9      	mvns	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	4313      	orrs	r3, r2
         );
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3724      	adds	r7, #36	@ 0x24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff ff4c 	bl	8001a58 <__NVIC_SetPriorityGrouping>
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bda:	f7ff ff61 	bl	8001aa0 <__NVIC_GetPriorityGrouping>
 8001bde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	68b9      	ldr	r1, [r7, #8]
 8001be4:	6978      	ldr	r0, [r7, #20]
 8001be6:	f7ff ffb1 	bl	8001b4c <NVIC_EncodePriority>
 8001bea:	4602      	mov	r2, r0
 8001bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ff80 	bl	8001af8 <__NVIC_SetPriority>
}
 8001bf8:	bf00      	nop
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff54 	bl	8001abc <__NVIC_EnableIRQ>
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	@ 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e159      	b.n	8001eec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f040 8148 	bne.w	8001ee6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d005      	beq.n	8001c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d130      	bne.n	8001cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 0201 	and.w	r2, r3, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d017      	beq.n	8001d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d123      	bne.n	8001d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	08da      	lsrs	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3208      	adds	r2, #8
 8001d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	220f      	movs	r2, #15
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	69b9      	ldr	r1, [r7, #24]
 8001d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80a2 	beq.w	8001ee6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b57      	ldr	r3, [pc, #348]	@ (8001f04 <HAL_GPIO_Init+0x2e8>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	4a56      	ldr	r2, [pc, #344]	@ (8001f04 <HAL_GPIO_Init+0x2e8>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001db2:	4b54      	ldr	r3, [pc, #336]	@ (8001f04 <HAL_GPIO_Init+0x2e8>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dbe:	4a52      	ldr	r2, [pc, #328]	@ (8001f08 <HAL_GPIO_Init+0x2ec>)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a49      	ldr	r2, [pc, #292]	@ (8001f0c <HAL_GPIO_Init+0x2f0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d019      	beq.n	8001e1e <HAL_GPIO_Init+0x202>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a48      	ldr	r2, [pc, #288]	@ (8001f10 <HAL_GPIO_Init+0x2f4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d013      	beq.n	8001e1a <HAL_GPIO_Init+0x1fe>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a47      	ldr	r2, [pc, #284]	@ (8001f14 <HAL_GPIO_Init+0x2f8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00d      	beq.n	8001e16 <HAL_GPIO_Init+0x1fa>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a46      	ldr	r2, [pc, #280]	@ (8001f18 <HAL_GPIO_Init+0x2fc>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d007      	beq.n	8001e12 <HAL_GPIO_Init+0x1f6>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a45      	ldr	r2, [pc, #276]	@ (8001f1c <HAL_GPIO_Init+0x300>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d101      	bne.n	8001e0e <HAL_GPIO_Init+0x1f2>
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	e008      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e0e:	2307      	movs	r3, #7
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e12:	2303      	movs	r3, #3
 8001e14:	e004      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	f002 0203 	and.w	r2, r2, #3
 8001e26:	0092      	lsls	r2, r2, #2
 8001e28:	4093      	lsls	r3, r2
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e30:	4935      	ldr	r1, [pc, #212]	@ (8001f08 <HAL_GPIO_Init+0x2ec>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	3302      	adds	r3, #2
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3e:	4b38      	ldr	r3, [pc, #224]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e62:	4a2f      	ldr	r2, [pc, #188]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e68:	4b2d      	ldr	r3, [pc, #180]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e8c:	4a24      	ldr	r2, [pc, #144]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e92:	4b23      	ldr	r3, [pc, #140]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ebc:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee0:	4a0f      	ldr	r2, [pc, #60]	@ (8001f20 <HAL_GPIO_Init+0x304>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	f67f aea2 	bls.w	8001c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3724      	adds	r7, #36	@ 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40013800 	.word	0x40013800
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	40020400 	.word	0x40020400
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020c00 	.word	0x40020c00
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40013c00 	.word	0x40013c00

08001f24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	887b      	ldrh	r3, [r7, #2]
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
 8001f40:	e001      	b.n	8001f46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
 8001f60:	4613      	mov	r3, r2
 8001f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f64:	787b      	ldrb	r3, [r7, #1]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f70:	e003      	b.n	8001f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	041a      	lsls	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	619a      	str	r2, [r3, #24]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b085      	sub	sp, #20
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f98:	887a      	ldrh	r2, [r7, #2]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	041a      	lsls	r2, r3, #16
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	43d9      	mvns	r1, r3
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	400b      	ands	r3, r1
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	619a      	str	r2, [r3, #24]
}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e267      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d075      	beq.n	80020c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001fda:	4b88      	ldr	r3, [pc, #544]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d00c      	beq.n	8002000 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fe6:	4b85      	ldr	r3, [pc, #532]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d112      	bne.n	8002018 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ff2:	4b82      	ldr	r3, [pc, #520]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ffa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ffe:	d10b      	bne.n	8002018 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002000:	4b7e      	ldr	r3, [pc, #504]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d05b      	beq.n	80020c4 <HAL_RCC_OscConfig+0x108>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d157      	bne.n	80020c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e242      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002020:	d106      	bne.n	8002030 <HAL_RCC_OscConfig+0x74>
 8002022:	4b76      	ldr	r3, [pc, #472]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a75      	ldr	r2, [pc, #468]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e01d      	b.n	800206c <HAL_RCC_OscConfig+0xb0>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0x98>
 800203a:	4b70      	ldr	r3, [pc, #448]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a6f      	ldr	r2, [pc, #444]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 8002040:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	4b6d      	ldr	r3, [pc, #436]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a6c      	ldr	r2, [pc, #432]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 800204c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	e00b      	b.n	800206c <HAL_RCC_OscConfig+0xb0>
 8002054:	4b69      	ldr	r3, [pc, #420]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a68      	ldr	r2, [pc, #416]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 800205a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4b66      	ldr	r3, [pc, #408]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a65      	ldr	r2, [pc, #404]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 8002066:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800206a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d013      	beq.n	800209c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7ff fce4 	bl	8001a40 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800207c:	f7ff fce0 	bl	8001a40 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	@ 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e207      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b5b      	ldr	r3, [pc, #364]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0xc0>
 800209a:	e014      	b.n	80020c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7ff fcd0 	bl	8001a40 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a4:	f7ff fccc 	bl	8001a40 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	@ 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e1f3      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b6:	4b51      	ldr	r3, [pc, #324]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0xe8>
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d063      	beq.n	800219a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80020d2:	4b4a      	ldr	r3, [pc, #296]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00b      	beq.n	80020f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020de:	4b47      	ldr	r3, [pc, #284]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d11c      	bne.n	8002124 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ea:	4b44      	ldr	r3, [pc, #272]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d116      	bne.n	8002124 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	4b41      	ldr	r3, [pc, #260]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <HAL_RCC_OscConfig+0x152>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d001      	beq.n	800210e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e1c7      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4b3b      	ldr	r3, [pc, #236]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4937      	ldr	r1, [pc, #220]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002122:	e03a      	b.n	800219a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d020      	beq.n	800216e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800212c:	4b34      	ldr	r3, [pc, #208]	@ (8002200 <HAL_RCC_OscConfig+0x244>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7ff fc85 	bl	8001a40 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213a:	f7ff fc81 	bl	8001a40 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e1a8      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214c:	4b2b      	ldr	r3, [pc, #172]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002158:	4b28      	ldr	r3, [pc, #160]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4925      	ldr	r1, [pc, #148]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]
 800216c:	e015      	b.n	800219a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216e:	4b24      	ldr	r3, [pc, #144]	@ (8002200 <HAL_RCC_OscConfig+0x244>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7ff fc64 	bl	8001a40 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217c:	f7ff fc60 	bl	8001a40 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e187      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218e:	4b1b      	ldr	r3, [pc, #108]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d036      	beq.n	8002214 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d016      	beq.n	80021dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ae:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <HAL_RCC_OscConfig+0x248>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b4:	f7ff fc44 	bl	8001a40 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021bc:	f7ff fc40 	bl	8001a40 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e167      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ce:	4b0b      	ldr	r3, [pc, #44]	@ (80021fc <HAL_RCC_OscConfig+0x240>)
 80021d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x200>
 80021da:	e01b      	b.n	8002214 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021dc:	4b09      	ldr	r3, [pc, #36]	@ (8002204 <HAL_RCC_OscConfig+0x248>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e2:	f7ff fc2d 	bl	8001a40 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e8:	e00e      	b.n	8002208 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ea:	f7ff fc29 	bl	8001a40 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d907      	bls.n	8002208 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e150      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
 80021fc:	40023800 	.word	0x40023800
 8002200:	42470000 	.word	0x42470000
 8002204:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002208:	4b88      	ldr	r3, [pc, #544]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 800220a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1ea      	bne.n	80021ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 8097 	beq.w	8002350 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002226:	4b81      	ldr	r3, [pc, #516]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10f      	bne.n	8002252 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	4b7d      	ldr	r3, [pc, #500]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	4a7c      	ldr	r2, [pc, #496]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 800223c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002240:	6413      	str	r3, [r2, #64]	@ 0x40
 8002242:	4b7a      	ldr	r3, [pc, #488]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224e:	2301      	movs	r3, #1
 8002250:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002252:	4b77      	ldr	r3, [pc, #476]	@ (8002430 <HAL_RCC_OscConfig+0x474>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225a:	2b00      	cmp	r3, #0
 800225c:	d118      	bne.n	8002290 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225e:	4b74      	ldr	r3, [pc, #464]	@ (8002430 <HAL_RCC_OscConfig+0x474>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a73      	ldr	r2, [pc, #460]	@ (8002430 <HAL_RCC_OscConfig+0x474>)
 8002264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226a:	f7ff fbe9 	bl	8001a40 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002272:	f7ff fbe5 	bl	8001a40 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e10c      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002284:	4b6a      	ldr	r3, [pc, #424]	@ (8002430 <HAL_RCC_OscConfig+0x474>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d106      	bne.n	80022a6 <HAL_RCC_OscConfig+0x2ea>
 8002298:	4b64      	ldr	r3, [pc, #400]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 800229a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800229c:	4a63      	ldr	r2, [pc, #396]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80022a4:	e01c      	b.n	80022e0 <HAL_RCC_OscConfig+0x324>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b05      	cmp	r3, #5
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x30c>
 80022ae:	4b5f      	ldr	r3, [pc, #380]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 80022b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b2:	4a5e      	ldr	r2, [pc, #376]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 80022b4:	f043 0304 	orr.w	r3, r3, #4
 80022b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ba:	4b5c      	ldr	r3, [pc, #368]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 80022bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022be:	4a5b      	ldr	r2, [pc, #364]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022c6:	e00b      	b.n	80022e0 <HAL_RCC_OscConfig+0x324>
 80022c8:	4b58      	ldr	r3, [pc, #352]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022cc:	4a57      	ldr	r2, [pc, #348]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 80022ce:	f023 0301 	bic.w	r3, r3, #1
 80022d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80022d4:	4b55      	ldr	r3, [pc, #340]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 80022d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d8:	4a54      	ldr	r2, [pc, #336]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 80022da:	f023 0304 	bic.w	r3, r3, #4
 80022de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d015      	beq.n	8002314 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e8:	f7ff fbaa 	bl	8001a40 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f0:	f7ff fba6 	bl	8001a40 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e0cb      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002306:	4b49      	ldr	r3, [pc, #292]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0ee      	beq.n	80022f0 <HAL_RCC_OscConfig+0x334>
 8002312:	e014      	b.n	800233e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002314:	f7ff fb94 	bl	8001a40 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231a:	e00a      	b.n	8002332 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231c:	f7ff fb90 	bl	8001a40 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e0b5      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002332:	4b3e      	ldr	r3, [pc, #248]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 8002334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1ee      	bne.n	800231c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800233e:	7dfb      	ldrb	r3, [r7, #23]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d105      	bne.n	8002350 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002344:	4b39      	ldr	r3, [pc, #228]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	4a38      	ldr	r2, [pc, #224]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 800234a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800234e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80a1 	beq.w	800249c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800235a:	4b34      	ldr	r3, [pc, #208]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b08      	cmp	r3, #8
 8002364:	d05c      	beq.n	8002420 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d141      	bne.n	80023f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236e:	4b31      	ldr	r3, [pc, #196]	@ (8002434 <HAL_RCC_OscConfig+0x478>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7ff fb64 	bl	8001a40 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237c:	f7ff fb60 	bl	8001a40 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e087      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238e:	4b27      	ldr	r3, [pc, #156]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a8:	019b      	lsls	r3, r3, #6
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b0:	085b      	lsrs	r3, r3, #1
 80023b2:	3b01      	subs	r3, #1
 80023b4:	041b      	lsls	r3, r3, #16
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023bc:	061b      	lsls	r3, r3, #24
 80023be:	491b      	ldr	r1, [pc, #108]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002434 <HAL_RCC_OscConfig+0x478>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7ff fb39 	bl	8001a40 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d2:	f7ff fb35 	bl	8001a40 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e05c      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e4:	4b11      	ldr	r3, [pc, #68]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x416>
 80023f0:	e054      	b.n	800249c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f2:	4b10      	ldr	r3, [pc, #64]	@ (8002434 <HAL_RCC_OscConfig+0x478>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7ff fb22 	bl	8001a40 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002400:	f7ff fb1e 	bl	8001a40 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e045      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002412:	4b06      	ldr	r3, [pc, #24]	@ (800242c <HAL_RCC_OscConfig+0x470>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x444>
 800241e:	e03d      	b.n	800249c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e038      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
 800242c:	40023800 	.word	0x40023800
 8002430:	40007000 	.word	0x40007000
 8002434:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002438:	4b1b      	ldr	r3, [pc, #108]	@ (80024a8 <HAL_RCC_OscConfig+0x4ec>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d028      	beq.n	8002498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002450:	429a      	cmp	r2, r3
 8002452:	d121      	bne.n	8002498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245e:	429a      	cmp	r2, r3
 8002460:	d11a      	bne.n	8002498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002468:	4013      	ands	r3, r2
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800246e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002470:	4293      	cmp	r3, r2
 8002472:	d111      	bne.n	8002498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247e:	085b      	lsrs	r3, r3, #1
 8002480:	3b01      	subs	r3, #1
 8002482:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002484:	429a      	cmp	r2, r3
 8002486:	d107      	bne.n	8002498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002492:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800

080024ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0cc      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c0:	4b68      	ldr	r3, [pc, #416]	@ (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d90c      	bls.n	80024e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b65      	ldr	r3, [pc, #404]	@ (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b63      	ldr	r3, [pc, #396]	@ (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0b8      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d020      	beq.n	8002536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002500:	4b59      	ldr	r3, [pc, #356]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a58      	ldr	r2, [pc, #352]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800250a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002518:	4b53      	ldr	r3, [pc, #332]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a52      	ldr	r2, [pc, #328]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002524:	4b50      	ldr	r3, [pc, #320]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	494d      	ldr	r1, [pc, #308]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d044      	beq.n	80025cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d107      	bne.n	800255a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	4b47      	ldr	r3, [pc, #284]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d119      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e07f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d003      	beq.n	800256a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002566:	2b03      	cmp	r3, #3
 8002568:	d107      	bne.n	800257a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256a:	4b3f      	ldr	r3, [pc, #252]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e06f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257a:	4b3b      	ldr	r3, [pc, #236]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e067      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258a:	4b37      	ldr	r3, [pc, #220]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f023 0203 	bic.w	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4934      	ldr	r1, [pc, #208]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	4313      	orrs	r3, r2
 800259a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800259c:	f7ff fa50 	bl	8001a40 <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a4:	f7ff fa4c 	bl	8001a40 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e04f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 020c 	and.w	r2, r3, #12
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d1eb      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025cc:	4b25      	ldr	r3, [pc, #148]	@ (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d20c      	bcs.n	80025f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b22      	ldr	r3, [pc, #136]	@ (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b20      	ldr	r3, [pc, #128]	@ (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e032      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002600:	4b19      	ldr	r3, [pc, #100]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4916      	ldr	r1, [pc, #88]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800261e:	4b12      	ldr	r3, [pc, #72]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	490e      	ldr	r1, [pc, #56]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002632:	f000 f821 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 8002636:	4602      	mov	r2, r0
 8002638:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	490a      	ldr	r1, [pc, #40]	@ (800266c <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	5ccb      	ldrb	r3, [r1, r3]
 8002646:	fa22 f303 	lsr.w	r3, r2, r3
 800264a:	4a09      	ldr	r2, [pc, #36]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800264e:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <HAL_RCC_ClockConfig+0x1c8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff f8e0 	bl	8001818 <HAL_InitTick>

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40023c00 	.word	0x40023c00
 8002668:	40023800 	.word	0x40023800
 800266c:	08005ca4 	.word	0x08005ca4
 8002670:	20000004 	.word	0x20000004
 8002674:	20000008 	.word	0x20000008

08002678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800267c:	b090      	sub	sp, #64	@ 0x40
 800267e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002690:	4b59      	ldr	r3, [pc, #356]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	2b08      	cmp	r3, #8
 800269a:	d00d      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x40>
 800269c:	2b08      	cmp	r3, #8
 800269e:	f200 80a1 	bhi.w	80027e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x34>
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d003      	beq.n	80026b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80026aa:	e09b      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026ac:	4b53      	ldr	r3, [pc, #332]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x184>)
 80026ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026b0:	e09b      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026b2:	4b53      	ldr	r3, [pc, #332]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x188>)
 80026b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026b6:	e098      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026b8:	4b4f      	ldr	r3, [pc, #316]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026c2:	4b4d      	ldr	r3, [pc, #308]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d028      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ce:	4b4a      	ldr	r3, [pc, #296]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	099b      	lsrs	r3, r3, #6
 80026d4:	2200      	movs	r2, #0
 80026d6:	623b      	str	r3, [r7, #32]
 80026d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80026e0:	2100      	movs	r1, #0
 80026e2:	4b47      	ldr	r3, [pc, #284]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x188>)
 80026e4:	fb03 f201 	mul.w	r2, r3, r1
 80026e8:	2300      	movs	r3, #0
 80026ea:	fb00 f303 	mul.w	r3, r0, r3
 80026ee:	4413      	add	r3, r2
 80026f0:	4a43      	ldr	r2, [pc, #268]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x188>)
 80026f2:	fba0 1202 	umull	r1, r2, r0, r2
 80026f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026f8:	460a      	mov	r2, r1
 80026fa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80026fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026fe:	4413      	add	r3, r2
 8002700:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002704:	2200      	movs	r2, #0
 8002706:	61bb      	str	r3, [r7, #24]
 8002708:	61fa      	str	r2, [r7, #28]
 800270a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800270e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002712:	f7fd fd65 	bl	80001e0 <__aeabi_uldivmod>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4613      	mov	r3, r2
 800271c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800271e:	e053      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002720:	4b35      	ldr	r3, [pc, #212]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	099b      	lsrs	r3, r3, #6
 8002726:	2200      	movs	r2, #0
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	617a      	str	r2, [r7, #20]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002732:	f04f 0b00 	mov.w	fp, #0
 8002736:	4652      	mov	r2, sl
 8002738:	465b      	mov	r3, fp
 800273a:	f04f 0000 	mov.w	r0, #0
 800273e:	f04f 0100 	mov.w	r1, #0
 8002742:	0159      	lsls	r1, r3, #5
 8002744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002748:	0150      	lsls	r0, r2, #5
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	ebb2 080a 	subs.w	r8, r2, sl
 8002752:	eb63 090b 	sbc.w	r9, r3, fp
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002762:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002766:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800276a:	ebb2 0408 	subs.w	r4, r2, r8
 800276e:	eb63 0509 	sbc.w	r5, r3, r9
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	00eb      	lsls	r3, r5, #3
 800277c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002780:	00e2      	lsls	r2, r4, #3
 8002782:	4614      	mov	r4, r2
 8002784:	461d      	mov	r5, r3
 8002786:	eb14 030a 	adds.w	r3, r4, sl
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	eb45 030b 	adc.w	r3, r5, fp
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800279e:	4629      	mov	r1, r5
 80027a0:	028b      	lsls	r3, r1, #10
 80027a2:	4621      	mov	r1, r4
 80027a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027a8:	4621      	mov	r1, r4
 80027aa:	028a      	lsls	r2, r1, #10
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027b2:	2200      	movs	r2, #0
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	60fa      	str	r2, [r7, #12]
 80027b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027bc:	f7fd fd10 	bl	80001e0 <__aeabi_uldivmod>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4613      	mov	r3, r2
 80027c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80027c8:	4b0b      	ldr	r3, [pc, #44]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	3301      	adds	r3, #1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80027d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027e2:	e002      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027e4:	4b05      	ldr	r3, [pc, #20]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x184>)
 80027e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3740      	adds	r7, #64	@ 0x40
 80027f0:	46bd      	mov	sp, r7
 80027f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	00f42400 	.word	0x00f42400
 8002800:	017d7840 	.word	0x017d7840

08002804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002808:	4b03      	ldr	r3, [pc, #12]	@ (8002818 <HAL_RCC_GetHCLKFreq+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000004 	.word	0x20000004

0800281c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002820:	f7ff fff0 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b05      	ldr	r3, [pc, #20]	@ (800283c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	0a9b      	lsrs	r3, r3, #10
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4903      	ldr	r1, [pc, #12]	@ (8002840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002838:	4618      	mov	r0, r3
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40023800 	.word	0x40023800
 8002840:	08005cb4 	.word	0x08005cb4

08002844 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	220f      	movs	r2, #15
 8002852:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002854:	4b12      	ldr	r3, [pc, #72]	@ (80028a0 <HAL_RCC_GetClockConfig+0x5c>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 0203 	and.w	r2, r3, #3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002860:	4b0f      	ldr	r3, [pc, #60]	@ (80028a0 <HAL_RCC_GetClockConfig+0x5c>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800286c:	4b0c      	ldr	r3, [pc, #48]	@ (80028a0 <HAL_RCC_GetClockConfig+0x5c>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002878:	4b09      	ldr	r3, [pc, #36]	@ (80028a0 <HAL_RCC_GetClockConfig+0x5c>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	08db      	lsrs	r3, r3, #3
 800287e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002886:	4b07      	ldr	r3, [pc, #28]	@ (80028a4 <HAL_RCC_GetClockConfig+0x60>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0207 	and.w	r2, r3, #7
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	601a      	str	r2, [r3, #0]
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40023c00 	.word	0x40023c00

080028a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e041      	b.n	800293e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f839 	bl	8002946 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3304      	adds	r3, #4
 80028e4:	4619      	mov	r1, r3
 80028e6:	4610      	mov	r0, r2
 80028e8:	f000 fb7e 	bl	8002fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d001      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e044      	b.n	80029fe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1e      	ldr	r2, [pc, #120]	@ (8002a0c <HAL_TIM_Base_Start_IT+0xb0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d018      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x6c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800299e:	d013      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x6c>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002a10 <HAL_TIM_Base_Start_IT+0xb4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00e      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x6c>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a19      	ldr	r2, [pc, #100]	@ (8002a14 <HAL_TIM_Base_Start_IT+0xb8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d009      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x6c>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a17      	ldr	r2, [pc, #92]	@ (8002a18 <HAL_TIM_Base_Start_IT+0xbc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d004      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x6c>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a16      	ldr	r2, [pc, #88]	@ (8002a1c <HAL_TIM_Base_Start_IT+0xc0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d111      	bne.n	80029ec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b06      	cmp	r3, #6
 80029d8:	d010      	beq.n	80029fc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0201 	orr.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ea:	e007      	b.n	80029fc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40010000 	.word	0x40010000
 8002a10:	40000400 	.word	0x40000400
 8002a14:	40000800 	.word	0x40000800
 8002a18:	40000c00 	.word	0x40000c00
 8002a1c:	40014000 	.word	0x40014000

08002a20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e041      	b.n	8002ab6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d106      	bne.n	8002a4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f839 	bl	8002abe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	f000 fac2 	bl	8002fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
	...

08002ad4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d109      	bne.n	8002af8 <HAL_TIM_PWM_Start+0x24>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	bf14      	ite	ne
 8002af0:	2301      	movne	r3, #1
 8002af2:	2300      	moveq	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	e022      	b.n	8002b3e <HAL_TIM_PWM_Start+0x6a>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d109      	bne.n	8002b12 <HAL_TIM_PWM_Start+0x3e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	bf14      	ite	ne
 8002b0a:	2301      	movne	r3, #1
 8002b0c:	2300      	moveq	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	e015      	b.n	8002b3e <HAL_TIM_PWM_Start+0x6a>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d109      	bne.n	8002b2c <HAL_TIM_PWM_Start+0x58>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	bf14      	ite	ne
 8002b24:	2301      	movne	r3, #1
 8002b26:	2300      	moveq	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	e008      	b.n	8002b3e <HAL_TIM_PWM_Start+0x6a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	bf14      	ite	ne
 8002b38:	2301      	movne	r3, #1
 8002b3a:	2300      	moveq	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e068      	b.n	8002c18 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d104      	bne.n	8002b56 <HAL_TIM_PWM_Start+0x82>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b54:	e013      	b.n	8002b7e <HAL_TIM_PWM_Start+0xaa>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d104      	bne.n	8002b66 <HAL_TIM_PWM_Start+0x92>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b64:	e00b      	b.n	8002b7e <HAL_TIM_PWM_Start+0xaa>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d104      	bne.n	8002b76 <HAL_TIM_PWM_Start+0xa2>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b74:	e003      	b.n	8002b7e <HAL_TIM_PWM_Start+0xaa>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2202      	movs	r2, #2
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2201      	movs	r2, #1
 8002b84:	6839      	ldr	r1, [r7, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fc40 	bl	800340c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a23      	ldr	r2, [pc, #140]	@ (8002c20 <HAL_TIM_PWM_Start+0x14c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d107      	bne.n	8002ba6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ba4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1d      	ldr	r2, [pc, #116]	@ (8002c20 <HAL_TIM_PWM_Start+0x14c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d018      	beq.n	8002be2 <HAL_TIM_PWM_Start+0x10e>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb8:	d013      	beq.n	8002be2 <HAL_TIM_PWM_Start+0x10e>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a19      	ldr	r2, [pc, #100]	@ (8002c24 <HAL_TIM_PWM_Start+0x150>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d00e      	beq.n	8002be2 <HAL_TIM_PWM_Start+0x10e>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a17      	ldr	r2, [pc, #92]	@ (8002c28 <HAL_TIM_PWM_Start+0x154>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d009      	beq.n	8002be2 <HAL_TIM_PWM_Start+0x10e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a16      	ldr	r2, [pc, #88]	@ (8002c2c <HAL_TIM_PWM_Start+0x158>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d004      	beq.n	8002be2 <HAL_TIM_PWM_Start+0x10e>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a14      	ldr	r2, [pc, #80]	@ (8002c30 <HAL_TIM_PWM_Start+0x15c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d111      	bne.n	8002c06 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2b06      	cmp	r3, #6
 8002bf2:	d010      	beq.n	8002c16 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c04:	e007      	b.n	8002c16 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0201 	orr.w	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40010000 	.word	0x40010000
 8002c24:	40000400 	.word	0x40000400
 8002c28:	40000800 	.word	0x40000800
 8002c2c:	40000c00 	.word	0x40000c00
 8002c30:	40014000 	.word	0x40014000

08002c34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d020      	beq.n	8002c98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01b      	beq.n	8002c98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0202 	mvn.w	r2, #2
 8002c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f994 	bl	8002fac <HAL_TIM_IC_CaptureCallback>
 8002c84:	e005      	b.n	8002c92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f986 	bl	8002f98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f997 	bl	8002fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d020      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01b      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0204 	mvn.w	r2, #4
 8002cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f96e 	bl	8002fac <HAL_TIM_IC_CaptureCallback>
 8002cd0:	e005      	b.n	8002cde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f960 	bl	8002f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f971 	bl	8002fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d020      	beq.n	8002d30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01b      	beq.n	8002d30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0208 	mvn.w	r2, #8
 8002d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2204      	movs	r2, #4
 8002d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f948 	bl	8002fac <HAL_TIM_IC_CaptureCallback>
 8002d1c:	e005      	b.n	8002d2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f93a 	bl	8002f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f94b 	bl	8002fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d020      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d01b      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0210 	mvn.w	r2, #16
 8002d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2208      	movs	r2, #8
 8002d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f922 	bl	8002fac <HAL_TIM_IC_CaptureCallback>
 8002d68:	e005      	b.n	8002d76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f914 	bl	8002f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f925 	bl	8002fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00c      	beq.n	8002da0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0201 	mvn.w	r2, #1
 8002d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fe fcfa 	bl	8001794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00c      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fb53 	bl	800346a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00c      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f8f6 	bl	8002fd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00c      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d007      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0220 	mvn.w	r2, #32
 8002e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fb25 	bl	8003456 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e0ae      	b.n	8002f90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b0c      	cmp	r3, #12
 8002e3e:	f200 809f 	bhi.w	8002f80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e42:	a201      	add	r2, pc, #4	@ (adr r2, 8002e48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e7d 	.word	0x08002e7d
 8002e4c:	08002f81 	.word	0x08002f81
 8002e50:	08002f81 	.word	0x08002f81
 8002e54:	08002f81 	.word	0x08002f81
 8002e58:	08002ebd 	.word	0x08002ebd
 8002e5c:	08002f81 	.word	0x08002f81
 8002e60:	08002f81 	.word	0x08002f81
 8002e64:	08002f81 	.word	0x08002f81
 8002e68:	08002eff 	.word	0x08002eff
 8002e6c:	08002f81 	.word	0x08002f81
 8002e70:	08002f81 	.word	0x08002f81
 8002e74:	08002f81 	.word	0x08002f81
 8002e78:	08002f3f 	.word	0x08002f3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 f936 	bl	80030f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0208 	orr.w	r2, r2, #8
 8002e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699a      	ldr	r2, [r3, #24]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0204 	bic.w	r2, r2, #4
 8002ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6999      	ldr	r1, [r3, #24]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	691a      	ldr	r2, [r3, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	619a      	str	r2, [r3, #24]
      break;
 8002eba:	e064      	b.n	8002f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 f97c 	bl	80031c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699a      	ldr	r2, [r3, #24]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6999      	ldr	r1, [r3, #24]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	021a      	lsls	r2, r3, #8
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	619a      	str	r2, [r3, #24]
      break;
 8002efc:	e043      	b.n	8002f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68b9      	ldr	r1, [r7, #8]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 f9c7 	bl	8003298 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69da      	ldr	r2, [r3, #28]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f042 0208 	orr.w	r2, r2, #8
 8002f18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	69da      	ldr	r2, [r3, #28]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0204 	bic.w	r2, r2, #4
 8002f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69d9      	ldr	r1, [r3, #28]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	61da      	str	r2, [r3, #28]
      break;
 8002f3c:	e023      	b.n	8002f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68b9      	ldr	r1, [r7, #8]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 fa11 	bl	800336c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	69da      	ldr	r2, [r3, #28]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	69da      	ldr	r2, [r3, #28]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69d9      	ldr	r1, [r3, #28]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	021a      	lsls	r2, r3, #8
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	61da      	str	r2, [r3, #28]
      break;
 8002f7e:	e002      	b.n	8002f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	75fb      	strb	r3, [r7, #23]
      break;
 8002f84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a37      	ldr	r2, [pc, #220]	@ (80030d8 <TIM_Base_SetConfig+0xf0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00f      	beq.n	8003020 <TIM_Base_SetConfig+0x38>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003006:	d00b      	beq.n	8003020 <TIM_Base_SetConfig+0x38>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a34      	ldr	r2, [pc, #208]	@ (80030dc <TIM_Base_SetConfig+0xf4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d007      	beq.n	8003020 <TIM_Base_SetConfig+0x38>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a33      	ldr	r2, [pc, #204]	@ (80030e0 <TIM_Base_SetConfig+0xf8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d003      	beq.n	8003020 <TIM_Base_SetConfig+0x38>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a32      	ldr	r2, [pc, #200]	@ (80030e4 <TIM_Base_SetConfig+0xfc>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d108      	bne.n	8003032 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a28      	ldr	r2, [pc, #160]	@ (80030d8 <TIM_Base_SetConfig+0xf0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01b      	beq.n	8003072 <TIM_Base_SetConfig+0x8a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003040:	d017      	beq.n	8003072 <TIM_Base_SetConfig+0x8a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a25      	ldr	r2, [pc, #148]	@ (80030dc <TIM_Base_SetConfig+0xf4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <TIM_Base_SetConfig+0x8a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a24      	ldr	r2, [pc, #144]	@ (80030e0 <TIM_Base_SetConfig+0xf8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00f      	beq.n	8003072 <TIM_Base_SetConfig+0x8a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a23      	ldr	r2, [pc, #140]	@ (80030e4 <TIM_Base_SetConfig+0xfc>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00b      	beq.n	8003072 <TIM_Base_SetConfig+0x8a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a22      	ldr	r2, [pc, #136]	@ (80030e8 <TIM_Base_SetConfig+0x100>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d007      	beq.n	8003072 <TIM_Base_SetConfig+0x8a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a21      	ldr	r2, [pc, #132]	@ (80030ec <TIM_Base_SetConfig+0x104>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d003      	beq.n	8003072 <TIM_Base_SetConfig+0x8a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a20      	ldr	r2, [pc, #128]	@ (80030f0 <TIM_Base_SetConfig+0x108>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d108      	bne.n	8003084 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4313      	orrs	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a0c      	ldr	r2, [pc, #48]	@ (80030d8 <TIM_Base_SetConfig+0xf0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d103      	bne.n	80030b2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f043 0204 	orr.w	r2, r3, #4
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	601a      	str	r2, [r3, #0]
}
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40010000 	.word	0x40010000
 80030dc:	40000400 	.word	0x40000400
 80030e0:	40000800 	.word	0x40000800
 80030e4:	40000c00 	.word	0x40000c00
 80030e8:	40014000 	.word	0x40014000
 80030ec:	40014400 	.word	0x40014400
 80030f0:	40014800 	.word	0x40014800

080030f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	f023 0201 	bic.w	r2, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0303 	bic.w	r3, r3, #3
 800312a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f023 0302 	bic.w	r3, r3, #2
 800313c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a1c      	ldr	r2, [pc, #112]	@ (80031bc <TIM_OC1_SetConfig+0xc8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d10c      	bne.n	800316a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f023 0308 	bic.w	r3, r3, #8
 8003156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f023 0304 	bic.w	r3, r3, #4
 8003168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a13      	ldr	r2, [pc, #76]	@ (80031bc <TIM_OC1_SetConfig+0xc8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d111      	bne.n	8003196 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	621a      	str	r2, [r3, #32]
}
 80031b0:	bf00      	nop
 80031b2:	371c      	adds	r7, #28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	40010000 	.word	0x40010000

080031c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	f023 0210 	bic.w	r2, r3, #16
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	021b      	lsls	r3, r3, #8
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4313      	orrs	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f023 0320 	bic.w	r3, r3, #32
 800320a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	4313      	orrs	r3, r2
 8003216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a1e      	ldr	r2, [pc, #120]	@ (8003294 <TIM_OC2_SetConfig+0xd4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d10d      	bne.n	800323c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800323a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a15      	ldr	r2, [pc, #84]	@ (8003294 <TIM_OC2_SetConfig+0xd4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d113      	bne.n	800326c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800324a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003252:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	621a      	str	r2, [r3, #32]
}
 8003286:	bf00      	nop
 8003288:	371c      	adds	r7, #28
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40010000 	.word	0x40010000

08003298 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0303 	bic.w	r3, r3, #3
 80032ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003368 <TIM_OC3_SetConfig+0xd0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d10d      	bne.n	8003312 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a14      	ldr	r2, [pc, #80]	@ (8003368 <TIM_OC3_SetConfig+0xd0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d113      	bne.n	8003342 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	621a      	str	r2, [r3, #32]
}
 800335c:	bf00      	nop
 800335e:	371c      	adds	r7, #28
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	40010000 	.word	0x40010000

0800336c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800339a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	021b      	lsls	r3, r3, #8
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	031b      	lsls	r3, r3, #12
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a10      	ldr	r2, [pc, #64]	@ (8003408 <TIM_OC4_SetConfig+0x9c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d109      	bne.n	80033e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	019b      	lsls	r3, r3, #6
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	621a      	str	r2, [r3, #32]
}
 80033fa:	bf00      	nop
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40010000 	.word	0x40010000

0800340c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f003 031f 	and.w	r3, r3, #31
 800341e:	2201      	movs	r2, #1
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a1a      	ldr	r2, [r3, #32]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	43db      	mvns	r3, r3
 800342e:	401a      	ands	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a1a      	ldr	r2, [r3, #32]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f003 031f 	and.w	r3, r3, #31
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	fa01 f303 	lsl.w	r3, r1, r3
 8003444:	431a      	orrs	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	621a      	str	r2, [r3, #32]
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800347e:	b480      	push	{r7}
 8003480:	b085      	sub	sp, #20
 8003482:	af00      	add	r7, sp, #0
 8003484:	4603      	mov	r3, r0
 8003486:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800348c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003490:	2b84      	cmp	r3, #132	@ 0x84
 8003492:	d005      	beq.n	80034a0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003494:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4413      	add	r3, r2
 800349c:	3303      	adds	r3, #3
 800349e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80034a0:	68fb      	ldr	r3, [r7, #12]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034b4:	f3ef 8305 	mrs	r3, IPSR
 80034b8:	607b      	str	r3, [r7, #4]
  return(result);
 80034ba:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80034bc:	2b00      	cmp	r3, #0
 80034be:	bf14      	ite	ne
 80034c0:	2301      	movne	r3, #1
 80034c2:	2300      	moveq	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80034d6:	f001 f92f 	bl	8004738 <vTaskStartScheduler>
  
  return osOK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	bd80      	pop	{r7, pc}

080034e0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80034e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034e2:	b089      	sub	sp, #36	@ 0x24
 80034e4:	af04      	add	r7, sp, #16
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d020      	beq.n	8003534 <osThreadCreate+0x54>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d01c      	beq.n	8003534 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685c      	ldr	r4, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691e      	ldr	r6, [r3, #16]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ffb6 	bl	800347e <makeFreeRtosPriority>
 8003512:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800351c:	9202      	str	r2, [sp, #8]
 800351e:	9301      	str	r3, [sp, #4]
 8003520:	9100      	str	r1, [sp, #0]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	4632      	mov	r2, r6
 8003526:	4629      	mov	r1, r5
 8003528:	4620      	mov	r0, r4
 800352a:	f000 ff1f 	bl	800436c <xTaskCreateStatic>
 800352e:	4603      	mov	r3, r0
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	e01c      	b.n	800356e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685c      	ldr	r4, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003540:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff ff98 	bl	800347e <makeFreeRtosPriority>
 800354e:	4602      	mov	r2, r0
 8003550:	f107 030c 	add.w	r3, r7, #12
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	9200      	str	r2, [sp, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	4632      	mov	r2, r6
 800355c:	4629      	mov	r1, r5
 800355e:	4620      	mov	r0, r4
 8003560:	f000 ff64 	bl	800442c <xTaskCreate>
 8003564:	4603      	mov	r3, r0
 8003566:	2b01      	cmp	r3, #1
 8003568:	d001      	beq.n	800356e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800356a:	2300      	movs	r3, #0
 800356c:	e000      	b.n	8003570 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800356e:	68fb      	ldr	r3, [r7, #12]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003578 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <osDelay+0x16>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	e000      	b.n	8003590 <osDelay+0x18>
 800358e:	2301      	movs	r3, #1
 8003590:	4618      	mov	r0, r3
 8003592:	f001 f89b 	bl	80046cc <vTaskDelay>
  
  return osOK;
 8003596:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d011      	beq.n	80035d6 <osMessageCreate+0x36>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00d      	beq.n	80035d6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6859      	ldr	r1, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	2400      	movs	r4, #0
 80035cc:	9400      	str	r4, [sp, #0]
 80035ce:	f000 f9e1 	bl	8003994 <xQueueGenericCreateStatic>
 80035d2:	4603      	mov	r3, r0
 80035d4:	e008      	b.n	80035e8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	4619      	mov	r1, r3
 80035e2:	f000 fa54 	bl	8003a8e <xQueueGenericCreate>
 80035e6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd90      	pop	{r4, r7, pc}

080035f0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80035fc:	2300      	movs	r3, #0
 80035fe:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <osMessagePut+0x1e>
    ticks = 1;
 800360a:	2301      	movs	r3, #1
 800360c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800360e:	f7ff ff4e 	bl	80034ae <inHandlerMode>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d018      	beq.n	800364a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003618:	f107 0210 	add.w	r2, r7, #16
 800361c:	f107 0108 	add.w	r1, r7, #8
 8003620:	2300      	movs	r3, #0
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 fb90 	bl	8003d48 <xQueueGenericSendFromISR>
 8003628:	4603      	mov	r3, r0
 800362a:	2b01      	cmp	r3, #1
 800362c:	d001      	beq.n	8003632 <osMessagePut+0x42>
      return osErrorOS;
 800362e:	23ff      	movs	r3, #255	@ 0xff
 8003630:	e018      	b.n	8003664 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d014      	beq.n	8003662 <osMessagePut+0x72>
 8003638:	4b0c      	ldr	r3, [pc, #48]	@ (800366c <osMessagePut+0x7c>)
 800363a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	e00b      	b.n	8003662 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800364a:	f107 0108 	add.w	r1, r7, #8
 800364e:	2300      	movs	r3, #0
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fa76 	bl	8003b44 <xQueueGenericSend>
 8003658:	4603      	mov	r3, r0
 800365a:	2b01      	cmp	r3, #1
 800365c:	d001      	beq.n	8003662 <osMessagePut+0x72>
      return osErrorOS;
 800365e:	23ff      	movs	r3, #255	@ 0xff
 8003660:	e000      	b.n	8003664 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	e000ed04 	.word	0xe000ed04

08003670 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003670:	b590      	push	{r4, r7, lr}
 8003672:	b08b      	sub	sp, #44	@ 0x2c
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10a      	bne.n	80036a0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800368a:	2380      	movs	r3, #128	@ 0x80
 800368c:	617b      	str	r3, [r7, #20]
    return event;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	461c      	mov	r4, r3
 8003692:	f107 0314 	add.w	r3, r7, #20
 8003696:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800369a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800369e:	e054      	b.n	800374a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80036a0:	2300      	movs	r3, #0
 80036a2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ae:	d103      	bne.n	80036b8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80036b0:	f04f 33ff 	mov.w	r3, #4294967295
 80036b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036b6:	e009      	b.n	80036cc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d006      	beq.n	80036cc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <osMessageGet+0x5c>
      ticks = 1;
 80036c8:	2301      	movs	r3, #1
 80036ca:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80036cc:	f7ff feef 	bl	80034ae <inHandlerMode>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d01c      	beq.n	8003710 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80036d6:	f107 0220 	add.w	r2, r7, #32
 80036da:	f107 0314 	add.w	r3, r7, #20
 80036de:	3304      	adds	r3, #4
 80036e0:	4619      	mov	r1, r3
 80036e2:	68b8      	ldr	r0, [r7, #8]
 80036e4:	f000 fcb0 	bl	8004048 <xQueueReceiveFromISR>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d102      	bne.n	80036f4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80036ee:	2310      	movs	r3, #16
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	e001      	b.n	80036f8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01d      	beq.n	800373a <osMessageGet+0xca>
 80036fe:	4b15      	ldr	r3, [pc, #84]	@ (8003754 <osMessageGet+0xe4>)
 8003700:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	f3bf 8f6f 	isb	sy
 800370e:	e014      	b.n	800373a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003710:	f107 0314 	add.w	r3, r7, #20
 8003714:	3304      	adds	r3, #4
 8003716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003718:	4619      	mov	r1, r3
 800371a:	68b8      	ldr	r0, [r7, #8]
 800371c:	f000 fbb2 	bl	8003e84 <xQueueReceive>
 8003720:	4603      	mov	r3, r0
 8003722:	2b01      	cmp	r3, #1
 8003724:	d102      	bne.n	800372c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003726:	2310      	movs	r3, #16
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	e006      	b.n	800373a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800372c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <osMessageGet+0xc6>
 8003732:	2300      	movs	r3, #0
 8003734:	e000      	b.n	8003738 <osMessageGet+0xc8>
 8003736:	2340      	movs	r3, #64	@ 0x40
 8003738:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	461c      	mov	r4, r3
 800373e:	f107 0314 	add.w	r3, r7, #20
 8003742:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003746:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	372c      	adds	r7, #44	@ 0x2c
 800374e:	46bd      	mov	sp, r7
 8003750:	bd90      	pop	{r4, r7, pc}
 8003752:	bf00      	nop
 8003754:	e000ed04 	.word	0xe000ed04

08003758 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f103 0208 	add.w	r2, r3, #8
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f04f 32ff 	mov.w	r2, #4294967295
 8003770:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f103 0208 	add.w	r2, r3, #8
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f103 0208 	add.w	r2, r3, #8
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037b2:	b480      	push	{r7}
 80037b4:	b085      	sub	sp, #20
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	601a      	str	r2, [r3, #0]
}
 80037ee:	bf00      	nop
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037fa:	b480      	push	{r7}
 80037fc:	b085      	sub	sp, #20
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003810:	d103      	bne.n	800381a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	e00c      	b.n	8003834 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3308      	adds	r3, #8
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	e002      	b.n	8003828 <vListInsert+0x2e>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	429a      	cmp	r2, r3
 8003832:	d2f6      	bcs.n	8003822 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	601a      	str	r2, [r3, #0]
}
 8003860:	bf00      	nop
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6892      	ldr	r2, [r2, #8]
 8003882:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6852      	ldr	r2, [r2, #4]
 800388c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	429a      	cmp	r2, r3
 8003896:	d103      	bne.n	80038a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	1e5a      	subs	r2, r3, #1
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10b      	bne.n	80038ec <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d8:	f383 8811 	msr	BASEPRI, r3
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	e7fd      	b.n	80038e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80038ec:	f001 fd84 	bl	80053f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f8:	68f9      	ldr	r1, [r7, #12]
 80038fa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	441a      	add	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391c:	3b01      	subs	r3, #1
 800391e:	68f9      	ldr	r1, [r7, #12]
 8003920:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003922:	fb01 f303 	mul.w	r3, r1, r3
 8003926:	441a      	add	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	22ff      	movs	r2, #255	@ 0xff
 8003930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	22ff      	movs	r2, #255	@ 0xff
 8003938:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d114      	bne.n	800396c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d01a      	beq.n	8003980 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3310      	adds	r3, #16
 800394e:	4618      	mov	r0, r3
 8003950:	f001 f94c 	bl	8004bec <xTaskRemoveFromEventList>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d012      	beq.n	8003980 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800395a:	4b0d      	ldr	r3, [pc, #52]	@ (8003990 <xQueueGenericReset+0xd0>)
 800395c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	e009      	b.n	8003980 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3310      	adds	r3, #16
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff fef1 	bl	8003758 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	3324      	adds	r3, #36	@ 0x24
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff feec 	bl	8003758 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003980:	f001 fd6c 	bl	800545c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003984:	2301      	movs	r3, #1
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	e000ed04 	.word	0xe000ed04

08003994 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08e      	sub	sp, #56	@ 0x38
 8003998:	af02      	add	r7, sp, #8
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10b      	bne.n	80039c0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80039ba:	bf00      	nop
 80039bc:	bf00      	nop
 80039be:	e7fd      	b.n	80039bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10b      	bne.n	80039de <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80039c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	e7fd      	b.n	80039da <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <xQueueGenericCreateStatic+0x56>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <xQueueGenericCreateStatic+0x5a>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <xQueueGenericCreateStatic+0x5c>
 80039ee:	2300      	movs	r3, #0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10b      	bne.n	8003a0c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	623b      	str	r3, [r7, #32]
}
 8003a06:	bf00      	nop
 8003a08:	bf00      	nop
 8003a0a:	e7fd      	b.n	8003a08 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d102      	bne.n	8003a18 <xQueueGenericCreateStatic+0x84>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <xQueueGenericCreateStatic+0x88>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <xQueueGenericCreateStatic+0x8a>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10b      	bne.n	8003a3a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a26:	f383 8811 	msr	BASEPRI, r3
 8003a2a:	f3bf 8f6f 	isb	sy
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	61fb      	str	r3, [r7, #28]
}
 8003a34:	bf00      	nop
 8003a36:	bf00      	nop
 8003a38:	e7fd      	b.n	8003a36 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a3a:	2348      	movs	r3, #72	@ 0x48
 8003a3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b48      	cmp	r3, #72	@ 0x48
 8003a42:	d00b      	beq.n	8003a5c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	61bb      	str	r3, [r7, #24]
}
 8003a56:	bf00      	nop
 8003a58:	bf00      	nop
 8003a5a:	e7fd      	b.n	8003a58 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a5c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00d      	beq.n	8003a84 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a70:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f840 	bl	8003b04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3730      	adds	r7, #48	@ 0x30
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b08a      	sub	sp, #40	@ 0x28
 8003a92:	af02      	add	r7, sp, #8
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10b      	bne.n	8003aba <xQueueGenericCreate+0x2c>
	__asm volatile
 8003aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa6:	f383 8811 	msr	BASEPRI, r3
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	613b      	str	r3, [r7, #16]
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	e7fd      	b.n	8003ab6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	fb02 f303 	mul.w	r3, r2, r3
 8003ac2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	3348      	adds	r3, #72	@ 0x48
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 fdb7 	bl	800563c <pvPortMalloc>
 8003ace:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d011      	beq.n	8003afa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	3348      	adds	r3, #72	@ 0x48
 8003ade:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ae8:	79fa      	ldrb	r2, [r7, #7]
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	4613      	mov	r3, r2
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	68b9      	ldr	r1, [r7, #8]
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f805 	bl	8003b04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003afa:	69bb      	ldr	r3, [r7, #24]
	}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3720      	adds	r7, #32
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d103      	bne.n	8003b20 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	e002      	b.n	8003b26 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b32:	2101      	movs	r1, #1
 8003b34:	69b8      	ldr	r0, [r7, #24]
 8003b36:	f7ff fec3 	bl	80038c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08e      	sub	sp, #56	@ 0x38
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b52:	2300      	movs	r3, #0
 8003b54:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10b      	bne.n	8003b78 <xQueueGenericSend+0x34>
	__asm volatile
 8003b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b72:	bf00      	nop
 8003b74:	bf00      	nop
 8003b76:	e7fd      	b.n	8003b74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d103      	bne.n	8003b86 <xQueueGenericSend+0x42>
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <xQueueGenericSend+0x46>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <xQueueGenericSend+0x48>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10b      	bne.n	8003ba8 <xQueueGenericSend+0x64>
	__asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ba2:	bf00      	nop
 8003ba4:	bf00      	nop
 8003ba6:	e7fd      	b.n	8003ba4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d103      	bne.n	8003bb6 <xQueueGenericSend+0x72>
 8003bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <xQueueGenericSend+0x76>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <xQueueGenericSend+0x78>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10b      	bne.n	8003bd8 <xQueueGenericSend+0x94>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	623b      	str	r3, [r7, #32]
}
 8003bd2:	bf00      	nop
 8003bd4:	bf00      	nop
 8003bd6:	e7fd      	b.n	8003bd4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bd8:	f001 f9ce 	bl	8004f78 <xTaskGetSchedulerState>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d102      	bne.n	8003be8 <xQueueGenericSend+0xa4>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <xQueueGenericSend+0xa8>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <xQueueGenericSend+0xaa>
 8003bec:	2300      	movs	r3, #0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10b      	bne.n	8003c0a <xQueueGenericSend+0xc6>
	__asm volatile
 8003bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf6:	f383 8811 	msr	BASEPRI, r3
 8003bfa:	f3bf 8f6f 	isb	sy
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	61fb      	str	r3, [r7, #28]
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop
 8003c08:	e7fd      	b.n	8003c06 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c0a:	f001 fbf5 	bl	80053f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d302      	bcc.n	8003c20 <xQueueGenericSend+0xdc>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d129      	bne.n	8003c74 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	68b9      	ldr	r1, [r7, #8]
 8003c24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c26:	f000 fa91 	bl	800414c <prvCopyDataToQueue>
 8003c2a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d010      	beq.n	8003c56 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c36:	3324      	adds	r3, #36	@ 0x24
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 ffd7 	bl	8004bec <xTaskRemoveFromEventList>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d013      	beq.n	8003c6c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c44:	4b3f      	ldr	r3, [pc, #252]	@ (8003d44 <xQueueGenericSend+0x200>)
 8003c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	e00a      	b.n	8003c6c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d007      	beq.n	8003c6c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c5c:	4b39      	ldr	r3, [pc, #228]	@ (8003d44 <xQueueGenericSend+0x200>)
 8003c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c6c:	f001 fbf6 	bl	800545c <vPortExitCritical>
				return pdPASS;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e063      	b.n	8003d3c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d103      	bne.n	8003c82 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c7a:	f001 fbef 	bl	800545c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	e05c      	b.n	8003d3c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d106      	bne.n	8003c96 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c88:	f107 0314 	add.w	r3, r7, #20
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f001 f811 	bl	8004cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c92:	2301      	movs	r3, #1
 8003c94:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c96:	f001 fbe1 	bl	800545c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c9a:	f000 fdb7 	bl	800480c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c9e:	f001 fbab 	bl	80053f8 <vPortEnterCritical>
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ca8:	b25b      	sxtb	r3, r3
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cae:	d103      	bne.n	8003cb8 <xQueueGenericSend+0x174>
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cbe:	b25b      	sxtb	r3, r3
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d103      	bne.n	8003cce <xQueueGenericSend+0x18a>
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cce:	f001 fbc5 	bl	800545c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cd2:	1d3a      	adds	r2, r7, #4
 8003cd4:	f107 0314 	add.w	r3, r7, #20
 8003cd8:	4611      	mov	r1, r2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f001 f800 	bl	8004ce0 <xTaskCheckForTimeOut>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d124      	bne.n	8003d30 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ce6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ce8:	f000 fb28 	bl	800433c <prvIsQueueFull>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d018      	beq.n	8003d24 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf4:	3310      	adds	r3, #16
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	4611      	mov	r1, r2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 ff50 	bl	8004ba0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d02:	f000 fab3 	bl	800426c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d06:	f000 fd8f 	bl	8004828 <xTaskResumeAll>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f47f af7c 	bne.w	8003c0a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003d12:	4b0c      	ldr	r3, [pc, #48]	@ (8003d44 <xQueueGenericSend+0x200>)
 8003d14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	e772      	b.n	8003c0a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d26:	f000 faa1 	bl	800426c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d2a:	f000 fd7d 	bl	8004828 <xTaskResumeAll>
 8003d2e:	e76c      	b.n	8003c0a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d32:	f000 fa9b 	bl	800426c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d36:	f000 fd77 	bl	8004828 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3738      	adds	r7, #56	@ 0x38
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	e000ed04 	.word	0xe000ed04

08003d48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b090      	sub	sp, #64	@ 0x40
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10b      	bne.n	8003d78 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d72:	bf00      	nop
 8003d74:	bf00      	nop
 8003d76:	e7fd      	b.n	8003d74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d103      	bne.n	8003d86 <xQueueGenericSendFromISR+0x3e>
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <xQueueGenericSendFromISR+0x42>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <xQueueGenericSendFromISR+0x44>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10b      	bne.n	8003da8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003da2:	bf00      	nop
 8003da4:	bf00      	nop
 8003da6:	e7fd      	b.n	8003da4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d103      	bne.n	8003db6 <xQueueGenericSendFromISR+0x6e>
 8003dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <xQueueGenericSendFromISR+0x72>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <xQueueGenericSendFromISR+0x74>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10b      	bne.n	8003dd8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	623b      	str	r3, [r7, #32]
}
 8003dd2:	bf00      	nop
 8003dd4:	bf00      	nop
 8003dd6:	e7fd      	b.n	8003dd4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003dd8:	f001 fbee 	bl	80055b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003ddc:	f3ef 8211 	mrs	r2, BASEPRI
 8003de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	61fa      	str	r2, [r7, #28]
 8003df2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003df4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003df6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d302      	bcc.n	8003e0a <xQueueGenericSendFromISR+0xc2>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d12f      	bne.n	8003e6a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003e20:	f000 f994 	bl	800414c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e24:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2c:	d112      	bne.n	8003e54 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d016      	beq.n	8003e64 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e38:	3324      	adds	r3, #36	@ 0x24
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fed6 	bl	8004bec <xTaskRemoveFromEventList>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00e      	beq.n	8003e64 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00b      	beq.n	8003e64 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	e007      	b.n	8003e64 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003e58:	3301      	adds	r3, #1
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	b25a      	sxtb	r2, r3
 8003e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003e64:	2301      	movs	r3, #1
 8003e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003e68:	e001      	b.n	8003e6e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e70:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e78:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3740      	adds	r7, #64	@ 0x40
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08c      	sub	sp, #48	@ 0x30
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e90:	2300      	movs	r3, #0
 8003e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10b      	bne.n	8003eb6 <xQueueReceive+0x32>
	__asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	623b      	str	r3, [r7, #32]
}
 8003eb0:	bf00      	nop
 8003eb2:	bf00      	nop
 8003eb4:	e7fd      	b.n	8003eb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d103      	bne.n	8003ec4 <xQueueReceive+0x40>
 8003ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <xQueueReceive+0x44>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <xQueueReceive+0x46>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10b      	bne.n	8003ee6 <xQueueReceive+0x62>
	__asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	61fb      	str	r3, [r7, #28]
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	e7fd      	b.n	8003ee2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ee6:	f001 f847 	bl	8004f78 <xTaskGetSchedulerState>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d102      	bne.n	8003ef6 <xQueueReceive+0x72>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <xQueueReceive+0x76>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <xQueueReceive+0x78>
 8003efa:	2300      	movs	r3, #0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10b      	bne.n	8003f18 <xQueueReceive+0x94>
	__asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	61bb      	str	r3, [r7, #24]
}
 8003f12:	bf00      	nop
 8003f14:	bf00      	nop
 8003f16:	e7fd      	b.n	8003f14 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f18:	f001 fa6e 	bl	80053f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01f      	beq.n	8003f68 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f28:	68b9      	ldr	r1, [r7, #8]
 8003f2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f2c:	f000 f978 	bl	8004220 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f32:	1e5a      	subs	r2, r3, #1
 8003f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f36:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00f      	beq.n	8003f60 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f42:	3310      	adds	r3, #16
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fe51 	bl	8004bec <xTaskRemoveFromEventList>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d007      	beq.n	8003f60 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f50:	4b3c      	ldr	r3, [pc, #240]	@ (8004044 <xQueueReceive+0x1c0>)
 8003f52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f60:	f001 fa7c 	bl	800545c <vPortExitCritical>
				return pdPASS;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e069      	b.n	800403c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d103      	bne.n	8003f76 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f6e:	f001 fa75 	bl	800545c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f72:	2300      	movs	r3, #0
 8003f74:	e062      	b.n	800403c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d106      	bne.n	8003f8a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f7c:	f107 0310 	add.w	r3, r7, #16
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 fe97 	bl	8004cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f86:	2301      	movs	r3, #1
 8003f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f8a:	f001 fa67 	bl	800545c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f8e:	f000 fc3d 	bl	800480c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f92:	f001 fa31 	bl	80053f8 <vPortEnterCritical>
 8003f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f9c:	b25b      	sxtb	r3, r3
 8003f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa2:	d103      	bne.n	8003fac <xQueueReceive+0x128>
 8003fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003fb2:	b25b      	sxtb	r3, r3
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb8:	d103      	bne.n	8003fc2 <xQueueReceive+0x13e>
 8003fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fc2:	f001 fa4b 	bl	800545c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fc6:	1d3a      	adds	r2, r7, #4
 8003fc8:	f107 0310 	add.w	r3, r7, #16
 8003fcc:	4611      	mov	r1, r2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fe86 	bl	8004ce0 <xTaskCheckForTimeOut>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d123      	bne.n	8004022 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fdc:	f000 f998 	bl	8004310 <prvIsQueueEmpty>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d017      	beq.n	8004016 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe8:	3324      	adds	r3, #36	@ 0x24
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	4611      	mov	r1, r2
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fdd6 	bl	8004ba0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ff4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ff6:	f000 f939 	bl	800426c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ffa:	f000 fc15 	bl	8004828 <xTaskResumeAll>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d189      	bne.n	8003f18 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004004:	4b0f      	ldr	r3, [pc, #60]	@ (8004044 <xQueueReceive+0x1c0>)
 8004006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	e780      	b.n	8003f18 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004016:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004018:	f000 f928 	bl	800426c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800401c:	f000 fc04 	bl	8004828 <xTaskResumeAll>
 8004020:	e77a      	b.n	8003f18 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004022:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004024:	f000 f922 	bl	800426c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004028:	f000 fbfe 	bl	8004828 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800402c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800402e:	f000 f96f 	bl	8004310 <prvIsQueueEmpty>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	f43f af6f 	beq.w	8003f18 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800403a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800403c:	4618      	mov	r0, r3
 800403e:	3730      	adds	r7, #48	@ 0x30
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	e000ed04 	.word	0xe000ed04

08004048 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08e      	sub	sp, #56	@ 0x38
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10b      	bne.n	8004076 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	623b      	str	r3, [r7, #32]
}
 8004070:	bf00      	nop
 8004072:	bf00      	nop
 8004074:	e7fd      	b.n	8004072 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d103      	bne.n	8004084 <xQueueReceiveFromISR+0x3c>
 800407c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <xQueueReceiveFromISR+0x40>
 8004084:	2301      	movs	r3, #1
 8004086:	e000      	b.n	800408a <xQueueReceiveFromISR+0x42>
 8004088:	2300      	movs	r3, #0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10b      	bne.n	80040a6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800408e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	61fb      	str	r3, [r7, #28]
}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop
 80040a4:	e7fd      	b.n	80040a2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040a6:	f001 fa87 	bl	80055b8 <vPortValidateInterruptPriority>
	__asm volatile
 80040aa:	f3ef 8211 	mrs	r2, BASEPRI
 80040ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	61ba      	str	r2, [r7, #24]
 80040c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80040c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ca:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d02f      	beq.n	8004132 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80040d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040e0:	f000 f89e 	bl	8004220 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e6:	1e5a      	subs	r2, r3, #1
 80040e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80040ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f4:	d112      	bne.n	800411c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d016      	beq.n	800412c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004100:	3310      	adds	r3, #16
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fd72 	bl	8004bec <xTaskRemoveFromEventList>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00e      	beq.n	800412c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00b      	beq.n	800412c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	e007      	b.n	800412c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800411c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004120:	3301      	adds	r3, #1
 8004122:	b2db      	uxtb	r3, r3
 8004124:	b25a      	sxtb	r2, r3
 8004126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800412c:	2301      	movs	r3, #1
 800412e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004130:	e001      	b.n	8004136 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004132:	2300      	movs	r3, #0
 8004134:	637b      	str	r3, [r7, #52]	@ 0x34
 8004136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004138:	613b      	str	r3, [r7, #16]
	__asm volatile
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f383 8811 	msr	BASEPRI, r3
}
 8004140:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004144:	4618      	mov	r0, r3
 8004146:	3738      	adds	r7, #56	@ 0x38
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004160:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10d      	bne.n	8004186 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d14d      	bne.n	800420e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 ff1c 	bl	8004fb4 <xTaskPriorityDisinherit>
 800417c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	609a      	str	r2, [r3, #8]
 8004184:	e043      	b.n	800420e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d119      	bne.n	80041c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6858      	ldr	r0, [r3, #4]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004194:	461a      	mov	r2, r3
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	f001 fcca 	bl	8005b30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a4:	441a      	add	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d32b      	bcc.n	800420e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	605a      	str	r2, [r3, #4]
 80041be:	e026      	b.n	800420e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	68d8      	ldr	r0, [r3, #12]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c8:	461a      	mov	r2, r3
 80041ca:	68b9      	ldr	r1, [r7, #8]
 80041cc:	f001 fcb0 	bl	8005b30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d8:	425b      	negs	r3, r3
 80041da:	441a      	add	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d207      	bcs.n	80041fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f4:	425b      	negs	r3, r3
 80041f6:	441a      	add	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d105      	bne.n	800420e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	3b01      	subs	r3, #1
 800420c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004216:	697b      	ldr	r3, [r7, #20]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d018      	beq.n	8004264 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	441a      	add	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	429a      	cmp	r2, r3
 800424a:	d303      	bcc.n	8004254 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68d9      	ldr	r1, [r3, #12]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425c:	461a      	mov	r2, r3
 800425e:	6838      	ldr	r0, [r7, #0]
 8004260:	f001 fc66 	bl	8005b30 <memcpy>
	}
}
 8004264:	bf00      	nop
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004274:	f001 f8c0 	bl	80053f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800427e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004280:	e011      	b.n	80042a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004286:	2b00      	cmp	r3, #0
 8004288:	d012      	beq.n	80042b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3324      	adds	r3, #36	@ 0x24
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fcac 	bl	8004bec <xTaskRemoveFromEventList>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800429a:	f000 fd85 	bl	8004da8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800429e:	7bfb      	ldrb	r3, [r7, #15]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	dce9      	bgt.n	8004282 <prvUnlockQueue+0x16>
 80042ae:	e000      	b.n	80042b2 <prvUnlockQueue+0x46>
					break;
 80042b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	22ff      	movs	r2, #255	@ 0xff
 80042b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80042ba:	f001 f8cf 	bl	800545c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80042be:	f001 f89b 	bl	80053f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042ca:	e011      	b.n	80042f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d012      	beq.n	80042fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3310      	adds	r3, #16
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fc87 	bl	8004bec <xTaskRemoveFromEventList>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80042e4:	f000 fd60 	bl	8004da8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80042e8:	7bbb      	ldrb	r3, [r7, #14]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	dce9      	bgt.n	80042cc <prvUnlockQueue+0x60>
 80042f8:	e000      	b.n	80042fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80042fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	22ff      	movs	r2, #255	@ 0xff
 8004300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004304:	f001 f8aa 	bl	800545c <vPortExitCritical>
}
 8004308:	bf00      	nop
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004318:	f001 f86e 	bl	80053f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004320:	2b00      	cmp	r3, #0
 8004322:	d102      	bne.n	800432a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004324:	2301      	movs	r3, #1
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	e001      	b.n	800432e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800432e:	f001 f895 	bl	800545c <vPortExitCritical>

	return xReturn;
 8004332:	68fb      	ldr	r3, [r7, #12]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004344:	f001 f858 	bl	80053f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004350:	429a      	cmp	r2, r3
 8004352:	d102      	bne.n	800435a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004354:	2301      	movs	r3, #1
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	e001      	b.n	800435e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800435e:	f001 f87d 	bl	800545c <vPortExitCritical>

	return xReturn;
 8004362:	68fb      	ldr	r3, [r7, #12]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08e      	sub	sp, #56	@ 0x38
 8004370:	af04      	add	r7, sp, #16
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800437a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10b      	bne.n	8004398 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	623b      	str	r3, [r7, #32]
}
 8004392:	bf00      	nop
 8004394:	bf00      	nop
 8004396:	e7fd      	b.n	8004394 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10b      	bne.n	80043b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	61fb      	str	r3, [r7, #28]
}
 80043b0:	bf00      	nop
 80043b2:	bf00      	nop
 80043b4:	e7fd      	b.n	80043b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043b6:	23a0      	movs	r3, #160	@ 0xa0
 80043b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80043be:	d00b      	beq.n	80043d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	61bb      	str	r3, [r7, #24]
}
 80043d2:	bf00      	nop
 80043d4:	bf00      	nop
 80043d6:	e7fd      	b.n	80043d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01e      	beq.n	800441e <xTaskCreateStatic+0xb2>
 80043e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01b      	beq.n	800441e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043f8:	2300      	movs	r3, #0
 80043fa:	9303      	str	r3, [sp, #12]
 80043fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fe:	9302      	str	r3, [sp, #8]
 8004400:	f107 0314 	add.w	r3, r7, #20
 8004404:	9301      	str	r3, [sp, #4]
 8004406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f851 	bl	80044b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004416:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004418:	f000 f8ee 	bl	80045f8 <prvAddNewTaskToReadyList>
 800441c:	e001      	b.n	8004422 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004422:	697b      	ldr	r3, [r7, #20]
	}
 8004424:	4618      	mov	r0, r3
 8004426:	3728      	adds	r7, #40	@ 0x28
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08c      	sub	sp, #48	@ 0x30
 8004430:	af04      	add	r7, sp, #16
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	4613      	mov	r3, r2
 800443a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800443c:	88fb      	ldrh	r3, [r7, #6]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4618      	mov	r0, r3
 8004442:	f001 f8fb 	bl	800563c <pvPortMalloc>
 8004446:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00e      	beq.n	800446c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800444e:	20a0      	movs	r0, #160	@ 0xa0
 8004450:	f001 f8f4 	bl	800563c <pvPortMalloc>
 8004454:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	631a      	str	r2, [r3, #48]	@ 0x30
 8004462:	e005      	b.n	8004470 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004464:	6978      	ldr	r0, [r7, #20]
 8004466:	f001 f9b7 	bl	80057d8 <vPortFree>
 800446a:	e001      	b.n	8004470 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800446c:	2300      	movs	r3, #0
 800446e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d017      	beq.n	80044a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800447e:	88fa      	ldrh	r2, [r7, #6]
 8004480:	2300      	movs	r3, #0
 8004482:	9303      	str	r3, [sp, #12]
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	9302      	str	r3, [sp, #8]
 8004488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448a:	9301      	str	r3, [sp, #4]
 800448c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f80f 	bl	80044b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800449a:	69f8      	ldr	r0, [r7, #28]
 800449c:	f000 f8ac 	bl	80045f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044a0:	2301      	movs	r3, #1
 80044a2:	61bb      	str	r3, [r7, #24]
 80044a4:	e002      	b.n	80044ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295
 80044aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044ac:	69bb      	ldr	r3, [r7, #24]
	}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3720      	adds	r7, #32
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044d0:	3b01      	subs	r3, #1
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	f023 0307 	bic.w	r3, r3, #7
 80044de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00b      	beq.n	8004502 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80044ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	617b      	str	r3, [r7, #20]
}
 80044fc:	bf00      	nop
 80044fe:	bf00      	nop
 8004500:	e7fd      	b.n	80044fe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01f      	beq.n	8004548 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004508:	2300      	movs	r3, #0
 800450a:	61fb      	str	r3, [r7, #28]
 800450c:	e012      	b.n	8004534 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	4413      	add	r3, r2
 8004514:	7819      	ldrb	r1, [r3, #0]
 8004516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	4413      	add	r3, r2
 800451c:	3334      	adds	r3, #52	@ 0x34
 800451e:	460a      	mov	r2, r1
 8004520:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	4413      	add	r3, r2
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d006      	beq.n	800453c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	3301      	adds	r3, #1
 8004532:	61fb      	str	r3, [r7, #28]
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	2b0f      	cmp	r3, #15
 8004538:	d9e9      	bls.n	800450e <prvInitialiseNewTask+0x56>
 800453a:	e000      	b.n	800453e <prvInitialiseNewTask+0x86>
			{
				break;
 800453c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800453e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004546:	e003      	b.n	8004550 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004552:	2b06      	cmp	r3, #6
 8004554:	d901      	bls.n	800455a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004556:	2306      	movs	r3, #6
 8004558:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800455a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800455e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004562:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004564:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004568:	2200      	movs	r2, #0
 800456a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800456c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456e:	3304      	adds	r3, #4
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff f911 	bl	8003798 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004578:	3318      	adds	r3, #24
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff f90c 	bl	8003798 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004584:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004588:	f1c3 0207 	rsb	r2, r3, #7
 800458c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004594:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004598:	2200      	movs	r2, #0
 800459a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800459e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80045a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a8:	334c      	adds	r3, #76	@ 0x4c
 80045aa:	224c      	movs	r2, #76	@ 0x4c
 80045ac:	2100      	movs	r1, #0
 80045ae:	4618      	mov	r0, r3
 80045b0:	f001 fa32 	bl	8005a18 <memset>
 80045b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b6:	4a0d      	ldr	r2, [pc, #52]	@ (80045ec <prvInitialiseNewTask+0x134>)
 80045b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80045ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045bc:	4a0c      	ldr	r2, [pc, #48]	@ (80045f0 <prvInitialiseNewTask+0x138>)
 80045be:	655a      	str	r2, [r3, #84]	@ 0x54
 80045c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c2:	4a0c      	ldr	r2, [pc, #48]	@ (80045f4 <prvInitialiseNewTask+0x13c>)
 80045c4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	68f9      	ldr	r1, [r7, #12]
 80045ca:	69b8      	ldr	r0, [r7, #24]
 80045cc:	f000 fde0 	bl	8005190 <pxPortInitialiseStack>
 80045d0:	4602      	mov	r2, r0
 80045d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045e2:	bf00      	nop
 80045e4:	3720      	adds	r7, #32
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	2000152c 	.word	0x2000152c
 80045f0:	20001594 	.word	0x20001594
 80045f4:	200015fc 	.word	0x200015fc

080045f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004600:	f000 fefa 	bl	80053f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004604:	4b2a      	ldr	r3, [pc, #168]	@ (80046b0 <prvAddNewTaskToReadyList+0xb8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3301      	adds	r3, #1
 800460a:	4a29      	ldr	r2, [pc, #164]	@ (80046b0 <prvAddNewTaskToReadyList+0xb8>)
 800460c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800460e:	4b29      	ldr	r3, [pc, #164]	@ (80046b4 <prvAddNewTaskToReadyList+0xbc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004616:	4a27      	ldr	r2, [pc, #156]	@ (80046b4 <prvAddNewTaskToReadyList+0xbc>)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800461c:	4b24      	ldr	r3, [pc, #144]	@ (80046b0 <prvAddNewTaskToReadyList+0xb8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d110      	bne.n	8004646 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004624:	f000 fbe4 	bl	8004df0 <prvInitialiseTaskLists>
 8004628:	e00d      	b.n	8004646 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800462a:	4b23      	ldr	r3, [pc, #140]	@ (80046b8 <prvAddNewTaskToReadyList+0xc0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004632:	4b20      	ldr	r3, [pc, #128]	@ (80046b4 <prvAddNewTaskToReadyList+0xbc>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463c:	429a      	cmp	r2, r3
 800463e:	d802      	bhi.n	8004646 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004640:	4a1c      	ldr	r2, [pc, #112]	@ (80046b4 <prvAddNewTaskToReadyList+0xbc>)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004646:	4b1d      	ldr	r3, [pc, #116]	@ (80046bc <prvAddNewTaskToReadyList+0xc4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3301      	adds	r3, #1
 800464c:	4a1b      	ldr	r2, [pc, #108]	@ (80046bc <prvAddNewTaskToReadyList+0xc4>)
 800464e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004654:	2201      	movs	r2, #1
 8004656:	409a      	lsls	r2, r3
 8004658:	4b19      	ldr	r3, [pc, #100]	@ (80046c0 <prvAddNewTaskToReadyList+0xc8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4313      	orrs	r3, r2
 800465e:	4a18      	ldr	r2, [pc, #96]	@ (80046c0 <prvAddNewTaskToReadyList+0xc8>)
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4a15      	ldr	r2, [pc, #84]	@ (80046c4 <prvAddNewTaskToReadyList+0xcc>)
 8004670:	441a      	add	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3304      	adds	r3, #4
 8004676:	4619      	mov	r1, r3
 8004678:	4610      	mov	r0, r2
 800467a:	f7ff f89a 	bl	80037b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800467e:	f000 feed 	bl	800545c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004682:	4b0d      	ldr	r3, [pc, #52]	@ (80046b8 <prvAddNewTaskToReadyList+0xc0>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00e      	beq.n	80046a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800468a:	4b0a      	ldr	r3, [pc, #40]	@ (80046b4 <prvAddNewTaskToReadyList+0xbc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004694:	429a      	cmp	r2, r3
 8004696:	d207      	bcs.n	80046a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004698:	4b0b      	ldr	r3, [pc, #44]	@ (80046c8 <prvAddNewTaskToReadyList+0xd0>)
 800469a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046a8:	bf00      	nop
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	200004d8 	.word	0x200004d8
 80046b4:	200003d8 	.word	0x200003d8
 80046b8:	200004e4 	.word	0x200004e4
 80046bc:	200004f4 	.word	0x200004f4
 80046c0:	200004e0 	.word	0x200004e0
 80046c4:	200003dc 	.word	0x200003dc
 80046c8:	e000ed04 	.word	0xe000ed04

080046cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d018      	beq.n	8004710 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046de:	4b14      	ldr	r3, [pc, #80]	@ (8004730 <vTaskDelay+0x64>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00b      	beq.n	80046fe <vTaskDelay+0x32>
	__asm volatile
 80046e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	60bb      	str	r3, [r7, #8]
}
 80046f8:	bf00      	nop
 80046fa:	bf00      	nop
 80046fc:	e7fd      	b.n	80046fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80046fe:	f000 f885 	bl	800480c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004702:	2100      	movs	r1, #0
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 fcdd 	bl	80050c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800470a:	f000 f88d 	bl	8004828 <xTaskResumeAll>
 800470e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d107      	bne.n	8004726 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004716:	4b07      	ldr	r3, [pc, #28]	@ (8004734 <vTaskDelay+0x68>)
 8004718:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004726:	bf00      	nop
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000500 	.word	0x20000500
 8004734:	e000ed04 	.word	0xe000ed04

08004738 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08a      	sub	sp, #40	@ 0x28
 800473c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800473e:	2300      	movs	r3, #0
 8004740:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004742:	2300      	movs	r3, #0
 8004744:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004746:	463a      	mov	r2, r7
 8004748:	1d39      	adds	r1, r7, #4
 800474a:	f107 0308 	add.w	r3, r7, #8
 800474e:	4618      	mov	r0, r3
 8004750:	f7fb fedc 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004754:	6839      	ldr	r1, [r7, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	9202      	str	r2, [sp, #8]
 800475c:	9301      	str	r3, [sp, #4]
 800475e:	2300      	movs	r3, #0
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	2300      	movs	r3, #0
 8004764:	460a      	mov	r2, r1
 8004766:	4921      	ldr	r1, [pc, #132]	@ (80047ec <vTaskStartScheduler+0xb4>)
 8004768:	4821      	ldr	r0, [pc, #132]	@ (80047f0 <vTaskStartScheduler+0xb8>)
 800476a:	f7ff fdff 	bl	800436c <xTaskCreateStatic>
 800476e:	4603      	mov	r3, r0
 8004770:	4a20      	ldr	r2, [pc, #128]	@ (80047f4 <vTaskStartScheduler+0xbc>)
 8004772:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004774:	4b1f      	ldr	r3, [pc, #124]	@ (80047f4 <vTaskStartScheduler+0xbc>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800477c:	2301      	movs	r3, #1
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	e001      	b.n	8004786 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004782:	2300      	movs	r3, #0
 8004784:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d11b      	bne.n	80047c4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	613b      	str	r3, [r7, #16]
}
 800479e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80047a0:	4b15      	ldr	r3, [pc, #84]	@ (80047f8 <vTaskStartScheduler+0xc0>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	334c      	adds	r3, #76	@ 0x4c
 80047a6:	4a15      	ldr	r2, [pc, #84]	@ (80047fc <vTaskStartScheduler+0xc4>)
 80047a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047aa:	4b15      	ldr	r3, [pc, #84]	@ (8004800 <vTaskStartScheduler+0xc8>)
 80047ac:	f04f 32ff 	mov.w	r2, #4294967295
 80047b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047b2:	4b14      	ldr	r3, [pc, #80]	@ (8004804 <vTaskStartScheduler+0xcc>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047b8:	4b13      	ldr	r3, [pc, #76]	@ (8004808 <vTaskStartScheduler+0xd0>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047be:	f000 fd77 	bl	80052b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047c2:	e00f      	b.n	80047e4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ca:	d10b      	bne.n	80047e4 <vTaskStartScheduler+0xac>
	__asm volatile
 80047cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	60fb      	str	r3, [r7, #12]
}
 80047de:	bf00      	nop
 80047e0:	bf00      	nop
 80047e2:	e7fd      	b.n	80047e0 <vTaskStartScheduler+0xa8>
}
 80047e4:	bf00      	nop
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	08005c9c 	.word	0x08005c9c
 80047f0:	08004dc1 	.word	0x08004dc1
 80047f4:	200004fc 	.word	0x200004fc
 80047f8:	200003d8 	.word	0x200003d8
 80047fc:	20000014 	.word	0x20000014
 8004800:	200004f8 	.word	0x200004f8
 8004804:	200004e4 	.word	0x200004e4
 8004808:	200004dc 	.word	0x200004dc

0800480c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004810:	4b04      	ldr	r3, [pc, #16]	@ (8004824 <vTaskSuspendAll+0x18>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3301      	adds	r3, #1
 8004816:	4a03      	ldr	r2, [pc, #12]	@ (8004824 <vTaskSuspendAll+0x18>)
 8004818:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800481a:	bf00      	nop
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	20000500 	.word	0x20000500

08004828 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004832:	2300      	movs	r3, #0
 8004834:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004836:	4b42      	ldr	r3, [pc, #264]	@ (8004940 <xTaskResumeAll+0x118>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10b      	bne.n	8004856 <xTaskResumeAll+0x2e>
	__asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	603b      	str	r3, [r7, #0]
}
 8004850:	bf00      	nop
 8004852:	bf00      	nop
 8004854:	e7fd      	b.n	8004852 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004856:	f000 fdcf 	bl	80053f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800485a:	4b39      	ldr	r3, [pc, #228]	@ (8004940 <xTaskResumeAll+0x118>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3b01      	subs	r3, #1
 8004860:	4a37      	ldr	r2, [pc, #220]	@ (8004940 <xTaskResumeAll+0x118>)
 8004862:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004864:	4b36      	ldr	r3, [pc, #216]	@ (8004940 <xTaskResumeAll+0x118>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d161      	bne.n	8004930 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800486c:	4b35      	ldr	r3, [pc, #212]	@ (8004944 <xTaskResumeAll+0x11c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d05d      	beq.n	8004930 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004874:	e02e      	b.n	80048d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004876:	4b34      	ldr	r3, [pc, #208]	@ (8004948 <xTaskResumeAll+0x120>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3318      	adds	r3, #24
 8004882:	4618      	mov	r0, r3
 8004884:	f7fe fff2 	bl	800386c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3304      	adds	r3, #4
 800488c:	4618      	mov	r0, r3
 800488e:	f7fe ffed 	bl	800386c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004896:	2201      	movs	r2, #1
 8004898:	409a      	lsls	r2, r3
 800489a:	4b2c      	ldr	r3, [pc, #176]	@ (800494c <xTaskResumeAll+0x124>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4313      	orrs	r3, r2
 80048a0:	4a2a      	ldr	r2, [pc, #168]	@ (800494c <xTaskResumeAll+0x124>)
 80048a2:	6013      	str	r3, [r2, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4a27      	ldr	r2, [pc, #156]	@ (8004950 <xTaskResumeAll+0x128>)
 80048b2:	441a      	add	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	3304      	adds	r3, #4
 80048b8:	4619      	mov	r1, r3
 80048ba:	4610      	mov	r0, r2
 80048bc:	f7fe ff79 	bl	80037b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048c4:	4b23      	ldr	r3, [pc, #140]	@ (8004954 <xTaskResumeAll+0x12c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d302      	bcc.n	80048d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80048ce:	4b22      	ldr	r3, [pc, #136]	@ (8004958 <xTaskResumeAll+0x130>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004948 <xTaskResumeAll+0x120>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1cc      	bne.n	8004876 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048e2:	f000 fb29 	bl	8004f38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80048e6:	4b1d      	ldr	r3, [pc, #116]	@ (800495c <xTaskResumeAll+0x134>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d010      	beq.n	8004914 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048f2:	f000 f837 	bl	8004964 <xTaskIncrementTick>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80048fc:	4b16      	ldr	r3, [pc, #88]	@ (8004958 <xTaskResumeAll+0x130>)
 80048fe:	2201      	movs	r2, #1
 8004900:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3b01      	subs	r3, #1
 8004906:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f1      	bne.n	80048f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800490e:	4b13      	ldr	r3, [pc, #76]	@ (800495c <xTaskResumeAll+0x134>)
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004914:	4b10      	ldr	r3, [pc, #64]	@ (8004958 <xTaskResumeAll+0x130>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d009      	beq.n	8004930 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800491c:	2301      	movs	r3, #1
 800491e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004920:	4b0f      	ldr	r3, [pc, #60]	@ (8004960 <xTaskResumeAll+0x138>)
 8004922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004930:	f000 fd94 	bl	800545c <vPortExitCritical>

	return xAlreadyYielded;
 8004934:	68bb      	ldr	r3, [r7, #8]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20000500 	.word	0x20000500
 8004944:	200004d8 	.word	0x200004d8
 8004948:	20000498 	.word	0x20000498
 800494c:	200004e0 	.word	0x200004e0
 8004950:	200003dc 	.word	0x200003dc
 8004954:	200003d8 	.word	0x200003d8
 8004958:	200004ec 	.word	0x200004ec
 800495c:	200004e8 	.word	0x200004e8
 8004960:	e000ed04 	.word	0xe000ed04

08004964 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800496a:	2300      	movs	r3, #0
 800496c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800496e:	4b4f      	ldr	r3, [pc, #316]	@ (8004aac <xTaskIncrementTick+0x148>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	f040 808f 	bne.w	8004a96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004978:	4b4d      	ldr	r3, [pc, #308]	@ (8004ab0 <xTaskIncrementTick+0x14c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3301      	adds	r3, #1
 800497e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004980:	4a4b      	ldr	r2, [pc, #300]	@ (8004ab0 <xTaskIncrementTick+0x14c>)
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d121      	bne.n	80049d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800498c:	4b49      	ldr	r3, [pc, #292]	@ (8004ab4 <xTaskIncrementTick+0x150>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00b      	beq.n	80049ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8004996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	603b      	str	r3, [r7, #0]
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop
 80049ac:	e7fd      	b.n	80049aa <xTaskIncrementTick+0x46>
 80049ae:	4b41      	ldr	r3, [pc, #260]	@ (8004ab4 <xTaskIncrementTick+0x150>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	4b40      	ldr	r3, [pc, #256]	@ (8004ab8 <xTaskIncrementTick+0x154>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a3e      	ldr	r2, [pc, #248]	@ (8004ab4 <xTaskIncrementTick+0x150>)
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	4a3e      	ldr	r2, [pc, #248]	@ (8004ab8 <xTaskIncrementTick+0x154>)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	4b3e      	ldr	r3, [pc, #248]	@ (8004abc <xTaskIncrementTick+0x158>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3301      	adds	r3, #1
 80049c8:	4a3c      	ldr	r2, [pc, #240]	@ (8004abc <xTaskIncrementTick+0x158>)
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	f000 fab4 	bl	8004f38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049d0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ac0 <xTaskIncrementTick+0x15c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d348      	bcc.n	8004a6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049da:	4b36      	ldr	r3, [pc, #216]	@ (8004ab4 <xTaskIncrementTick+0x150>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d104      	bne.n	80049ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049e4:	4b36      	ldr	r3, [pc, #216]	@ (8004ac0 <xTaskIncrementTick+0x15c>)
 80049e6:	f04f 32ff 	mov.w	r2, #4294967295
 80049ea:	601a      	str	r2, [r3, #0]
					break;
 80049ec:	e03e      	b.n	8004a6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049ee:	4b31      	ldr	r3, [pc, #196]	@ (8004ab4 <xTaskIncrementTick+0x150>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d203      	bcs.n	8004a0e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a06:	4a2e      	ldr	r2, [pc, #184]	@ (8004ac0 <xTaskIncrementTick+0x15c>)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a0c:	e02e      	b.n	8004a6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	3304      	adds	r3, #4
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe ff2a 	bl	800386c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d004      	beq.n	8004a2a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	3318      	adds	r3, #24
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fe ff21 	bl	800386c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2e:	2201      	movs	r2, #1
 8004a30:	409a      	lsls	r2, r3
 8004a32:	4b24      	ldr	r3, [pc, #144]	@ (8004ac4 <xTaskIncrementTick+0x160>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	4a22      	ldr	r2, [pc, #136]	@ (8004ac4 <xTaskIncrementTick+0x160>)
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4a1f      	ldr	r2, [pc, #124]	@ (8004ac8 <xTaskIncrementTick+0x164>)
 8004a4a:	441a      	add	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f7fe fead 	bl	80037b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8004acc <xTaskIncrementTick+0x168>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d3b9      	bcc.n	80049da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004a66:	2301      	movs	r3, #1
 8004a68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a6a:	e7b6      	b.n	80049da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a6c:	4b17      	ldr	r3, [pc, #92]	@ (8004acc <xTaskIncrementTick+0x168>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a72:	4915      	ldr	r1, [pc, #84]	@ (8004ac8 <xTaskIncrementTick+0x164>)
 8004a74:	4613      	mov	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d901      	bls.n	8004a88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004a84:	2301      	movs	r3, #1
 8004a86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a88:	4b11      	ldr	r3, [pc, #68]	@ (8004ad0 <xTaskIncrementTick+0x16c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004a90:	2301      	movs	r3, #1
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	e004      	b.n	8004aa0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a96:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad4 <xTaskIncrementTick+0x170>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8004ad4 <xTaskIncrementTick+0x170>)
 8004a9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004aa0:	697b      	ldr	r3, [r7, #20]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20000500 	.word	0x20000500
 8004ab0:	200004dc 	.word	0x200004dc
 8004ab4:	20000490 	.word	0x20000490
 8004ab8:	20000494 	.word	0x20000494
 8004abc:	200004f0 	.word	0x200004f0
 8004ac0:	200004f8 	.word	0x200004f8
 8004ac4:	200004e0 	.word	0x200004e0
 8004ac8:	200003dc 	.word	0x200003dc
 8004acc:	200003d8 	.word	0x200003d8
 8004ad0:	200004ec 	.word	0x200004ec
 8004ad4:	200004e8 	.word	0x200004e8

08004ad8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ade:	4b2a      	ldr	r3, [pc, #168]	@ (8004b88 <vTaskSwitchContext+0xb0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ae6:	4b29      	ldr	r3, [pc, #164]	@ (8004b8c <vTaskSwitchContext+0xb4>)
 8004ae8:	2201      	movs	r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004aec:	e045      	b.n	8004b7a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004aee:	4b27      	ldr	r3, [pc, #156]	@ (8004b8c <vTaskSwitchContext+0xb4>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004af4:	4b26      	ldr	r3, [pc, #152]	@ (8004b90 <vTaskSwitchContext+0xb8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	fab3 f383 	clz	r3, r3
 8004b00:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004b02:	7afb      	ldrb	r3, [r7, #11]
 8004b04:	f1c3 031f 	rsb	r3, r3, #31
 8004b08:	617b      	str	r3, [r7, #20]
 8004b0a:	4922      	ldr	r1, [pc, #136]	@ (8004b94 <vTaskSwitchContext+0xbc>)
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10b      	bne.n	8004b36 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	607b      	str	r3, [r7, #4]
}
 8004b30:	bf00      	nop
 8004b32:	bf00      	nop
 8004b34:	e7fd      	b.n	8004b32 <vTaskSwitchContext+0x5a>
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4a14      	ldr	r2, [pc, #80]	@ (8004b94 <vTaskSwitchContext+0xbc>)
 8004b42:	4413      	add	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	605a      	str	r2, [r3, #4]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	3308      	adds	r3, #8
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d104      	bne.n	8004b66 <vTaskSwitchContext+0x8e>
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	605a      	str	r2, [r3, #4]
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8004b98 <vTaskSwitchContext+0xc0>)
 8004b6e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b70:	4b09      	ldr	r3, [pc, #36]	@ (8004b98 <vTaskSwitchContext+0xc0>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	334c      	adds	r3, #76	@ 0x4c
 8004b76:	4a09      	ldr	r2, [pc, #36]	@ (8004b9c <vTaskSwitchContext+0xc4>)
 8004b78:	6013      	str	r3, [r2, #0]
}
 8004b7a:	bf00      	nop
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	20000500 	.word	0x20000500
 8004b8c:	200004ec 	.word	0x200004ec
 8004b90:	200004e0 	.word	0x200004e0
 8004b94:	200003dc 	.word	0x200003dc
 8004b98:	200003d8 	.word	0x200003d8
 8004b9c:	20000014 	.word	0x20000014

08004ba0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10b      	bne.n	8004bc8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	60fb      	str	r3, [r7, #12]
}
 8004bc2:	bf00      	nop
 8004bc4:	bf00      	nop
 8004bc6:	e7fd      	b.n	8004bc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bc8:	4b07      	ldr	r3, [pc, #28]	@ (8004be8 <vTaskPlaceOnEventList+0x48>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3318      	adds	r3, #24
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7fe fe12 	bl	80037fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	6838      	ldr	r0, [r7, #0]
 8004bda:	f000 fa73 	bl	80050c4 <prvAddCurrentTaskToDelayedList>
}
 8004bde:	bf00      	nop
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	200003d8 	.word	0x200003d8

08004bec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10b      	bne.n	8004c1a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	60fb      	str	r3, [r7, #12]
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	e7fd      	b.n	8004c16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	3318      	adds	r3, #24
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fe fe24 	bl	800386c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c24:	4b1d      	ldr	r3, [pc, #116]	@ (8004c9c <xTaskRemoveFromEventList+0xb0>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d11c      	bne.n	8004c66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7fe fe1b 	bl	800386c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	409a      	lsls	r2, r3
 8004c3e:	4b18      	ldr	r3, [pc, #96]	@ (8004ca0 <xTaskRemoveFromEventList+0xb4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	4a16      	ldr	r2, [pc, #88]	@ (8004ca0 <xTaskRemoveFromEventList+0xb4>)
 8004c46:	6013      	str	r3, [r2, #0]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4a13      	ldr	r2, [pc, #76]	@ (8004ca4 <xTaskRemoveFromEventList+0xb8>)
 8004c56:	441a      	add	r2, r3
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4610      	mov	r0, r2
 8004c60:	f7fe fda7 	bl	80037b2 <vListInsertEnd>
 8004c64:	e005      	b.n	8004c72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	3318      	adds	r3, #24
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	480e      	ldr	r0, [pc, #56]	@ (8004ca8 <xTaskRemoveFromEventList+0xbc>)
 8004c6e:	f7fe fda0 	bl	80037b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c76:	4b0d      	ldr	r3, [pc, #52]	@ (8004cac <xTaskRemoveFromEventList+0xc0>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d905      	bls.n	8004c8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c80:	2301      	movs	r3, #1
 8004c82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c84:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb0 <xTaskRemoveFromEventList+0xc4>)
 8004c86:	2201      	movs	r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	e001      	b.n	8004c90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c90:	697b      	ldr	r3, [r7, #20]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20000500 	.word	0x20000500
 8004ca0:	200004e0 	.word	0x200004e0
 8004ca4:	200003dc 	.word	0x200003dc
 8004ca8:	20000498 	.word	0x20000498
 8004cac:	200003d8 	.word	0x200003d8
 8004cb0:	200004ec 	.word	0x200004ec

08004cb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004cbc:	4b06      	ldr	r3, [pc, #24]	@ (8004cd8 <vTaskInternalSetTimeOutState+0x24>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004cc4:	4b05      	ldr	r3, [pc, #20]	@ (8004cdc <vTaskInternalSetTimeOutState+0x28>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	605a      	str	r2, [r3, #4]
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	200004f0 	.word	0x200004f0
 8004cdc:	200004dc 	.word	0x200004dc

08004ce0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10b      	bne.n	8004d08 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	613b      	str	r3, [r7, #16]
}
 8004d02:	bf00      	nop
 8004d04:	bf00      	nop
 8004d06:	e7fd      	b.n	8004d04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10b      	bne.n	8004d26 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	60fb      	str	r3, [r7, #12]
}
 8004d20:	bf00      	nop
 8004d22:	bf00      	nop
 8004d24:	e7fd      	b.n	8004d22 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004d26:	f000 fb67 	bl	80053f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8004da0 <xTaskCheckForTimeOut+0xc0>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d42:	d102      	bne.n	8004d4a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d44:	2300      	movs	r3, #0
 8004d46:	61fb      	str	r3, [r7, #28]
 8004d48:	e023      	b.n	8004d92 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	4b15      	ldr	r3, [pc, #84]	@ (8004da4 <xTaskCheckForTimeOut+0xc4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d007      	beq.n	8004d66 <xTaskCheckForTimeOut+0x86>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d302      	bcc.n	8004d66 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d60:	2301      	movs	r3, #1
 8004d62:	61fb      	str	r3, [r7, #28]
 8004d64:	e015      	b.n	8004d92 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d20b      	bcs.n	8004d88 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	1ad2      	subs	r2, r2, r3
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff ff99 	bl	8004cb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	e004      	b.n	8004d92 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d92:	f000 fb63 	bl	800545c <vPortExitCritical>

	return xReturn;
 8004d96:	69fb      	ldr	r3, [r7, #28]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3720      	adds	r7, #32
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	200004dc 	.word	0x200004dc
 8004da4:	200004f0 	.word	0x200004f0

08004da8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004dac:	4b03      	ldr	r3, [pc, #12]	@ (8004dbc <vTaskMissedYield+0x14>)
 8004dae:	2201      	movs	r2, #1
 8004db0:	601a      	str	r2, [r3, #0]
}
 8004db2:	bf00      	nop
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	200004ec 	.word	0x200004ec

08004dc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004dc8:	f000 f852 	bl	8004e70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004dcc:	4b06      	ldr	r3, [pc, #24]	@ (8004de8 <prvIdleTask+0x28>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d9f9      	bls.n	8004dc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004dd4:	4b05      	ldr	r3, [pc, #20]	@ (8004dec <prvIdleTask+0x2c>)
 8004dd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004de4:	e7f0      	b.n	8004dc8 <prvIdleTask+0x8>
 8004de6:	bf00      	nop
 8004de8:	200003dc 	.word	0x200003dc
 8004dec:	e000ed04 	.word	0xe000ed04

08004df0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004df6:	2300      	movs	r3, #0
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	e00c      	b.n	8004e16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4a12      	ldr	r2, [pc, #72]	@ (8004e50 <prvInitialiseTaskLists+0x60>)
 8004e08:	4413      	add	r3, r2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fe fca4 	bl	8003758 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3301      	adds	r3, #1
 8004e14:	607b      	str	r3, [r7, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b06      	cmp	r3, #6
 8004e1a:	d9ef      	bls.n	8004dfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e1c:	480d      	ldr	r0, [pc, #52]	@ (8004e54 <prvInitialiseTaskLists+0x64>)
 8004e1e:	f7fe fc9b 	bl	8003758 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e22:	480d      	ldr	r0, [pc, #52]	@ (8004e58 <prvInitialiseTaskLists+0x68>)
 8004e24:	f7fe fc98 	bl	8003758 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e28:	480c      	ldr	r0, [pc, #48]	@ (8004e5c <prvInitialiseTaskLists+0x6c>)
 8004e2a:	f7fe fc95 	bl	8003758 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e2e:	480c      	ldr	r0, [pc, #48]	@ (8004e60 <prvInitialiseTaskLists+0x70>)
 8004e30:	f7fe fc92 	bl	8003758 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e34:	480b      	ldr	r0, [pc, #44]	@ (8004e64 <prvInitialiseTaskLists+0x74>)
 8004e36:	f7fe fc8f 	bl	8003758 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e68 <prvInitialiseTaskLists+0x78>)
 8004e3c:	4a05      	ldr	r2, [pc, #20]	@ (8004e54 <prvInitialiseTaskLists+0x64>)
 8004e3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e40:	4b0a      	ldr	r3, [pc, #40]	@ (8004e6c <prvInitialiseTaskLists+0x7c>)
 8004e42:	4a05      	ldr	r2, [pc, #20]	@ (8004e58 <prvInitialiseTaskLists+0x68>)
 8004e44:	601a      	str	r2, [r3, #0]
}
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	200003dc 	.word	0x200003dc
 8004e54:	20000468 	.word	0x20000468
 8004e58:	2000047c 	.word	0x2000047c
 8004e5c:	20000498 	.word	0x20000498
 8004e60:	200004ac 	.word	0x200004ac
 8004e64:	200004c4 	.word	0x200004c4
 8004e68:	20000490 	.word	0x20000490
 8004e6c:	20000494 	.word	0x20000494

08004e70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e76:	e019      	b.n	8004eac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e78:	f000 fabe 	bl	80053f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e7c:	4b10      	ldr	r3, [pc, #64]	@ (8004ec0 <prvCheckTasksWaitingTermination+0x50>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3304      	adds	r3, #4
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fe fcef 	bl	800386c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec4 <prvCheckTasksWaitingTermination+0x54>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	4a0b      	ldr	r2, [pc, #44]	@ (8004ec4 <prvCheckTasksWaitingTermination+0x54>)
 8004e96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e98:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec8 <prvCheckTasksWaitingTermination+0x58>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec8 <prvCheckTasksWaitingTermination+0x58>)
 8004ea0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ea2:	f000 fadb 	bl	800545c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f810 	bl	8004ecc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004eac:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <prvCheckTasksWaitingTermination+0x58>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e1      	bne.n	8004e78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	200004ac 	.word	0x200004ac
 8004ec4:	200004d8 	.word	0x200004d8
 8004ec8:	200004c0 	.word	0x200004c0

08004ecc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	334c      	adds	r3, #76	@ 0x4c
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fda5 	bl	8005a28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d108      	bne.n	8004efa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 fc73 	bl	80057d8 <vPortFree>
				vPortFree( pxTCB );
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fc70 	bl	80057d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ef8:	e019      	b.n	8004f2e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d103      	bne.n	8004f0c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fc67 	bl	80057d8 <vPortFree>
	}
 8004f0a:	e010      	b.n	8004f2e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d00b      	beq.n	8004f2e <prvDeleteTCB+0x62>
	__asm volatile
 8004f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	60fb      	str	r3, [r7, #12]
}
 8004f28:	bf00      	nop
 8004f2a:	bf00      	nop
 8004f2c:	e7fd      	b.n	8004f2a <prvDeleteTCB+0x5e>
	}
 8004f2e:	bf00      	nop
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f70 <prvResetNextTaskUnblockTime+0x38>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d104      	bne.n	8004f52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f48:	4b0a      	ldr	r3, [pc, #40]	@ (8004f74 <prvResetNextTaskUnblockTime+0x3c>)
 8004f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f50:	e008      	b.n	8004f64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f52:	4b07      	ldr	r3, [pc, #28]	@ (8004f70 <prvResetNextTaskUnblockTime+0x38>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	4a04      	ldr	r2, [pc, #16]	@ (8004f74 <prvResetNextTaskUnblockTime+0x3c>)
 8004f62:	6013      	str	r3, [r2, #0]
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	20000490 	.word	0x20000490
 8004f74:	200004f8 	.word	0x200004f8

08004f78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004fac <xTaskGetSchedulerState+0x34>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d102      	bne.n	8004f8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f86:	2301      	movs	r3, #1
 8004f88:	607b      	str	r3, [r7, #4]
 8004f8a:	e008      	b.n	8004f9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f8c:	4b08      	ldr	r3, [pc, #32]	@ (8004fb0 <xTaskGetSchedulerState+0x38>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d102      	bne.n	8004f9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f94:	2302      	movs	r3, #2
 8004f96:	607b      	str	r3, [r7, #4]
 8004f98:	e001      	b.n	8004f9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f9e:	687b      	ldr	r3, [r7, #4]
	}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	200004e4 	.word	0x200004e4
 8004fb0:	20000500 	.word	0x20000500

08004fb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d070      	beq.n	80050ac <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004fca:	4b3b      	ldr	r3, [pc, #236]	@ (80050b8 <xTaskPriorityDisinherit+0x104>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d00b      	beq.n	8004fec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	60fb      	str	r3, [r7, #12]
}
 8004fe6:	bf00      	nop
 8004fe8:	bf00      	nop
 8004fea:	e7fd      	b.n	8004fe8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10b      	bne.n	800500c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	60bb      	str	r3, [r7, #8]
}
 8005006:	bf00      	nop
 8005008:	bf00      	nop
 800500a:	e7fd      	b.n	8005008 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005010:	1e5a      	subs	r2, r3, #1
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800501e:	429a      	cmp	r2, r3
 8005020:	d044      	beq.n	80050ac <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005026:	2b00      	cmp	r3, #0
 8005028:	d140      	bne.n	80050ac <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	3304      	adds	r3, #4
 800502e:	4618      	mov	r0, r3
 8005030:	f7fe fc1c 	bl	800386c <uxListRemove>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d115      	bne.n	8005066 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800503e:	491f      	ldr	r1, [pc, #124]	@ (80050bc <xTaskPriorityDisinherit+0x108>)
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10a      	bne.n	8005066 <xTaskPriorityDisinherit+0xb2>
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005054:	2201      	movs	r2, #1
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	43da      	mvns	r2, r3
 800505c:	4b18      	ldr	r3, [pc, #96]	@ (80050c0 <xTaskPriorityDisinherit+0x10c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4013      	ands	r3, r2
 8005062:	4a17      	ldr	r2, [pc, #92]	@ (80050c0 <xTaskPriorityDisinherit+0x10c>)
 8005064:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005072:	f1c3 0207 	rsb	r2, r3, #7
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507e:	2201      	movs	r2, #1
 8005080:	409a      	lsls	r2, r3
 8005082:	4b0f      	ldr	r3, [pc, #60]	@ (80050c0 <xTaskPriorityDisinherit+0x10c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4313      	orrs	r3, r2
 8005088:	4a0d      	ldr	r2, [pc, #52]	@ (80050c0 <xTaskPriorityDisinherit+0x10c>)
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4a08      	ldr	r2, [pc, #32]	@ (80050bc <xTaskPriorityDisinherit+0x108>)
 800509a:	441a      	add	r2, r3
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	3304      	adds	r3, #4
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f7fe fb85 	bl	80037b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050a8:	2301      	movs	r3, #1
 80050aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050ac:	697b      	ldr	r3, [r7, #20]
	}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	200003d8 	.word	0x200003d8
 80050bc:	200003dc 	.word	0x200003dc
 80050c0:	200004e0 	.word	0x200004e0

080050c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050ce:	4b29      	ldr	r3, [pc, #164]	@ (8005174 <prvAddCurrentTaskToDelayedList+0xb0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050d4:	4b28      	ldr	r3, [pc, #160]	@ (8005178 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3304      	adds	r3, #4
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fe fbc6 	bl	800386c <uxListRemove>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10b      	bne.n	80050fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050e6:	4b24      	ldr	r3, [pc, #144]	@ (8005178 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ec:	2201      	movs	r2, #1
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	43da      	mvns	r2, r3
 80050f4:	4b21      	ldr	r3, [pc, #132]	@ (800517c <prvAddCurrentTaskToDelayedList+0xb8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4013      	ands	r3, r2
 80050fa:	4a20      	ldr	r2, [pc, #128]	@ (800517c <prvAddCurrentTaskToDelayedList+0xb8>)
 80050fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005104:	d10a      	bne.n	800511c <prvAddCurrentTaskToDelayedList+0x58>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d007      	beq.n	800511c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800510c:	4b1a      	ldr	r3, [pc, #104]	@ (8005178 <prvAddCurrentTaskToDelayedList+0xb4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3304      	adds	r3, #4
 8005112:	4619      	mov	r1, r3
 8005114:	481a      	ldr	r0, [pc, #104]	@ (8005180 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005116:	f7fe fb4c 	bl	80037b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800511a:	e026      	b.n	800516a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4413      	add	r3, r2
 8005122:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005124:	4b14      	ldr	r3, [pc, #80]	@ (8005178 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	429a      	cmp	r2, r3
 8005132:	d209      	bcs.n	8005148 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005134:	4b13      	ldr	r3, [pc, #76]	@ (8005184 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	4b0f      	ldr	r3, [pc, #60]	@ (8005178 <prvAddCurrentTaskToDelayedList+0xb4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3304      	adds	r3, #4
 800513e:	4619      	mov	r1, r3
 8005140:	4610      	mov	r0, r2
 8005142:	f7fe fb5a 	bl	80037fa <vListInsert>
}
 8005146:	e010      	b.n	800516a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005148:	4b0f      	ldr	r3, [pc, #60]	@ (8005188 <prvAddCurrentTaskToDelayedList+0xc4>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	4b0a      	ldr	r3, [pc, #40]	@ (8005178 <prvAddCurrentTaskToDelayedList+0xb4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3304      	adds	r3, #4
 8005152:	4619      	mov	r1, r3
 8005154:	4610      	mov	r0, r2
 8005156:	f7fe fb50 	bl	80037fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800515a:	4b0c      	ldr	r3, [pc, #48]	@ (800518c <prvAddCurrentTaskToDelayedList+0xc8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	429a      	cmp	r2, r3
 8005162:	d202      	bcs.n	800516a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005164:	4a09      	ldr	r2, [pc, #36]	@ (800518c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	6013      	str	r3, [r2, #0]
}
 800516a:	bf00      	nop
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	200004dc 	.word	0x200004dc
 8005178:	200003d8 	.word	0x200003d8
 800517c:	200004e0 	.word	0x200004e0
 8005180:	200004c4 	.word	0x200004c4
 8005184:	20000494 	.word	0x20000494
 8005188:	20000490 	.word	0x20000490
 800518c:	200004f8 	.word	0x200004f8

08005190 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	3b04      	subs	r3, #4
 80051a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80051a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3b04      	subs	r3, #4
 80051ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f023 0201 	bic.w	r2, r3, #1
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	3b04      	subs	r3, #4
 80051be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051c0:	4a0c      	ldr	r2, [pc, #48]	@ (80051f4 <pxPortInitialiseStack+0x64>)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3b14      	subs	r3, #20
 80051ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3b04      	subs	r3, #4
 80051d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f06f 0202 	mvn.w	r2, #2
 80051de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3b20      	subs	r3, #32
 80051e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051e6:	68fb      	ldr	r3, [r7, #12]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	080051f9 	.word	0x080051f9

080051f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80051fe:	2300      	movs	r3, #0
 8005200:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005202:	4b13      	ldr	r3, [pc, #76]	@ (8005250 <prvTaskExitError+0x58>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520a:	d00b      	beq.n	8005224 <prvTaskExitError+0x2c>
	__asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	60fb      	str	r3, [r7, #12]
}
 800521e:	bf00      	nop
 8005220:	bf00      	nop
 8005222:	e7fd      	b.n	8005220 <prvTaskExitError+0x28>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	60bb      	str	r3, [r7, #8]
}
 8005236:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005238:	bf00      	nop
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0fc      	beq.n	800523a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005240:	bf00      	nop
 8005242:	bf00      	nop
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	20000010 	.word	0x20000010
	...

08005260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005260:	4b07      	ldr	r3, [pc, #28]	@ (8005280 <pxCurrentTCBConst2>)
 8005262:	6819      	ldr	r1, [r3, #0]
 8005264:	6808      	ldr	r0, [r1, #0]
 8005266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526a:	f380 8809 	msr	PSP, r0
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f04f 0000 	mov.w	r0, #0
 8005276:	f380 8811 	msr	BASEPRI, r0
 800527a:	4770      	bx	lr
 800527c:	f3af 8000 	nop.w

08005280 <pxCurrentTCBConst2>:
 8005280:	200003d8 	.word	0x200003d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005284:	bf00      	nop
 8005286:	bf00      	nop

08005288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005288:	4808      	ldr	r0, [pc, #32]	@ (80052ac <prvPortStartFirstTask+0x24>)
 800528a:	6800      	ldr	r0, [r0, #0]
 800528c:	6800      	ldr	r0, [r0, #0]
 800528e:	f380 8808 	msr	MSP, r0
 8005292:	f04f 0000 	mov.w	r0, #0
 8005296:	f380 8814 	msr	CONTROL, r0
 800529a:	b662      	cpsie	i
 800529c:	b661      	cpsie	f
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	df00      	svc	0
 80052a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052aa:	bf00      	nop
 80052ac:	e000ed08 	.word	0xe000ed08

080052b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80052b6:	4b47      	ldr	r3, [pc, #284]	@ (80053d4 <xPortStartScheduler+0x124>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a47      	ldr	r2, [pc, #284]	@ (80053d8 <xPortStartScheduler+0x128>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d10b      	bne.n	80052d8 <xPortStartScheduler+0x28>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	60fb      	str	r3, [r7, #12]
}
 80052d2:	bf00      	nop
 80052d4:	bf00      	nop
 80052d6:	e7fd      	b.n	80052d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052d8:	4b3e      	ldr	r3, [pc, #248]	@ (80053d4 <xPortStartScheduler+0x124>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a3f      	ldr	r2, [pc, #252]	@ (80053dc <xPortStartScheduler+0x12c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d10b      	bne.n	80052fa <xPortStartScheduler+0x4a>
	__asm volatile
 80052e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	613b      	str	r3, [r7, #16]
}
 80052f4:	bf00      	nop
 80052f6:	bf00      	nop
 80052f8:	e7fd      	b.n	80052f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052fa:	4b39      	ldr	r3, [pc, #228]	@ (80053e0 <xPortStartScheduler+0x130>)
 80052fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	22ff      	movs	r2, #255	@ 0xff
 800530a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800531c:	b2da      	uxtb	r2, r3
 800531e:	4b31      	ldr	r3, [pc, #196]	@ (80053e4 <xPortStartScheduler+0x134>)
 8005320:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005322:	4b31      	ldr	r3, [pc, #196]	@ (80053e8 <xPortStartScheduler+0x138>)
 8005324:	2207      	movs	r2, #7
 8005326:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005328:	e009      	b.n	800533e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800532a:	4b2f      	ldr	r3, [pc, #188]	@ (80053e8 <xPortStartScheduler+0x138>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3b01      	subs	r3, #1
 8005330:	4a2d      	ldr	r2, [pc, #180]	@ (80053e8 <xPortStartScheduler+0x138>)
 8005332:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	b2db      	uxtb	r3, r3
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	b2db      	uxtb	r3, r3
 800533c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800533e:	78fb      	ldrb	r3, [r7, #3]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005346:	2b80      	cmp	r3, #128	@ 0x80
 8005348:	d0ef      	beq.n	800532a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800534a:	4b27      	ldr	r3, [pc, #156]	@ (80053e8 <xPortStartScheduler+0x138>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f1c3 0307 	rsb	r3, r3, #7
 8005352:	2b04      	cmp	r3, #4
 8005354:	d00b      	beq.n	800536e <xPortStartScheduler+0xbe>
	__asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	60bb      	str	r3, [r7, #8]
}
 8005368:	bf00      	nop
 800536a:	bf00      	nop
 800536c:	e7fd      	b.n	800536a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800536e:	4b1e      	ldr	r3, [pc, #120]	@ (80053e8 <xPortStartScheduler+0x138>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	021b      	lsls	r3, r3, #8
 8005374:	4a1c      	ldr	r2, [pc, #112]	@ (80053e8 <xPortStartScheduler+0x138>)
 8005376:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005378:	4b1b      	ldr	r3, [pc, #108]	@ (80053e8 <xPortStartScheduler+0x138>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005380:	4a19      	ldr	r2, [pc, #100]	@ (80053e8 <xPortStartScheduler+0x138>)
 8005382:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	b2da      	uxtb	r2, r3
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800538c:	4b17      	ldr	r3, [pc, #92]	@ (80053ec <xPortStartScheduler+0x13c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a16      	ldr	r2, [pc, #88]	@ (80053ec <xPortStartScheduler+0x13c>)
 8005392:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005396:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005398:	4b14      	ldr	r3, [pc, #80]	@ (80053ec <xPortStartScheduler+0x13c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a13      	ldr	r2, [pc, #76]	@ (80053ec <xPortStartScheduler+0x13c>)
 800539e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80053a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053a4:	f000 f8da 	bl	800555c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053a8:	4b11      	ldr	r3, [pc, #68]	@ (80053f0 <xPortStartScheduler+0x140>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80053ae:	f000 f8f9 	bl	80055a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80053b2:	4b10      	ldr	r3, [pc, #64]	@ (80053f4 <xPortStartScheduler+0x144>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a0f      	ldr	r2, [pc, #60]	@ (80053f4 <xPortStartScheduler+0x144>)
 80053b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80053bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80053be:	f7ff ff63 	bl	8005288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053c2:	f7ff fb89 	bl	8004ad8 <vTaskSwitchContext>
	prvTaskExitError();
 80053c6:	f7ff ff17 	bl	80051f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	e000ed00 	.word	0xe000ed00
 80053d8:	410fc271 	.word	0x410fc271
 80053dc:	410fc270 	.word	0x410fc270
 80053e0:	e000e400 	.word	0xe000e400
 80053e4:	20000504 	.word	0x20000504
 80053e8:	20000508 	.word	0x20000508
 80053ec:	e000ed20 	.word	0xe000ed20
 80053f0:	20000010 	.word	0x20000010
 80053f4:	e000ef34 	.word	0xe000ef34

080053f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	607b      	str	r3, [r7, #4]
}
 8005410:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005412:	4b10      	ldr	r3, [pc, #64]	@ (8005454 <vPortEnterCritical+0x5c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3301      	adds	r3, #1
 8005418:	4a0e      	ldr	r2, [pc, #56]	@ (8005454 <vPortEnterCritical+0x5c>)
 800541a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800541c:	4b0d      	ldr	r3, [pc, #52]	@ (8005454 <vPortEnterCritical+0x5c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d110      	bne.n	8005446 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005424:	4b0c      	ldr	r3, [pc, #48]	@ (8005458 <vPortEnterCritical+0x60>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00b      	beq.n	8005446 <vPortEnterCritical+0x4e>
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	603b      	str	r3, [r7, #0]
}
 8005440:	bf00      	nop
 8005442:	bf00      	nop
 8005444:	e7fd      	b.n	8005442 <vPortEnterCritical+0x4a>
	}
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	20000010 	.word	0x20000010
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005462:	4b12      	ldr	r3, [pc, #72]	@ (80054ac <vPortExitCritical+0x50>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10b      	bne.n	8005482 <vPortExitCritical+0x26>
	__asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	607b      	str	r3, [r7, #4]
}
 800547c:	bf00      	nop
 800547e:	bf00      	nop
 8005480:	e7fd      	b.n	800547e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005482:	4b0a      	ldr	r3, [pc, #40]	@ (80054ac <vPortExitCritical+0x50>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3b01      	subs	r3, #1
 8005488:	4a08      	ldr	r2, [pc, #32]	@ (80054ac <vPortExitCritical+0x50>)
 800548a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800548c:	4b07      	ldr	r3, [pc, #28]	@ (80054ac <vPortExitCritical+0x50>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d105      	bne.n	80054a0 <vPortExitCritical+0x44>
 8005494:	2300      	movs	r3, #0
 8005496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	f383 8811 	msr	BASEPRI, r3
}
 800549e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	20000010 	.word	0x20000010

080054b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054b0:	f3ef 8009 	mrs	r0, PSP
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	4b15      	ldr	r3, [pc, #84]	@ (8005510 <pxCurrentTCBConst>)
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	f01e 0f10 	tst.w	lr, #16
 80054c0:	bf08      	it	eq
 80054c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ca:	6010      	str	r0, [r2, #0]
 80054cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80054d4:	f380 8811 	msr	BASEPRI, r0
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f7ff fafa 	bl	8004ad8 <vTaskSwitchContext>
 80054e4:	f04f 0000 	mov.w	r0, #0
 80054e8:	f380 8811 	msr	BASEPRI, r0
 80054ec:	bc09      	pop	{r0, r3}
 80054ee:	6819      	ldr	r1, [r3, #0]
 80054f0:	6808      	ldr	r0, [r1, #0]
 80054f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f6:	f01e 0f10 	tst.w	lr, #16
 80054fa:	bf08      	it	eq
 80054fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005500:	f380 8809 	msr	PSP, r0
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	f3af 8000 	nop.w

08005510 <pxCurrentTCBConst>:
 8005510:	200003d8 	.word	0x200003d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop

08005518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	607b      	str	r3, [r7, #4]
}
 8005530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005532:	f7ff fa17 	bl	8004964 <xTaskIncrementTick>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800553c:	4b06      	ldr	r3, [pc, #24]	@ (8005558 <SysTick_Handler+0x40>)
 800553e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	2300      	movs	r3, #0
 8005546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	f383 8811 	msr	BASEPRI, r3
}
 800554e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005550:	bf00      	nop
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	e000ed04 	.word	0xe000ed04

0800555c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005560:	4b0b      	ldr	r3, [pc, #44]	@ (8005590 <vPortSetupTimerInterrupt+0x34>)
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005566:	4b0b      	ldr	r3, [pc, #44]	@ (8005594 <vPortSetupTimerInterrupt+0x38>)
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800556c:	4b0a      	ldr	r3, [pc, #40]	@ (8005598 <vPortSetupTimerInterrupt+0x3c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a0a      	ldr	r2, [pc, #40]	@ (800559c <vPortSetupTimerInterrupt+0x40>)
 8005572:	fba2 2303 	umull	r2, r3, r2, r3
 8005576:	099b      	lsrs	r3, r3, #6
 8005578:	4a09      	ldr	r2, [pc, #36]	@ (80055a0 <vPortSetupTimerInterrupt+0x44>)
 800557a:	3b01      	subs	r3, #1
 800557c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800557e:	4b04      	ldr	r3, [pc, #16]	@ (8005590 <vPortSetupTimerInterrupt+0x34>)
 8005580:	2207      	movs	r2, #7
 8005582:	601a      	str	r2, [r3, #0]
}
 8005584:	bf00      	nop
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	e000e010 	.word	0xe000e010
 8005594:	e000e018 	.word	0xe000e018
 8005598:	20000004 	.word	0x20000004
 800559c:	10624dd3 	.word	0x10624dd3
 80055a0:	e000e014 	.word	0xe000e014

080055a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80055a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80055b4 <vPortEnableVFP+0x10>
 80055a8:	6801      	ldr	r1, [r0, #0]
 80055aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80055ae:	6001      	str	r1, [r0, #0]
 80055b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80055b2:	bf00      	nop
 80055b4:	e000ed88 	.word	0xe000ed88

080055b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80055be:	f3ef 8305 	mrs	r3, IPSR
 80055c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b0f      	cmp	r3, #15
 80055c8:	d915      	bls.n	80055f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80055ca:	4a18      	ldr	r2, [pc, #96]	@ (800562c <vPortValidateInterruptPriority+0x74>)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4413      	add	r3, r2
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80055d4:	4b16      	ldr	r3, [pc, #88]	@ (8005630 <vPortValidateInterruptPriority+0x78>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	7afa      	ldrb	r2, [r7, #11]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d20b      	bcs.n	80055f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80055de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	607b      	str	r3, [r7, #4]
}
 80055f0:	bf00      	nop
 80055f2:	bf00      	nop
 80055f4:	e7fd      	b.n	80055f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80055f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005634 <vPortValidateInterruptPriority+0x7c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80055fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005638 <vPortValidateInterruptPriority+0x80>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d90b      	bls.n	800561e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	603b      	str	r3, [r7, #0]
}
 8005618:	bf00      	nop
 800561a:	bf00      	nop
 800561c:	e7fd      	b.n	800561a <vPortValidateInterruptPriority+0x62>
	}
 800561e:	bf00      	nop
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	e000e3f0 	.word	0xe000e3f0
 8005630:	20000504 	.word	0x20000504
 8005634:	e000ed0c 	.word	0xe000ed0c
 8005638:	20000508 	.word	0x20000508

0800563c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b08a      	sub	sp, #40	@ 0x28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005644:	2300      	movs	r3, #0
 8005646:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005648:	f7ff f8e0 	bl	800480c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800564c:	4b5c      	ldr	r3, [pc, #368]	@ (80057c0 <pvPortMalloc+0x184>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005654:	f000 f924 	bl	80058a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005658:	4b5a      	ldr	r3, [pc, #360]	@ (80057c4 <pvPortMalloc+0x188>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4013      	ands	r3, r2
 8005660:	2b00      	cmp	r3, #0
 8005662:	f040 8095 	bne.w	8005790 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d01e      	beq.n	80056aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800566c:	2208      	movs	r2, #8
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4413      	add	r3, r2
 8005672:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	2b00      	cmp	r3, #0
 800567c:	d015      	beq.n	80056aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f023 0307 	bic.w	r3, r3, #7
 8005684:	3308      	adds	r3, #8
 8005686:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00b      	beq.n	80056aa <pvPortMalloc+0x6e>
	__asm volatile
 8005692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	617b      	str	r3, [r7, #20]
}
 80056a4:	bf00      	nop
 80056a6:	bf00      	nop
 80056a8:	e7fd      	b.n	80056a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d06f      	beq.n	8005790 <pvPortMalloc+0x154>
 80056b0:	4b45      	ldr	r3, [pc, #276]	@ (80057c8 <pvPortMalloc+0x18c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d86a      	bhi.n	8005790 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80056ba:	4b44      	ldr	r3, [pc, #272]	@ (80057cc <pvPortMalloc+0x190>)
 80056bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80056be:	4b43      	ldr	r3, [pc, #268]	@ (80057cc <pvPortMalloc+0x190>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056c4:	e004      	b.n	80056d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d903      	bls.n	80056e2 <pvPortMalloc+0xa6>
 80056da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1f1      	bne.n	80056c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80056e2:	4b37      	ldr	r3, [pc, #220]	@ (80057c0 <pvPortMalloc+0x184>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d051      	beq.n	8005790 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2208      	movs	r2, #8
 80056f2:	4413      	add	r3, r2
 80056f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	1ad2      	subs	r2, r2, r3
 8005706:	2308      	movs	r3, #8
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	429a      	cmp	r2, r3
 800570c:	d920      	bls.n	8005750 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800570e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4413      	add	r3, r2
 8005714:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00b      	beq.n	8005738 <pvPortMalloc+0xfc>
	__asm volatile
 8005720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	613b      	str	r3, [r7, #16]
}
 8005732:	bf00      	nop
 8005734:	bf00      	nop
 8005736:	e7fd      	b.n	8005734 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	1ad2      	subs	r2, r2, r3
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800574a:	69b8      	ldr	r0, [r7, #24]
 800574c:	f000 f90a 	bl	8005964 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005750:	4b1d      	ldr	r3, [pc, #116]	@ (80057c8 <pvPortMalloc+0x18c>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	4a1b      	ldr	r2, [pc, #108]	@ (80057c8 <pvPortMalloc+0x18c>)
 800575c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800575e:	4b1a      	ldr	r3, [pc, #104]	@ (80057c8 <pvPortMalloc+0x18c>)
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	4b1b      	ldr	r3, [pc, #108]	@ (80057d0 <pvPortMalloc+0x194>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d203      	bcs.n	8005772 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800576a:	4b17      	ldr	r3, [pc, #92]	@ (80057c8 <pvPortMalloc+0x18c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a18      	ldr	r2, [pc, #96]	@ (80057d0 <pvPortMalloc+0x194>)
 8005770:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	4b13      	ldr	r3, [pc, #76]	@ (80057c4 <pvPortMalloc+0x188>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	431a      	orrs	r2, r3
 800577c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005786:	4b13      	ldr	r3, [pc, #76]	@ (80057d4 <pvPortMalloc+0x198>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3301      	adds	r3, #1
 800578c:	4a11      	ldr	r2, [pc, #68]	@ (80057d4 <pvPortMalloc+0x198>)
 800578e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005790:	f7ff f84a 	bl	8004828 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00b      	beq.n	80057b6 <pvPortMalloc+0x17a>
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	60fb      	str	r3, [r7, #12]
}
 80057b0:	bf00      	nop
 80057b2:	bf00      	nop
 80057b4:	e7fd      	b.n	80057b2 <pvPortMalloc+0x176>
	return pvReturn;
 80057b6:	69fb      	ldr	r3, [r7, #28]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3728      	adds	r7, #40	@ 0x28
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	20001514 	.word	0x20001514
 80057c4:	20001528 	.word	0x20001528
 80057c8:	20001518 	.word	0x20001518
 80057cc:	2000150c 	.word	0x2000150c
 80057d0:	2000151c 	.word	0x2000151c
 80057d4:	20001520 	.word	0x20001520

080057d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d04f      	beq.n	800588a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80057ea:	2308      	movs	r3, #8
 80057ec:	425b      	negs	r3, r3
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4413      	add	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	4b25      	ldr	r3, [pc, #148]	@ (8005894 <vPortFree+0xbc>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4013      	ands	r3, r2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10b      	bne.n	800581e <vPortFree+0x46>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	60fb      	str	r3, [r7, #12]
}
 8005818:	bf00      	nop
 800581a:	bf00      	nop
 800581c:	e7fd      	b.n	800581a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00b      	beq.n	800583e <vPortFree+0x66>
	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	60bb      	str	r3, [r7, #8]
}
 8005838:	bf00      	nop
 800583a:	bf00      	nop
 800583c:	e7fd      	b.n	800583a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	4b14      	ldr	r3, [pc, #80]	@ (8005894 <vPortFree+0xbc>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4013      	ands	r3, r2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01e      	beq.n	800588a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d11a      	bne.n	800588a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	4b0e      	ldr	r3, [pc, #56]	@ (8005894 <vPortFree+0xbc>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	43db      	mvns	r3, r3
 800585e:	401a      	ands	r2, r3
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005864:	f7fe ffd2 	bl	800480c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	4b0a      	ldr	r3, [pc, #40]	@ (8005898 <vPortFree+0xc0>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4413      	add	r3, r2
 8005872:	4a09      	ldr	r2, [pc, #36]	@ (8005898 <vPortFree+0xc0>)
 8005874:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005876:	6938      	ldr	r0, [r7, #16]
 8005878:	f000 f874 	bl	8005964 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800587c:	4b07      	ldr	r3, [pc, #28]	@ (800589c <vPortFree+0xc4>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3301      	adds	r3, #1
 8005882:	4a06      	ldr	r2, [pc, #24]	@ (800589c <vPortFree+0xc4>)
 8005884:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005886:	f7fe ffcf 	bl	8004828 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800588a:	bf00      	nop
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20001528 	.word	0x20001528
 8005898:	20001518 	.word	0x20001518
 800589c:	20001524 	.word	0x20001524

080058a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80058ac:	4b27      	ldr	r3, [pc, #156]	@ (800594c <prvHeapInit+0xac>)
 80058ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00c      	beq.n	80058d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3307      	adds	r3, #7
 80058be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 0307 	bic.w	r3, r3, #7
 80058c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	4a1f      	ldr	r2, [pc, #124]	@ (800594c <prvHeapInit+0xac>)
 80058d0:	4413      	add	r3, r2
 80058d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005950 <prvHeapInit+0xb0>)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058de:	4b1c      	ldr	r3, [pc, #112]	@ (8005950 <prvHeapInit+0xb0>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	4413      	add	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80058ec:	2208      	movs	r2, #8
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	1a9b      	subs	r3, r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0307 	bic.w	r3, r3, #7
 80058fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4a15      	ldr	r2, [pc, #84]	@ (8005954 <prvHeapInit+0xb4>)
 8005900:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005902:	4b14      	ldr	r3, [pc, #80]	@ (8005954 <prvHeapInit+0xb4>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2200      	movs	r2, #0
 8005908:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800590a:	4b12      	ldr	r3, [pc, #72]	@ (8005954 <prvHeapInit+0xb4>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	1ad2      	subs	r2, r2, r3
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005920:	4b0c      	ldr	r3, [pc, #48]	@ (8005954 <prvHeapInit+0xb4>)
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	4a0a      	ldr	r2, [pc, #40]	@ (8005958 <prvHeapInit+0xb8>)
 800592e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	4a09      	ldr	r2, [pc, #36]	@ (800595c <prvHeapInit+0xbc>)
 8005936:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005938:	4b09      	ldr	r3, [pc, #36]	@ (8005960 <prvHeapInit+0xc0>)
 800593a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800593e:	601a      	str	r2, [r3, #0]
}
 8005940:	bf00      	nop
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	2000050c 	.word	0x2000050c
 8005950:	2000150c 	.word	0x2000150c
 8005954:	20001514 	.word	0x20001514
 8005958:	2000151c 	.word	0x2000151c
 800595c:	20001518 	.word	0x20001518
 8005960:	20001528 	.word	0x20001528

08005964 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800596c:	4b28      	ldr	r3, [pc, #160]	@ (8005a10 <prvInsertBlockIntoFreeList+0xac>)
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	e002      	b.n	8005978 <prvInsertBlockIntoFreeList+0x14>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	429a      	cmp	r2, r3
 8005980:	d8f7      	bhi.n	8005972 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	4413      	add	r3, r2
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	429a      	cmp	r2, r3
 8005992:	d108      	bne.n	80059a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	441a      	add	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	441a      	add	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d118      	bne.n	80059ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	4b15      	ldr	r3, [pc, #84]	@ (8005a14 <prvInsertBlockIntoFreeList+0xb0>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d00d      	beq.n	80059e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	441a      	add	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	e008      	b.n	80059f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005a14 <prvInsertBlockIntoFreeList+0xb0>)
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	e003      	b.n	80059f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d002      	beq.n	8005a02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a02:	bf00      	nop
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	2000150c 	.word	0x2000150c
 8005a14:	20001514 	.word	0x20001514

08005a18 <memset>:
 8005a18:	4402      	add	r2, r0
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d100      	bne.n	8005a22 <memset+0xa>
 8005a20:	4770      	bx	lr
 8005a22:	f803 1b01 	strb.w	r1, [r3], #1
 8005a26:	e7f9      	b.n	8005a1c <memset+0x4>

08005a28 <_reclaim_reent>:
 8005a28:	4b2d      	ldr	r3, [pc, #180]	@ (8005ae0 <_reclaim_reent+0xb8>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4283      	cmp	r3, r0
 8005a2e:	b570      	push	{r4, r5, r6, lr}
 8005a30:	4604      	mov	r4, r0
 8005a32:	d053      	beq.n	8005adc <_reclaim_reent+0xb4>
 8005a34:	69c3      	ldr	r3, [r0, #28]
 8005a36:	b31b      	cbz	r3, 8005a80 <_reclaim_reent+0x58>
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	b163      	cbz	r3, 8005a56 <_reclaim_reent+0x2e>
 8005a3c:	2500      	movs	r5, #0
 8005a3e:	69e3      	ldr	r3, [r4, #28]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	5959      	ldr	r1, [r3, r5]
 8005a44:	b9b1      	cbnz	r1, 8005a74 <_reclaim_reent+0x4c>
 8005a46:	3504      	adds	r5, #4
 8005a48:	2d80      	cmp	r5, #128	@ 0x80
 8005a4a:	d1f8      	bne.n	8005a3e <_reclaim_reent+0x16>
 8005a4c:	69e3      	ldr	r3, [r4, #28]
 8005a4e:	4620      	mov	r0, r4
 8005a50:	68d9      	ldr	r1, [r3, #12]
 8005a52:	f000 f87b 	bl	8005b4c <_free_r>
 8005a56:	69e3      	ldr	r3, [r4, #28]
 8005a58:	6819      	ldr	r1, [r3, #0]
 8005a5a:	b111      	cbz	r1, 8005a62 <_reclaim_reent+0x3a>
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f000 f875 	bl	8005b4c <_free_r>
 8005a62:	69e3      	ldr	r3, [r4, #28]
 8005a64:	689d      	ldr	r5, [r3, #8]
 8005a66:	b15d      	cbz	r5, 8005a80 <_reclaim_reent+0x58>
 8005a68:	4629      	mov	r1, r5
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	682d      	ldr	r5, [r5, #0]
 8005a6e:	f000 f86d 	bl	8005b4c <_free_r>
 8005a72:	e7f8      	b.n	8005a66 <_reclaim_reent+0x3e>
 8005a74:	680e      	ldr	r6, [r1, #0]
 8005a76:	4620      	mov	r0, r4
 8005a78:	f000 f868 	bl	8005b4c <_free_r>
 8005a7c:	4631      	mov	r1, r6
 8005a7e:	e7e1      	b.n	8005a44 <_reclaim_reent+0x1c>
 8005a80:	6961      	ldr	r1, [r4, #20]
 8005a82:	b111      	cbz	r1, 8005a8a <_reclaim_reent+0x62>
 8005a84:	4620      	mov	r0, r4
 8005a86:	f000 f861 	bl	8005b4c <_free_r>
 8005a8a:	69e1      	ldr	r1, [r4, #28]
 8005a8c:	b111      	cbz	r1, 8005a94 <_reclaim_reent+0x6c>
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f000 f85c 	bl	8005b4c <_free_r>
 8005a94:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005a96:	b111      	cbz	r1, 8005a9e <_reclaim_reent+0x76>
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f000 f857 	bl	8005b4c <_free_r>
 8005a9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005aa0:	b111      	cbz	r1, 8005aa8 <_reclaim_reent+0x80>
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f000 f852 	bl	8005b4c <_free_r>
 8005aa8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005aaa:	b111      	cbz	r1, 8005ab2 <_reclaim_reent+0x8a>
 8005aac:	4620      	mov	r0, r4
 8005aae:	f000 f84d 	bl	8005b4c <_free_r>
 8005ab2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005ab4:	b111      	cbz	r1, 8005abc <_reclaim_reent+0x94>
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f000 f848 	bl	8005b4c <_free_r>
 8005abc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005abe:	b111      	cbz	r1, 8005ac6 <_reclaim_reent+0x9e>
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f000 f843 	bl	8005b4c <_free_r>
 8005ac6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005ac8:	b111      	cbz	r1, 8005ad0 <_reclaim_reent+0xa8>
 8005aca:	4620      	mov	r0, r4
 8005acc:	f000 f83e 	bl	8005b4c <_free_r>
 8005ad0:	6a23      	ldr	r3, [r4, #32]
 8005ad2:	b11b      	cbz	r3, 8005adc <_reclaim_reent+0xb4>
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ada:	4718      	bx	r3
 8005adc:	bd70      	pop	{r4, r5, r6, pc}
 8005ade:	bf00      	nop
 8005ae0:	20000014 	.word	0x20000014

08005ae4 <__libc_init_array>:
 8005ae4:	b570      	push	{r4, r5, r6, lr}
 8005ae6:	4d0d      	ldr	r5, [pc, #52]	@ (8005b1c <__libc_init_array+0x38>)
 8005ae8:	4c0d      	ldr	r4, [pc, #52]	@ (8005b20 <__libc_init_array+0x3c>)
 8005aea:	1b64      	subs	r4, r4, r5
 8005aec:	10a4      	asrs	r4, r4, #2
 8005aee:	2600      	movs	r6, #0
 8005af0:	42a6      	cmp	r6, r4
 8005af2:	d109      	bne.n	8005b08 <__libc_init_array+0x24>
 8005af4:	4d0b      	ldr	r5, [pc, #44]	@ (8005b24 <__libc_init_array+0x40>)
 8005af6:	4c0c      	ldr	r4, [pc, #48]	@ (8005b28 <__libc_init_array+0x44>)
 8005af8:	f000 f87e 	bl	8005bf8 <_init>
 8005afc:	1b64      	subs	r4, r4, r5
 8005afe:	10a4      	asrs	r4, r4, #2
 8005b00:	2600      	movs	r6, #0
 8005b02:	42a6      	cmp	r6, r4
 8005b04:	d105      	bne.n	8005b12 <__libc_init_array+0x2e>
 8005b06:	bd70      	pop	{r4, r5, r6, pc}
 8005b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b0c:	4798      	blx	r3
 8005b0e:	3601      	adds	r6, #1
 8005b10:	e7ee      	b.n	8005af0 <__libc_init_array+0xc>
 8005b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b16:	4798      	blx	r3
 8005b18:	3601      	adds	r6, #1
 8005b1a:	e7f2      	b.n	8005b02 <__libc_init_array+0x1e>
 8005b1c:	08005cc4 	.word	0x08005cc4
 8005b20:	08005cc4 	.word	0x08005cc4
 8005b24:	08005cc4 	.word	0x08005cc4
 8005b28:	08005cc8 	.word	0x08005cc8

08005b2c <__retarget_lock_acquire_recursive>:
 8005b2c:	4770      	bx	lr

08005b2e <__retarget_lock_release_recursive>:
 8005b2e:	4770      	bx	lr

08005b30 <memcpy>:
 8005b30:	440a      	add	r2, r1
 8005b32:	4291      	cmp	r1, r2
 8005b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b38:	d100      	bne.n	8005b3c <memcpy+0xc>
 8005b3a:	4770      	bx	lr
 8005b3c:	b510      	push	{r4, lr}
 8005b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b46:	4291      	cmp	r1, r2
 8005b48:	d1f9      	bne.n	8005b3e <memcpy+0xe>
 8005b4a:	bd10      	pop	{r4, pc}

08005b4c <_free_r>:
 8005b4c:	b538      	push	{r3, r4, r5, lr}
 8005b4e:	4605      	mov	r5, r0
 8005b50:	2900      	cmp	r1, #0
 8005b52:	d041      	beq.n	8005bd8 <_free_r+0x8c>
 8005b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b58:	1f0c      	subs	r4, r1, #4
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	bfb8      	it	lt
 8005b5e:	18e4      	addlt	r4, r4, r3
 8005b60:	f000 f83e 	bl	8005be0 <__malloc_lock>
 8005b64:	4a1d      	ldr	r2, [pc, #116]	@ (8005bdc <_free_r+0x90>)
 8005b66:	6813      	ldr	r3, [r2, #0]
 8005b68:	b933      	cbnz	r3, 8005b78 <_free_r+0x2c>
 8005b6a:	6063      	str	r3, [r4, #4]
 8005b6c:	6014      	str	r4, [r2, #0]
 8005b6e:	4628      	mov	r0, r5
 8005b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b74:	f000 b83a 	b.w	8005bec <__malloc_unlock>
 8005b78:	42a3      	cmp	r3, r4
 8005b7a:	d908      	bls.n	8005b8e <_free_r+0x42>
 8005b7c:	6820      	ldr	r0, [r4, #0]
 8005b7e:	1821      	adds	r1, r4, r0
 8005b80:	428b      	cmp	r3, r1
 8005b82:	bf01      	itttt	eq
 8005b84:	6819      	ldreq	r1, [r3, #0]
 8005b86:	685b      	ldreq	r3, [r3, #4]
 8005b88:	1809      	addeq	r1, r1, r0
 8005b8a:	6021      	streq	r1, [r4, #0]
 8005b8c:	e7ed      	b.n	8005b6a <_free_r+0x1e>
 8005b8e:	461a      	mov	r2, r3
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	b10b      	cbz	r3, 8005b98 <_free_r+0x4c>
 8005b94:	42a3      	cmp	r3, r4
 8005b96:	d9fa      	bls.n	8005b8e <_free_r+0x42>
 8005b98:	6811      	ldr	r1, [r2, #0]
 8005b9a:	1850      	adds	r0, r2, r1
 8005b9c:	42a0      	cmp	r0, r4
 8005b9e:	d10b      	bne.n	8005bb8 <_free_r+0x6c>
 8005ba0:	6820      	ldr	r0, [r4, #0]
 8005ba2:	4401      	add	r1, r0
 8005ba4:	1850      	adds	r0, r2, r1
 8005ba6:	4283      	cmp	r3, r0
 8005ba8:	6011      	str	r1, [r2, #0]
 8005baa:	d1e0      	bne.n	8005b6e <_free_r+0x22>
 8005bac:	6818      	ldr	r0, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	6053      	str	r3, [r2, #4]
 8005bb2:	4408      	add	r0, r1
 8005bb4:	6010      	str	r0, [r2, #0]
 8005bb6:	e7da      	b.n	8005b6e <_free_r+0x22>
 8005bb8:	d902      	bls.n	8005bc0 <_free_r+0x74>
 8005bba:	230c      	movs	r3, #12
 8005bbc:	602b      	str	r3, [r5, #0]
 8005bbe:	e7d6      	b.n	8005b6e <_free_r+0x22>
 8005bc0:	6820      	ldr	r0, [r4, #0]
 8005bc2:	1821      	adds	r1, r4, r0
 8005bc4:	428b      	cmp	r3, r1
 8005bc6:	bf04      	itt	eq
 8005bc8:	6819      	ldreq	r1, [r3, #0]
 8005bca:	685b      	ldreq	r3, [r3, #4]
 8005bcc:	6063      	str	r3, [r4, #4]
 8005bce:	bf04      	itt	eq
 8005bd0:	1809      	addeq	r1, r1, r0
 8005bd2:	6021      	streq	r1, [r4, #0]
 8005bd4:	6054      	str	r4, [r2, #4]
 8005bd6:	e7ca      	b.n	8005b6e <_free_r+0x22>
 8005bd8:	bd38      	pop	{r3, r4, r5, pc}
 8005bda:	bf00      	nop
 8005bdc:	20001668 	.word	0x20001668

08005be0 <__malloc_lock>:
 8005be0:	4801      	ldr	r0, [pc, #4]	@ (8005be8 <__malloc_lock+0x8>)
 8005be2:	f7ff bfa3 	b.w	8005b2c <__retarget_lock_acquire_recursive>
 8005be6:	bf00      	nop
 8005be8:	20001664 	.word	0x20001664

08005bec <__malloc_unlock>:
 8005bec:	4801      	ldr	r0, [pc, #4]	@ (8005bf4 <__malloc_unlock+0x8>)
 8005bee:	f7ff bf9e 	b.w	8005b2e <__retarget_lock_release_recursive>
 8005bf2:	bf00      	nop
 8005bf4:	20001664 	.word	0x20001664

08005bf8 <_init>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	bf00      	nop
 8005bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfe:	bc08      	pop	{r3}
 8005c00:	469e      	mov	lr, r3
 8005c02:	4770      	bx	lr

08005c04 <_fini>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	bf00      	nop
 8005c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	469e      	mov	lr, r3
 8005c0e:	4770      	bx	lr
